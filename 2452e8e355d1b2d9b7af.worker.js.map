{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./gen/rts.modulify.mjs","webpack:///./gen/rts.reentrancy.mjs","webpack:///./gen/rts.eventlog.mjs","webpack:///./gen/rts.tracing.mjs","webpack:///./gen/rts.constants.mjs","webpack:///./gen/rts.memory.mjs","webpack:///./gen/rts.memorytrap.mjs","webpack:///./gen/rts.heapalloc.mjs","webpack:///./gen/rts.stableptr.mjs","webpack:///./gen/rts.stablename.mjs","webpack:///./gen/rts.staticptr.mjs","webpack:///./gen/rts.scheduler.mjs","webpack:///./gen/rts.integer.mjs","webpack:///./gen/rts.bytestring.mjs","webpack:///./gen/rts.text.mjs","webpack:///./gen/rts.time.mjs","webpack:///./gen/rts.closuretypes.mjs","webpack:///./gen/rts.autoapply.mjs","webpack:///./gen/rts.gc.mjs","webpack:///./gen/rts.funtypes.mjs","webpack:///./gen/rts.exception.mjs","webpack:///./gen/rts.messages.mjs","webpack:///./gen/rts.float.mjs","webpack:///./gen/rts.unicode.mjs","webpack:///./gen/rts.exports.mjs","webpack:///./gen/browser/default.mjs","webpack:///./gen/Browser.req.mjs","webpack:///./gen/Browser.wasm","webpack:///./src/fractran.worker.js","webpack:///./gen/rts.mjs","webpack:///./gen/rts.node.mjs"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","modulify","obj","entries","getOwnPropertyDescriptors","getPrototypeOf","reduce","acc","k","descr","ReentrancyGuard","names","this","flags","map","freeze","WebAssembly","RuntimeError","Event","lv","ev","time","Date","level","event","EventLogManager","syms","symbolTable","events","enabled","onEvent","seal","f","Boolean","_ev","push","log","Tracer","logger","symbolLookupTable","v","logInfo","lbl","dataTag","functionTag","mblock_size","mblock_size_log2","block_size","blocks_per_mblock","offset_timespec_tv_sec","offset_timespec_tv_nsec","sizeof_bdescr","offset_first_bdescr","offset_first_block","sizeof_first_mblock","offset_bdescr_start","offset_bdescr_free","offset_bdescr_link","offset_bdescr_gen_no","offset_bdescr_node","offset_bdescr_flags","offset_bdescr_blocks","BF_PINNED","pageSize","offset_Capability_r","sizeof_StgAP","offset_StgAP_arity","offset_StgAP_n_args","offset_StgAP_fun","offset_StgAP_payload","sizeof_StgAP_STACK","offset_StgAP_STACK_size","offset_StgAP_STACK_fun","offset_StgAP_STACK_payload","sizeof_StgArrBytes","offset_StgArrBytes_bytes","offset_StgFunInfoExtraFwd_fun_type","offset_StgFunInfoExtraFwd_srt","offset_StgFunInfoExtraFwd_b","offset_StgFunInfoTable_i","offset_StgFunInfoTable_f","sizeof_StgInd","offset_StgInd_indirectee","sizeof_StgIndStatic","offset_StgIndStatic_indirectee","offset_StgInfoTable_layout","offset_StgInfoTable_type","offset_StgInfoTable_srt","offset_StgLargeBitmap_size","offset_StgLargeBitmap_bitmap","sizeof_StgMutArrPtrs","offset_StgMutArrPtrs_ptrs","offset_StgMutArrPtrs_payload","offset_StgMVar_head","offset_StgMVar_tail","offset_StgMVar_value","sizeof_StgPAP","offset_StgPAP_arity","offset_StgPAP_n_args","offset_StgPAP_fun","offset_StgPAP_payload","offset_StgRegTable_rR1","offset_StgRegTable_rF1","offset_StgRegTable_rD1","offset_StgRegTable_rCurrentNursery","offset_StgRegTable_rHpAlloc","offset_StgRegTable_rRet","sizeof_StgRetFun","offset_StgRetFun_size","offset_StgRetFun_fun","offset_StgRetFun_payload","offset_StgRetInfoTable_i","offset_StgRetInfoTable_srt","sizeof_StgSelector","offset_StgSelector_selectee","sizeof_StgSmallMutArrPtrs","offset_StgSmallMutArrPtrs_ptrs","offset_StgSmallMutArrPtrs_payload","sizeof_StgThunk","offset_StgThunk_payload","offset_StgThunkInfoTable_i","offset_StgThunkInfoTable_srt","offset_StgTSO_id","offset_StgTSO_stackobj","offset_StgTSO_what_next","offset_StgTSO_why_blocked","offset_StgTSO_block_info","offset_StgStack_stack_size","offset_StgStack_sp","offset_StgStack_stack","offset_StgUpdateFrame_updatee","offset_StgWeak_cfinalizers","offset_StgWeak_key","offset_StgWeak_value","offset_StgWeak_finalizer","offset_StgWeak_link","sizeof_StgStableName","offset_StgStableName_header","offset_StgStableName_sn","offset_stat_mtime","offset_stat_size","offset_stat_mode","offset_stat_dev","offset_stat_ino","clock_monotonic","clock_realtime","hsTyCons","mask","BigInt","memory","undefined","staticMBlocks","i8View","dataView","capacity","liveBitset","static_mblocks","initView","buffer","byteLength","Uint8Array","DataView","Number","Math","floor","np","grow","unTag","getUint16","setUint16","getUint32","setUint32","getBigUint64","setBigUint64","getFloat32","setFloat32","getFloat64","setFloat64","getInt8","getUint8","getInt16","mi","tagData","max","getMBlocks","mblock_no","len","_str","subarray","indexOf","String","fromCharCode","_ptr","val","num","ptr","off","_dst","_src","copyWithin","memcpy","size","ty","1","2","Uint16Array","4","Uint32Array","8","BigUint64Array","buf","expose","fill","Float32Array","Float64Array","_ptr1","_ptr2","sgn","sign","Map","set","sym","tag","getTag","mblock_live","err","x","toString","logError","bp","trap","i8Load","i16Load","i32Load","i64Load","i32LoadS8","i32LoadU8","i32LoadS16","i32LoadU16","i64LoadS8","i64LoadU8","i64LoadS16","i64LoadU16","f32Load","f64Load","i8Store","i16Store","i32Store","i64Store","f32Store","f64Store","currentPools","generations","Array","mgroups","Set","setGenerationNo","allocMegaGroup","gen_no","forceNewAlloc","pool","b","pinned","mblocks","ceil","current_start","current_free","current_blocks","new_free","hpAlloc","allocate","req_blocks","mblock","bd","block_addr","add","live_mblocks","dead_mblocks","major","has","delete","freeMBlocks","from","length","StablePtrManager","spt","lasts","sp","addr","newWithTag","deRefStablePtr","freeStablePtr","sps","keys","freeJSVal","heapalloc","symbol_table","ptr2stable","SymbolTable","oldstable","stableptr","allocatePinned","stg_STABLE_NAME_info","w0_mask","StaticPtrManager","stableptr_manager","spt_entries","stablePtrManager","sptEntries","newStablePtr","w0_lo","w0_hi","w1_lo","w1_hi","hs_spt_key_count","fs","lastTid","tsos","gc","blockingPromise","tid","promise_resolve","promise_reject","ret_promise","Promise","resolve","reject","ret","retError","rstat","ffiRet","ffiRetType","ffiRetErr","returnPromise","tso","ffiPromise","tso_info","reason","MainCapability","performGC","setImmediate","tick","prev_stack","next_stack","growStack","why_blocked","Blocked","OnCCall","OnCCall_Interruptible","blocking_promise","then","retTyp","retVal","e","OnDelay","us_delay","setTimeout","OnBlackHole","OnMVar","OnMVarRead","stackobj","context","reentrancyGuard","enter","exception_closure","rts_apply","base_AsteriusziTypesziJSException_mkJSException_closure","rts_mkJSVal","newJSVal","stg_raise_ret_info","sync_err","scheduleTSO","stg_returnToSchedNotPaused","returnedFromTSO","exit","getJSVal","getTSOid","createThread","closure","enqueueTSO","NotBlocked","OnRead","OnWrite","OnSTM","OnDoProc","OnMsgThrowTo","ThreadMigrating","IntegerManager","view","ArrayBuffer","hi_hi","hi_lo","lo_hi","lo_lo","ipiece","setInt32","hi","lo","lhs_hi_hi","lhs_hi_lo","lhs_lo_hi","lhs_lo_lo","rhs_hi","rhs_lo","lhs_hi","lhs_lo","lhs","rhs","_q","_p","q","reverse","y","min","w","tot","dst_off","src_off","dst","src","_buf","base","pad","x_str","padStart","codePointAt","_hs_bytestring_itoa","dest","destoffp","srcend","TextDecoder","fatal","decode","charCodeAt","destp","srcoff","srclen","TextEncoder","encodeInto","written","targetSpecificModule","resolution","Time","getCPUTime","getUnixEpochTime","clk_id","sec","nsec","stg_arg_bitmaps","bdescr","nc","stablename_manager","scheduler","info_tables","reentrancy_guard","yolo","gcThreshold","heapAlloc","stableNameManager","infoTables","nonMovedObjects","nonMovedObjectsToScavenge","liveMBlocks","blocksToScavenge","deadMBlocks","liveJSVals","bytes","dest_c","dest_block","untagged_c","info","type","unDynTag","stg_WHITEHOLE_info","res_c","_","stingyEval","stg_IND_info","res_type","offset","selectee","getDynTag","setDynTag","heapAlloced","isPinned","copyClosure","ptrs","non_ptrs","evacuateClosure","n_args","payload","scavengeClosureAt","bitmap","large_bitmap","j","offset_fun","fun","fun_info","scavengeSmallBitmap","scavengeLargeBitmap","sp_lim","raw_layout","retfun","fun_info_p","fun_type","ret_fun_payload","BITMAP_SIZE_MASK","BITMAP_BITS_SHIFT","bitmap_bits","bitmap_size","closures","blocks","currentBlock","currentObject","pop","scavengeClosure","scavengePointersFirst","scavengePAP","scavengeStackChunk","stack_size","base_reg","hp_alloc","liveSize","updateNursery","ptr2stableMoved","stable","ptrMoved","stableMoved","scavengeLoop","handleLiveness","preserveJSVals","clear","decoder","reg","exception","raise_closure","stg_raise_info","p1","updateThunk","v0","v1","Messages","encoder","fmt","arg","strLoad","writeSync","encode","FLT_MIN_EXP","FLT_MANT_DIG","DBL_MIN_EXP","DBL_MANT_DIG","MY_DMINEXP","DHIGHBIT","DMSBIT","MY_FMINEXP","FHIGHBIT","FMSBIT","FLT_HIDDEN","FLT_POWER2","DBL_HIDDEN","DBL_POWER2","LTOP_BIT","is","isFinite","isFloatNaN","isDoubleNaN","bits","floatSignFromBits","doubleSignFromBits","DoubleToIEEE","exponent","doubleExponentFromBits","mantissa","doubleMantissaFromBits","FloatToIEEE","floatExponentFromBits","floatMantissaFromBits","ieee","setBigInt64","manp","expp","man","exp","high","getInt32","dbl","iexp","man_low","man_high","man_sign","ints","DoubleTo2Int","low","p_man_sign","p_man_high","p_man_low","p_exp","__decodeDouble_2IntJS","out","fexp","fman","fsign","reconstructFloat","IEEEToFloat","half","mant","frac","manFull","mant1","mant0","reconstructDouble","mantFull","IEEEToDouble","u","mantissa0","_first","of","_last","_idx","_gencat","_toupper","Int32Array","_tolower","_totitle","_property","table","idx","_bbsearch","start","end","isBaseCase","pivot","Unicode","u_gencat","decodeTys","arr","tys","callbackStablePtrs","rtsMkFuncs","decodeRtsMk","rtsGetFuncs","rts_getJSVal","decodeRtsGet","submitCmdCreateThread","arg_tag","ret_tag","io","finalizer","arg_mk_funcs","ret_get_funcs","run_func","eval_func","rts_evalIO","rts_evalLazyIO","cb","async","args","getTSOret","sn","Device","console_history","flush","consoleHistory","history","str","stream","segs","split","seg","ms","performance","now","files","console","error","fd","read","write","posix","rtsConstants","argc","argv_buf","global","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","data","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","random","source","slice","addEventListener","attachEvent","callback","Function","arguments","task","clearImmediate","apply","run","self","jsffiFactory","__asterius_jsffi","jsffi","__asterius_jsffi_basezuAsteriusziTypesziJSException_achqe","$1","stack","__asterius_jsffi_basezuAsteriusziTypesziJSString_ac9zu","__asterius_jsffi_basezuAsteriusziTypesziJSString_ac9zO","$2","fromCodePoint","__asterius_jsffi_basezuAsteriusziTypesziJSString_ac9zX","__asterius_jsffi_basezuAsteriusziTypesziJSString_ac9A9","next","done","__asterius_jsffi_basezuAsteriusziTypesziJSString_ac9Aq","iterator","__asterius_jsffi_basezuAsteriusziTypesziJSVal_ac6ak","exportsStatic","tableSlots","instance","compileStreaming","fetch","req","__asterius_persistent_state","persistentState","__asterius_reentrancy_guard","__asterius_logger","__asterius_tracer","__asterius_wasm_instance","__asterius_wasm_table","Table","element","initial","__asterius_wasm_memory","Memory","__asterius_memory","__asterius_memory_trap","__asterius_heapalloc","__asterius_stableptr_manager","__asterius_stablename_manager","__asterius_staticptr_manager","__asterius_fs","__asterius_scheduler","__asterius_integer_manager","__asterius_bytestring_cbits","__asterius_text_cbits","__asterius_time_cbits","__asterius_gc","__asterius_float_cbits","__asterius_messages","__asterius_unicode","__asterius_exports","__asterius_exception_helper","__asterius_node_modules","getNodeModules","__asterius_jsffi_instance","exposeMemory","stdio","stdout","readSync","stderr","returnFFIPromise","promise","importObject","assign","WasmTable","WasmMemory","rts","printI64","__asterius_show_I64","assertEqI64","print","count","bytestring","text","floatCBits","GC","ExceptionHelper","HeapAlloc","Integer","MemoryTrap","StablePtr","StableName","StaticPtr","Tracing","Exports","newHaskellCallback","oneshot","freeHaskellCallback","Scheduler","instantiate","init","setGC","a","hs_init","catch","input","program","hsRunDynamic","good","close"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,+CClF9C,SAASC,EAASC,GACvB,OAAOvB,OAAOwB,QACZxB,OAAOyB,0BAA0BzB,OAAO0B,eAAeH,KACvDI,OACA,CAACC,GAAMC,EAAGC,MACF,gBAAND,GAAuBC,EAAM3B,MAEvByB,EAAIC,GAAKN,EAAIM,GAAGf,KAAKS,IADvBK,GAEN,I,4gLCRG,MAAMG,EACX,YAAYC,GACVC,KAAKD,MAAQA,EACbC,KAAKC,MAAQD,KAAKD,MAAMG,IAAI,KAAM,GAClCnC,OAAOoC,OAAOH,MAGhB,MAAM3C,GACJ,GAAI2C,KAAKC,MAAM5C,GACb,MAAM,IAAI+C,YAAYC,aACpB,oBAAoBL,KAAKD,MAAM1C,iBAEnC2C,KAAKC,MAAM5C,IAAK,EAGlB,KAAKA,GACH2C,KAAKC,MAAM5C,IAAK,GChBpB,MAAMiD,EACJ,YAAYC,EAAIC,GACdR,KAAKS,KAAO,IAAIC,KAChBV,KAAKW,MAAQJ,EACbP,KAAKY,MAAQJ,EACbzC,OAAOoC,OAAOH,OAIX,MAAMa,EACX,YAAYC,GACVd,KAAKe,YAAcD,EACnBd,KAAKgB,OAAS,GACdhB,KAAKiB,SAAU,EACfjB,KAAKkB,QAAU,OACfnD,OAAOoD,KAAKnB,MAGd,YACE,OAAOA,KAAKiB,QAGd,WAAWG,GACTpB,KAAKiB,QAAUI,QAAQD,GAGzB,IAAIb,EAAIe,GACN,GAAItB,KAAKiB,QAAS,CAChB,MAAMT,EAAK,IAAIF,EAAMC,EAAIe,GACzBtB,KAAKgB,OAAOO,KAAKf,GACjBR,KAAKkB,QAAQV,IAIjB,QAAQA,GACNR,KAAKwB,IAAI,OAAQhB,GAGnB,SAASA,GACPR,KAAKwB,IAAI,QAAShB,GAGpB,SAASA,GACPR,KAAKwB,IAAI,QAAShB,IC3Cf,MAAMiB,EACX,YAAYC,EAAQZ,GAClBd,KAAK0B,OAASA,EACd1B,KAAK2B,kBAAoB,GACzB,IAAK,MAAO/B,EAAGgC,KAAM7D,OAAOwB,QAAQuB,GAAOd,KAAK2B,kBAAkBC,GAAKhC,EACvE7B,OAAOoC,OAAOH,MAGhB,SAASoB,GACPpB,KAAK0B,OAAOG,QAAQ,CAAC,OAAQT,EAAGpB,KAAK2B,kBAAkBP,KAGzD,cAAcA,EAAGU,GACf9B,KAAK0B,OAAOG,QAAQ,CAAC,KAAMT,EAAGpB,KAAK2B,kBAAkBP,GAAIU,IAG3D,iBAAiBV,EAAG/D,EAAGuE,GACrB5B,KAAK0B,OAAOG,QAAQ,CAClB,YACAT,EACApB,KAAK2B,kBAAkBP,GACvB/D,EACAuE,EACA5B,KAAK2B,kBAAkBC,MCvBtB,MAAMG,EAAU,QACVC,EAAc,QACdC,EAAc,QACdC,EAAmB,GACnBC,EAAa,KACbC,EAAoB,IACpBC,EAAyB,EACzBC,EAA0B,EAC1BC,EAAgB,GAChBC,EAAsB,IACtBC,EAAqB,MACrBC,EAAsB,QACtBC,EAAsB,EACtBC,EAAqB,EACrBC,EAAqB,GACrBC,EAAuB,GACvBC,EAAqB,GACrBC,EAAsB,GACtBC,EAAuB,GACvBC,EAAY,EACZC,EAAW,MACXC,EAAsB,GACtBC,EAAe,GACfC,EAAqB,GACrBC,EAAsB,GACtBC,EAAmB,GACnBC,EAAuB,GACvBC,EAAqB,GACrBC,EAA0B,GAC1BC,EAAyB,GACzBC,EAA6B,GAC7BC,EAAqB,GACrBC,EAA2B,EAC3BC,EAAqC,EACrCC,EAAgC,EAChCC,EAA8B,GAC9BC,EAA2B,EAC3BC,EAA2B,GAC3BC,EAAgB,GAChBC,EAA2B,EAC3BC,EAAsB,GACtBC,EAAiC,EACjCC,EAA6B,EAC7BC,EAA2B,GAC3BC,GAA0B,GAC1BC,GAA6B,EAC7BC,GAA+B,EAC/BC,GAAuB,GACvBC,GAA4B,EAC5BC,GAA+B,GAC/BC,GAAsB,EACtBC,GAAsB,GACtBC,GAAuB,GACvBC,GAAgB,GAChBC,GAAsB,EACtBC,GAAuB,GACvBC,GAAoB,GACpBC,GAAwB,GACxBC,GAAyB,EACzBC,GAAyB,GACzBC,GAAyB,IACzBC,GAAqC,IACrCC,GAA8B,IAC9BC,GAA0B,IAC1BC,GAAmB,GACnBC,GAAwB,EACxBC,GAAuB,GACvBC,GAA2B,GAC3BC,GAA2B,EAC3BC,GAA6B,GAC7BC,GAAqB,GACrBC,GAA8B,GAC9BC,GAA4B,GAC5BC,GAAiC,EACjCC,GAAoC,GACpCC,GAAkB,GAClBC,GAA0B,GAC1BC,GAA6B,EAC7BC,GAA+B,GAC/BC,GAAmB,GACnBC,GAAyB,GACzBC,GAA0B,GAC1BC,GAA4B,GAC5BC,GAA2B,GAC3BC,GAA6B,EAC7BC,GAAqB,GACrBC,GAAwB,GACxBC,GAAgC,EAChCC,GAA6B,EAC7BC,GAAqB,GACrBC,GAAuB,GACvBC,GAA2B,GAC3BC,GAAsB,GACtBC,GAAuB,GACvBC,GAA8B,EAC9BC,GAA0B,EAC1BC,GAAoB,GACpBC,GAAmB,GACnBC,GAAmB,GACnBC,GAAkB,EAClBC,GAAkB,EAClBC,GAAkB,EAClBC,GAAiB,EACjBC,GAAW,CAAC,QAAQ,OAAO,OAAO,SAAS,QAAQ,MAAM,OAAO,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,SAAS,SAAS,SAAS,YAAY,MAAM,UCrGjK,SAASC,GAAKzJ,GACZ,OAAQ0J,OAAO,IAAMA,OAAO1J,IAAM0J,OAAO,GAWpC,MAAM,GACX,cAKExI,KAAKyI,YAASC,EAUd1I,KAAK2I,mBAAgBD,EAOrB1I,KAAK4I,YAASF,EACd1I,KAAK6I,cAAWH,EAQhB1I,KAAK8I,cAAWJ,EAQhB1I,KAAK+I,gBAAaL,EAClB3K,OAAOoD,KAAKnB,MAMd,KAAKyI,EAAQO,GACXhJ,KAAKyI,OAASA,EACdzI,KAAK2I,cAAgBK,EACrBhJ,KAAKiJ,WACLjJ,KAAK8I,SAAW9I,KAAKyI,OAAOS,OAAOC,WAAa,EAChDnJ,KAAK+I,WAAaR,GAAKvI,KAAK2I,eAM9B,WACE3I,KAAK4I,OAAS,IAAIQ,WAAWpJ,KAAKyI,OAAOS,QACzClJ,KAAK6I,SAAW,IAAIQ,SAASrJ,KAAKyI,OAAOS,QAG3C,aAAa/J,GACX,OAAmB,WAAZmK,OAAOnK,GAGhB,cAAcA,GAEZ,OAAOoK,KAAKC,MAAMF,OAAOnK,GAAM,GAAG,IAGpC,eAAeA,GACb,OAAO,EAAwB,GAAG,GAAMmK,OAAOnK,GAGjD,mBAAmBA,GACjB,OAAO,EAA4B,GAAG,GAAMmK,OAAOnK,GAGrD,gBAAgBA,GACd,MAAMsK,EAAKH,OAAOnK,GAClB,OAAOsK,GAAW,EAALA,GAGf,iBAAiBtK,GACf,OAAmB,EAAZmK,OAAOnK,GAGhB,iBAAiBA,EAAGZ,GAClB,MAAMkL,EAAKH,OAAOnK,GAClB,OAAOsK,GAAW,EAALA,GAAUlL,EAWzB,KAAKO,GACHkB,KAAKyI,OAAOiB,KAAK5K,GACjBkB,KAAK8I,SAAW9I,KAAKyI,OAAOS,OAAOC,WAAa,EAChDnJ,KAAKiJ,WAGP,OAAO9J,GACL,OAAOa,KAAK4I,OAAO,GAAOe,MAAMxK,IAGlC,QAAQA,EAAGyC,GACT5B,KAAK4I,OAAO,GAAOe,MAAMxK,IAAMmK,OAAO1H,GAGxC,QAAQzC,GACN,OAAOa,KAAK6I,SAASe,UAAU,GAAOD,MAAMxK,IAAI,GAGlD,SAASA,EAAGyC,GACV5B,KAAK6I,SAASgB,UAAU,GAAOF,MAAMxK,GAAImK,OAAO1H,IAAI,GAGtD,QAAQzC,GACN,OAAOa,KAAK6I,SAASiB,UAAU,GAAOH,MAAMxK,IAAI,GAGlD,SAASA,EAAGyC,GACV5B,KAAK6I,SAASkB,UAAU,GAAOJ,MAAMxK,GAAImK,OAAO1H,IAAI,GAGtD,QAAQzC,GACN,OAAOa,KAAK6I,SAASmB,aAAa,GAAOL,MAAMxK,IAAI,GAGrD,SAASA,EAAGyC,GACV5B,KAAK6I,SAASoB,aAAa,GAAON,MAAMxK,GAAIqJ,OAAO5G,IAAI,GAGzD,QAAQzC,GACN,OAAOa,KAAK6I,SAASqB,WAAW,GAAOP,MAAMxK,IAAI,GAGnD,SAASA,EAAGyC,GACV5B,KAAK6I,SAASsB,WAAW,GAAOR,MAAMxK,GAAImK,OAAO1H,IAAI,GAGvD,QAAQzC,GACN,OAAOa,KAAK6I,SAASuB,WAAW,GAAOT,MAAMxK,IAAI,GAGnD,SAASA,EAAGyC,GACV5B,KAAK6I,SAASwB,WAAW,GAAOV,MAAMxK,GAAImK,OAAO1H,IAAI,GAGvD,UAAUzC,GACR,OAAOa,KAAK6I,SAASyB,QAAQ,GAAOX,MAAMxK,IAG5C,UAAUA,GACR,OAAOa,KAAK6I,SAAS0B,SAAS,GAAOZ,MAAMxK,IAG7C,WAAWA,GACT,OAAOa,KAAK6I,SAAS2B,SAAS,GAAOb,MAAMxK,IAAI,GAGjD,WAAWA,GACT,OAAOa,KAAK6I,SAASe,UAAU,GAAOD,MAAMxK,IAAI,GAGlD,UAAUA,GACR,OAAOqJ,OAAOxI,KAAK6I,SAASyB,QAAQ,GAAOX,MAAMxK,KAGnD,UAAUA,GACR,OAAOqJ,OAAOxI,KAAK6I,SAAS0B,SAAS,GAAOZ,MAAMxK,KAGpD,WAAWA,GACT,OAAOqJ,OAAOxI,KAAK6I,SAAS2B,SAAS,GAAOb,MAAMxK,IAAI,IAGxD,WAAWA,GACT,OAAOqJ,OAAOxI,KAAK6I,SAASe,UAAU,GAAOD,MAAMxK,IAAI,IAUzD,YAAYA,GACV,OACE,GAAOwK,MAAMxK,IACba,KAAK2I,eAAiB,EAS1B,WAAW7J,GAIT,MAAMrB,EAAI8K,GAAKzJ,GACf,IAAK,IAAIzB,EAAImL,OAAO,GAAInL,GAAKmL,OAAOxI,KAAK8I,SAAWhK,KAAMzB,EAAG,CAC3D,MAAMoN,EAAKhN,GAAKJ,EAChB,KAAM2C,KAAK+I,WAAa0B,GAEtB,OADAzK,KAAK+I,YAAc0B,EACZ,GAAOC,QAAQpB,OAAOjM,GAAK,GAMtC,IAAIM,EAAI4L,KAAKoB,IAAI7L,EAAGkB,KAAK8I,UAIzB,OAHI9I,KAAK8I,SAAWnL,GAAK,OAAMA,EAAImB,GACnCkB,KAAK0J,KAAK/L,GAAK,EAA2B,IAEnCqC,KAAK4K,WAAW9L,GAMzB,YAAYK,EAAGL,GACb,MAAM+L,EACJrC,OAAO,GAAOmB,MAAMxK,KAAOqJ,OAAO,GACpCxI,KAAK+I,cAAgBR,GAAKzJ,IAAM+L,GAGlC,OAAO1L,EAAG2L,EAAKvM,GACb,OAAO,IAAIA,EAAEyB,KAAKyI,OAAOS,OAAQ,GAAOS,MAAMxK,GAAI2L,GAGpD,OAAOC,GACL,OAAO/K,KAAK4I,OAAOoC,SAAS,GAAOrB,MAAMoB,IAAOE,QAAQ,GAG1D,QAAQF,GACN,IAAI5L,EAAI,GAAOwK,MAAMoB,GACjB3L,EAAI,GACJ/B,EAAI,EAER,OAAU,CACR,IAAIK,EAAIsC,KAAK4I,OAAOzJ,EAAI9B,GACxB,GAAS,GAALK,EACF,OAAO0B,EAETA,GAAK8L,OAAOC,aAAazN,GACzBL,KAIJ,OAAO+N,EAAMC,EAAKC,GAChB,MAAMC,EAAM,GAAO5B,MAAMyB,GACvBI,EAAMxL,KAAK4I,OAAOoC,SAASO,EAAKA,EAAMD,GAAKL,QAAQI,GACrD,OAAgB,IAATG,EAAa,EAAIJ,EAAOI,EAGjC,OAAOC,EAAMC,EAAM5M,GACjBkB,KAAK4I,OAAO+C,WACV,GAAOhC,MAAM8B,GACb,GAAO9B,MAAM+B,GACb,GAAO/B,MAAM+B,GAAQ5M,GAIzB,QAAQ2M,EAAMC,EAAM5M,GAClB,OAAOkB,KAAK4L,OAAOH,EAAMC,EAAM5M,GAGjC,OAAO2M,EAAM/N,EAAGoB,EAAG+M,EAAO,GAExB,MAAMC,EAAK,CACTC,EAAI3C,WACJ4C,EAAIC,YACJC,EAAIC,YACJC,EAAIC,gBAEAC,EAAMtM,KAAKuM,OAAOd,EAAM3M,EAAGgN,EAAGD,IAEvB,IAATA,EAKFS,EAAIE,KAAKhE,OAAO9K,IAEhB4O,EAAIE,KAAK9O,GAIb,cAAc+N,EAAM/N,EAAGoB,GACTkB,KAAKuM,OAAOd,EAAM3M,EAAG2N,cAC7BD,KAAK9O,GAGX,cAAc+N,EAAM/N,EAAGoB,GACTkB,KAAKuM,OAAOd,EAAM3M,EAAG4N,cAC7BF,KAAK9O,GAGX,OAAOiP,EAAOC,EAAO9N,GACnB,IAAK,IAAIzB,EAAI,EAAGA,EAAIyB,IAAKzB,EAAG,CAC1B,MAAMwP,EAAMtD,KAAKuD,KACf9M,KAAK4I,OAAO,GAAOe,MAAMgD,GAAStP,GAChC2C,KAAK4I,OAAO,GAAOe,MAAMiD,GAASvP,IAEtC,GAAIwP,EAAK,OAAOA,EAElB,OAAO,GCrUJ,MAAM,GACX,YAAYnL,EAAQZ,EAAM2H,GACxBzI,KAAK0B,OAASA,EACd1B,KAAK2B,kBAAoB,IAAIoL,IAC7B,IAAK,MAAOnN,EAAGgC,KAAM7D,OAAOwB,QAAQuB,GAAOd,KAAK2B,kBAAkBqL,IAAIpL,EAAGhC,GACzEI,KAAKyI,OAASA,EACd1K,OAAOoC,OAAOH,MAGhB,KAAKiN,EAAK9N,GACR,MAAM+N,EAAM,GAAOC,OAAOhO,GAExB0L,EADWrC,OAAO,GAAOmB,MAAMxK,KACPqJ,OAAO,GAC/B4E,EAAc/L,QAASrB,KAAKyI,OAAOM,YAAc8B,EAAarC,OAAO,IACvE,GAAI0E,GAAO,IAAyBE,EAAa,CAC/C,MAAMC,EAAM,IAAIjN,YAAYC,aAC1B,mBApBSiN,EAoBkBnO,EAnB1B,KAAKmO,EAAEC,SAAS,mBAmB4BvN,KAAK2B,kBAAkBzD,IAClEoL,OAAO2D,OAIX,MADAjN,KAAK0B,OAAO8L,SAASH,GACfA,EAzBZ,IAAiBC,EA6Bf,OAAOL,EAAKQ,EAAI3P,GACd,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAOkF,OAAOxO,GAG5B,QAAQ8N,EAAKQ,EAAI3P,GACf,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAOmF,QAAQzO,GAG7B,QAAQ8N,EAAKQ,EAAI3P,GACf,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAOoF,QAAQ1O,GAG7B,QAAQ8N,EAAKQ,EAAI3P,GACf,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAOqF,QAAQ3O,GAG7B,UAAU8N,EAAKQ,EAAI3P,GACjB,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAOsF,UAAU5O,GAG/B,UAAU8N,EAAKQ,EAAI3P,GACjB,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAOuF,UAAU7O,GAG/B,WAAW8N,EAAKQ,EAAI3P,GAClB,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAOwF,WAAW9O,GAGhC,WAAW8N,EAAKQ,EAAI3P,GAClB,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAOyF,WAAW/O,GAGhC,UAAU8N,EAAKQ,EAAI3P,GACjB,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAO0F,UAAUhP,GAG/B,UAAU8N,EAAKQ,EAAI3P,GACjB,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAO2F,UAAUjP,GAG/B,WAAW8N,EAAKQ,EAAI3P,GAClB,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAO4F,WAAWlP,GAGhC,WAAW8N,EAAKQ,EAAI3P,GAClB,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAO6F,WAAWnP,GAGhC,QAAQ8N,EAAKQ,EAAI3P,GACf,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAO8F,QAAQpP,GAG7B,QAAQ8N,EAAKQ,EAAI3P,GACf,MAAMqB,EAAIsO,EAAKjF,OAAO1K,GAEtB,OADAkC,KAAK0N,KAAKT,EAAK9N,GACRa,KAAKyI,OAAO+F,QAAQrP,GAG7B,QAAQ8N,EAAKQ,EAAI3P,EAAG8D,GAClB,MAAMzC,EAAIsO,EAAKjF,OAAO1K,GACtBkC,KAAK0N,KAAKT,EAAK9N,GACfa,KAAKyI,OAAOgG,QAAQtP,EAAGyC,GAGzB,SAASqL,EAAKQ,EAAI3P,EAAG8D,GACnB,MAAMzC,EAAIsO,EAAKjF,OAAO1K,GACtBkC,KAAK0N,KAAKT,EAAK9N,GACfa,KAAKyI,OAAOiG,SAASvP,EAAGyC,GAG1B,SAASqL,EAAKQ,EAAI3P,EAAG8D,GACnB,MAAMzC,EAAIsO,EAAKjF,OAAO1K,GACtBkC,KAAK0N,KAAKT,EAAK9N,GACfa,KAAKyI,OAAOkG,SAASxP,EAAGyC,GAG1B,SAASqL,EAAKQ,EAAI3P,EAAG8D,GACnB,MAAMzC,EAAIsO,EAAKjF,OAAO1K,GACtBkC,KAAK0N,KAAKT,EAAK9N,GACfa,KAAKyI,OAAOmG,SAASzP,EAAGyC,GAG1B,SAASqL,EAAKQ,EAAI3P,EAAG8D,GACnB,MAAMzC,EAAIsO,EAAKjF,OAAO1K,GACtBkC,KAAK0N,KAAKT,EAAK9N,GACfa,KAAKyI,OAAOoG,SAAS1P,EAAGyC,GAG1B,SAASqL,EAAKQ,EAAI3P,EAAG8D,GACnB,MAAMzC,EAAIsO,EAAKjF,OAAO1K,GACtBkC,KAAK0N,KAAKT,EAAK9N,GACfa,KAAKyI,OAAOqG,SAAS3P,EAAGyC,ICvIrB,MAAM,GACX,YAAY6G,GAKVzI,KAAKyI,OAASA,EAWdzI,KAAK+O,aAAe,MAACrG,OAAWA,GAOhC1I,KAAKgP,YAAc,IAAIC,MAAM,GAI7BjP,KAAKkP,QAAU,IAAIC,IACnBpR,OAAOoC,OAAOH,MAMhB,OACEA,KAAKoP,gBAAgB,GACrBpP,KAAK+O,aAAa,GAAK/O,KAAKqP,eAAe,GAAG,GAShD,gBAAgBC,EAAQC,GAAc,GACpC,IAAIC,EAAOxP,KAAKgP,YAAYM,IACxBC,GAAkBC,IACpBA,EAAOxP,KAAKqP,eAAe,GAAG,EAAOC,GACrCtP,KAAKgP,YAAYM,GAAUE,GAE7BxP,KAAK+O,aAAa,GAAKS,EAYzB,QAAQC,EAAGC,GAAO,EAAOJ,EAAO,GAC9B,MAAMK,EACFF,GAAK,EACD,EACA,EACAlG,KAAKqG,MACFH,EAAI,GAAoC,GAGnD,OADOzP,KAAKqP,eAAeM,EAASD,EAAQJ,GAU9C,SAASxQ,EAAG4Q,GAAS,GACnB,MAAMD,EAAI3Q,GAAK,EAGf4Q,EAASA,GAAUD,GAAK,EACxB,IAAID,EAAOxP,KAAK+O,aAAazF,OAAOoG,IAClCG,EAAgBvG,OACdtJ,KAAKyI,OAAOqF,QAAQ0B,EAAO,IAE7BM,EAAexG,OACbtJ,KAAKyI,OAAOqF,QAAQ0B,EAAO,IAE/B,MAAMO,EAAiB/P,KAAKyI,OAAOoF,QAC/B2B,EAAO,GAGTQ,EAAWF,EAAeL,EAE5B,GAAIO,GAHcH,EAAgB,EAA0BE,EAK1D/P,KAAKyI,OAAOmG,SACVY,EAAO,EACPQ,OAEG,CAGL,GAAIN,EACFF,EAAOxP,KAAKiQ,QAAQR,GAAG,GACvBzP,KAAK+O,aAAa,GAAKS,MAClB,CACL,MAAMF,EAAStP,KAAKyI,OAAOmF,QAAQ4B,EAAO,GAC1CA,EAAOxP,KAAKiQ,QAAQR,GAAG,EAAOH,GAC9BtP,KAAK+O,aAAa,GAAKS,EACvBxP,KAAKgP,YAAYM,GAAUE,EAE7BM,EAAexG,OACbtJ,KAAKyI,OAAOqF,QACV0B,EAAO,IAGXxP,KAAKyI,OAAOmG,SACVY,EAAO,EACPM,EAAeL,GAGnB,OAAOK,EAOT,eAAehR,GACb,OAAOkB,KAAKkQ,SAASpR,GAAG,GAW1B,eAAeA,EAAG4Q,GAAO,EAAOJ,EAAO,GACrC,MAAMa,GACD,EAA2BrR,EAAI,GAChC,EACFsR,EAASpQ,KAAKyI,OAAOmC,WAAW9L,GAChCuR,EAAKD,EAAS,EACdE,EAAaF,EAAS,EAYxB,OAXApQ,KAAKyI,OAAOmG,SAASyB,EAAK,EAAkCC,GAC5DtQ,KAAKyI,OAAOmG,SAASyB,EAAK,EAAiCC,GAC3DtQ,KAAKyI,OAAOmG,SAASyB,EAAK,EAAiC,GAC3DrQ,KAAKyI,OAAOiG,SAAS2B,EAAK,EAAiCvR,GAC3DkB,KAAKyI,OAAOkG,SAAS0B,EAAK,EAAmCF,GAC7DnQ,KAAKyI,OAAOiG,SACV2B,EAAK,EACLX,EAAS,EAAyB,GAEpC1P,KAAKyI,OAAOiG,SAAS2B,EAAK,EAAmCf,GAC7DtP,KAAKkP,QAAQqB,IAAIF,GACVA,EAWT,eAAeG,EAAcC,EAAcC,GAAM,GAC/C,IAAK,MAAML,KAAMG,EACf,IAAKxQ,KAAKkP,QAAQyB,IAAIN,GACpB,MAAM,IAAIjQ,YAAYC,aACpB,yBAAyBgQ,EAAG9C,SAAS,KAK3C,IAAK,MAAM8C,KAAMI,EAAc,CAC7B,IAAKzQ,KAAKkP,QAAQyB,IAAIN,GACpB,MAAM,IAAIjQ,YAAYC,aACpB,yBAAyBgQ,EAAG9C,SAAS,KAGzCvN,KAAKkP,QAAQ0B,OAAOP,GACpB,MAAMlR,EAAIkR,EAAK,EACbvR,EAAIkB,KAAKyI,OAAOmF,QAAQyC,EAAK,GAC/BrQ,KAAKyI,OAAOoI,YAAY1R,EAAGL,GAI7B,IAAK,MAAMuR,KAAMpB,MAAM6B,KAAK9Q,KAAKkP,SAC/B,IAAKsB,EAAaG,IAAIN,GAAK,CACzB,MACEf,EAAStP,KAAKyI,OAAOmF,QAAQyC,EAAK,GAClCX,EAASrO,QACPrB,KAAKyI,OAAOmF,QAAQyC,EAAK,GAAoC,GAOjE,GAAGK,IAAWhB,GAAoB,GAAVJ,EAAc,CACpCtP,KAAKkP,QAAQ0B,OAAOP,GACpB,MAAMlR,EAAIkR,EAAK,EACbvR,EAAIkB,KAAKyI,OAAOmF,QAAQyC,EAAK,GAC/BrQ,KAAKyI,OAAOoI,YAAY1R,EAAGL,IAK5BkB,KAAKkP,QAAQyB,IAAI3Q,KAAK+O,aAAa,MACtC/O,KAAK+O,aAAa,GAAK/O,KAAKqP,eAAe,GAAG,IAGhD,IAAK,IAAIhS,EAAE,EAAGA,EAAI2C,KAAKgP,YAAY+B,OAAQ1T,IACpC2C,KAAKkP,QAAQyB,IAAI3Q,KAAKgP,YAAY3R,MACrC2C,KAAKgP,YAAY3R,QAAKqL,GAU5B,WACE,IAAI/I,EAAM,EACV,IAAK,MAAM0Q,KAAMrQ,KAAKkP,QACpBvP,GAAOK,KAAKyI,OAAOmF,QAAQyC,EAAK,GAElC,OAAO1Q,GC9PJ,MAAMqR,GACX,cACEhR,KAAKiR,IAAM,IAAIlE,IACf/M,KAAKkR,MAAQ,CAAC,EAAG,GACjBnT,OAAOoC,OAAOH,MAGhB,WAAW4B,EAAGsL,GACZ,MAAMiE,IAAQnR,KAAKkR,MAAMhE,IAAQ,EAAKA,EAEtC,OADAlN,KAAKiR,IAAIjE,IAAImE,EAAIvP,GACVuP,EAGT,aAAaC,GACX,OAAOpR,KAAKqR,WAAWD,EAAM,GAG/B,eAAeD,GACb,OAAOnR,KAAKiR,IAAI/S,IAAIiT,GAGtB,cAAcA,GACZnR,KAAKiR,IAAIL,OAAOO,GAGlB,SAASvP,GACP,OAAO5B,KAAKqR,WAAWzP,EAAG,GAG5B,SAASuP,GACP,OAAOnR,KAAKsR,eAAeH,GAG7B,UAAUA,GACRnR,KAAKuR,cAAcJ,GAGrB,aAAaA,GACX,OAAOnR,KAAKiR,IAAIN,IAAIQ,GAGtB,eAAeK,GACb,IAAK,MAAML,KAAMlC,MAAM6B,KAAK9Q,KAAKiR,IAAIQ,QAC1B,EAALN,IAAWK,EAAIb,IAAIQ,IAAKnR,KAAK0R,UAAUP,ICvC1C,MAAM,GACX,YAAY1I,EAAQkJ,EAAWC,GAC7B5R,KAAKyI,OAASA,EACdzI,KAAK2R,UAAYA,EACjB3R,KAAK6R,WAAa,IAAI9E,IACtB/M,KAAK8R,YAAcF,EACnB7T,OAAOoD,KAAKnB,MAGd,eAAeuL,GACb,MAAMwG,EAAY/R,KAAK6R,WAAW3T,IAAIqN,GACtC,QAAkB7C,IAAdqJ,EAAyB,OAAOA,EAEpC,MAAM7E,EAAMlN,KAAK6R,WAAWhG,KAG5B,IAAImG,EAAYhS,KAAK2R,UAAUM,eAC7B,IAOF,OALAjS,KAAKyI,OAAOmG,SAASoD,EAAWhS,KAAK8R,YAAYI,sBACjDlS,KAAKyI,OAAOmG,SAASoD,EAAY,GAAsC9E,GAEvElN,KAAK6R,WAAW7E,IAAIzB,EAAKyG,GAElBA,GC5BX,MAAMG,IAAW3J,OAAO,IAAMA,OAAO,KAAOA,OAAO,GAE5C,MAAM4J,GACX,YAAY3J,EAAQ4J,EAAmBC,GACrCtS,KAAKyI,OAASA,EACdzI,KAAKuS,iBAAmBF,EACxBrS,KAAKwS,WAAaF,EAClBvU,OAAOoC,OAAOH,MACd,IAAK,MAAO,CAAEtC,KAAMsC,KAAKwS,WACvBxS,KAAKuS,iBAAiBE,aAAa/U,GAIvC,cAAcgV,EAAOC,EAAOC,EAAOC,GACjC,MAAM1U,EAAI6B,KAAKwS,WAAWtU,IACvBsK,OAAOqK,IAAUrK,OAAO,IACtBA,OAAOoK,IAAUpK,OAAO,IACxBA,OAAOmK,IAAUnK,OAAO,IACzBA,OAAOkK,IAEX,OAAOvU,GAAQ,EAGjB,mBACE,OAAO6B,KAAKwS,WAAW3G,KAGzB,YAAY1M,EAAGL,GACb,GAAIA,IAAMkB,KAAK8S,mBACb,MAAM,IAAI1S,YAAYC,aACpB,wBAAwBvB,yBAAyBkB,KAAK8S,sBAG1D,IAAK,MAAOlT,KAAMI,KAAKwS,WACrBxS,KAAKyI,OAAOmG,SAASzP,EAAGS,EAAIuS,IAC5BnS,KAAKyI,OAAOmG,SAASzP,EAAI,EAAGS,GAAK4I,OAAO,KACxCrJ,GAAK,GAEP,OAAOL,GC5BJ,MAAM,GACX,YAAY2J,EAAQmJ,EAAcW,EAAkBQ,GAClD/S,KAAKyI,OAASA,EACdzI,KAAKe,YAAc6Q,EACnB5R,KAAKgT,QAAU,EACfhT,KAAKiT,KAAO,IAAIlG,IAChB/M,KAAK7C,aAAUuL,EACf1I,KAAKuS,iBAAmBA,EACxBvS,KAAK+S,GAAKA,EACV/S,KAAKkT,QAAKxK,EACV1I,KAAKmT,qBAAkBzK,EACvB3K,OAAOoD,KAAKnB,MAGd,MAAMkT,GACJlT,KAAKkT,GAAKA,EAQZ,SACE,MAAME,IAAQpT,KAAKgT,QACnB,IAAIK,EAAiBC,EACrB,MAAMC,EAAc,IAAIC,QAAQ,CAACC,EAASC,KACxCL,EAAkBI,EAClBH,EAAiBI,IAiBnB,OAfA1T,KAAKiT,KAAKjG,IACRoG,EACArV,OAAOoD,KAAK,CACViQ,MAAO,EACPuC,IAAK,EACLC,cAAUlL,EACVmL,OAAQ,EACRC,YAAQpL,EACRqL,gBAAYrL,EACZsL,eAAWtL,EACXuL,cAAeV,EACfF,gBAAiBA,EACjBC,eAAgBA,KAGbF,EAGT,WAAWA,GACT,OAAOpT,KAAKiT,KAAK/U,IAAIkV,GAAKhC,KAG5B,UAAUgC,GACR,OAAOpT,KAAKiT,KAAK/U,IAAIkV,GAAKO,IAG5B,YAAYP,GACV,OAAOpT,KAAKiT,KAAK/U,IAAIkV,GAAKS,MAG5B,WAAWT,EAAKhC,GACdpR,KAAKiT,KAAK/U,IAAIkV,GAAKhC,KAAOA,EAG5B,UAAUgC,EAAKO,GACb3T,KAAKiT,KAAK/U,IAAIkV,GAAKO,IAAMA,EAG3B,YAAYP,EAAKS,GACf7T,KAAKiT,KAAK/U,IAAIkV,GAAKS,MAAQA,EAG7B,SAASK,GACP,OAAOlU,KAAKyI,OAAOoF,QAAQqG,EAAM,IAQnC,iBAAiBC,GACfnU,KAAKmT,gBAAkBgB,EAMzB,gBAAgBf,GACd,MAAMgB,EAAWpU,KAAKiT,KAAK/U,IAAIkV,GACzBc,EAAME,EAAShD,KACfiD,EAAS/K,OACbtJ,KAAKyI,OAAOqF,QACV9N,KAAKe,YAAYuT,eACf,EACA,KAIN,OAAQD,GACN,KAAK,EAGHrU,KAAKkT,GAAGqB,YAIRC,aAAa,IAAMxU,KAAKyU,KAAKrB,IAC7B,MAEF,KAAK,EAAG,CAEN,MAAMsB,EAAapL,OACftJ,KAAKyI,OAAOqF,QAAQoG,EAAM,KAE5BS,EAAa3U,KAAK7C,QAAQyX,UAAUF,GACtC1U,KAAKyI,OAAOmG,SACVsF,EAAM,GACNS,GAEFH,aAAa,IAAMxU,KAAKyU,KAAKrB,IAC7B,MAEF,KAAK,EAGHoB,aAAa,IAAMxU,KAAKyU,KAAKrB,IAC7B,MAEF,KAAK,EAAG,CAGN,MAAMyB,EAAcvL,OAClBtJ,KAAKyI,OAAOmF,QAAQsG,EAAM,KAG5B,OAAQW,GACN,KAAKC,GAAQC,QACb,KAAKD,GAAQE,sBAAuB,CAGlC,MAAMC,EAAmBjV,KAAKmT,gBAC9BnT,KAAKmT,qBAAkBzK,EACvBuM,EAAiBC,KACftT,IAEE,MAAOuT,EAAQC,GAAUxT,EACzBwS,EAASN,OAASsB,EAClBhB,EAASL,WAAaoB,EACtBX,aAAa,IAAMxU,KAAKyU,KAAKrB,KAE/BiC,IACEjB,EAASJ,UAAYqB,EAErBb,aAAa,IAAMxU,KAAKyU,KAAKrB,MAGjC,MAGF,KAAK0B,GAAQQ,QAAS,CACpB,MAAMC,EAAWjM,OACftJ,KAAKyI,OAAOqF,QAAQoG,EAAM,KAEH,IAAIV,QAAQ,CAACC,EAASC,KAC7C8B,WAAW,IAAM/B,IAAW8B,EAAW,OAGxBL,KACf,KACEV,aAAa,IAAMxU,KAAKyU,KAAKrB,KAE/BiC,IACE,MAAM,IAAIjV,YAAYC,aACpB,iDAAiDgV,KAIvD,MAGF,KAAKP,GAAQW,YACb,KAAKX,GAAQY,OACb,KAAKZ,GAAQa,WAEX,MAGF,QACE,MAAM,IAAIvV,YAAYC,aACpB,qCAAqCwU,GAK3C,MAEF,KAAK,EAMH,OAHkBvL,OAChBtJ,KAAKyI,OAAOmF,QAAQsG,EAAM,MAG1B,KAAK,EAEHM,aAAa,IAAMxU,KAAKyU,KAAKrB,IAC7B,MAEF,KAAK,EAEHgB,EAAST,IAAM,EACfS,EAASP,MAAQ,EACjBO,EAASd,eAAec,EAASR,UACjC,MAEF,KAAK,EAAG,CAEN,MAAMgC,EAAWtM,OACftJ,KAAKyI,OAAOqF,QAAQoG,EAAM,KAEtB/C,EAAK7H,OACTtJ,KAAKyI,OAAOqF,QAAQ8H,EAAW,KAEjCxB,EAAST,IAAMrK,OAAOtJ,KAAKyI,OAAOqF,QAAQqD,EAAK,IAC/CiD,EAASP,MAAQ,EACjBO,EAASf,gBAAgBD,GACzB,OAGJ,MAEF,QACE,MAAM,IAAIhT,YAAYC,aACpB,wDAAwDgU,IAMhE,KAAKjB,GACHpT,KAAK7C,QAAQ0Y,QAAQC,gBAAgBC,MAAM,GAC3C,IACE,MAAM3B,EAAWpU,KAAKiT,KAAK/U,IAAIkV,GACzBc,EAAME,EAAShD,KAKrB,GAAIgD,EAASJ,UAAW,CAGtB,MAAM4B,EAAWtM,OACbtJ,KAAKyI,OAAOqF,QAAQoG,EAAM,KAE5B/C,EACE7H,OACEtJ,KAAKyI,OAAOqF,QAAQ8H,EAAW,KAC7B,GACNI,EAAoBhW,KAAK7C,QAAQ8Y,UAC/BjW,KAAKe,YACFmV,wDACHlW,KAAK7C,QAAQgZ,YACXnW,KAAKuS,iBAAiB6D,SAAShC,EAASJ,aAG9ChU,KAAKyI,OAAOmG,SAASgH,EAAW,GAAiCzE,GACjEnR,KAAKyI,OAAOmG,SAASuC,EAAInR,KAAKe,YAAYsV,oBAC1CrW,KAAKyI,OAAOmG,SAASuC,EAAK,EAAG6E,QACxB,GAAmC,iBAAxB5B,EAASL,WACzB,OACEK,EAASL,YAET,KAAK,EAEH,MAEF,KAAK,EAAG,CAEN,MAAMxI,EAAMvL,KAAKuS,iBAAiB6D,SAAShC,EAASN,QAEpD9T,KAAKyI,OAAOmG,SACV5O,KAAKe,YAAYuT,eACf,EACA,GACF/I,GAEF,MAEF,KAAK,EAEHvL,KAAKyI,OAAOmG,SACV5O,KAAKe,YAAYuT,eACf,EACA,GACFF,EAASN,QAEX,MAEF,KAAK,EAEH9T,KAAKyI,OAAOoG,SACV7O,KAAKe,YAAYuT,eACf,EACA,GACFF,EAASN,QAEX,MAEF,KAAK,EAEH9T,KAAKyI,OAAOqG,SACV9O,KAAKe,YAAYuT,eACf,EACA,GACFF,EAASN,QAEX,MAEF,QAGE,MAAM,IAAI1T,YAAYC,aACpB,yCAAyC+T,EAASL,sCAAsCK,EAASN,UAKzGM,EAASN,YAASpL,EAClB0L,EAASL,gBAAarL,EACtB0L,EAASJ,eAAYtL,EAGrB,IAAI4N,GAAW,EACf,IACEtW,KAAK7C,QAAQoZ,YAAYrC,GACzB,MAAO7G,GACPiJ,GAAW,EACXtW,KAAK7C,QAAQqZ,6BACbpC,EAASJ,UAAY3G,EACrBmH,aAAa,IAAMxU,KAAKyU,KAAKrB,IAE1BkD,GACHtW,KAAKyW,gBAAgBrD,GAEvB,QACApT,KAAK7C,QAAQ0Y,QAAQC,gBAAgBY,KAAK,IAI9C,mBAAmBxC,EAAKtS,GACtB,MAAMyL,EAAMrN,KAAKuS,iBAAiBoE,SAAS/U,GAC3C5B,KAAKuS,iBAAiBb,UAAU9P,GAChC,MAAMwR,EAAMpT,KAAK4W,SAAS1C,GAC1BlU,KAAKiT,KAAK/U,IAAIkV,GAAKQ,SAAWvG,EAMhC,WAAW6G,GACT,MAAMd,EAAMpT,KAAK4W,SAAS1C,GAGpBE,EAAWpU,KAAKiT,KAAK/U,IAAIkV,IACT,GAAlBgB,EAAShD,OACXgD,EAAShD,KAAO9H,OAAO4K,IAIzBM,aAAa,IAAMxU,KAAKyU,KAAKrB,IAU/B,sBAAsByD,EAAcC,GAClC,MAAM5C,EAAMlU,KAAK7C,QAAQ0Z,GAAcC,GACrC1D,EAAMpT,KAAK4W,SAAS1C,GACpBE,EAAWpU,KAAKiT,KAAK/U,IAAIkV,GAE3B,OADApT,KAAK+W,WAAW7C,GACTE,EAASH,eAOpB,MAAMa,GAAU,CACdkC,WAAY,EACZtB,OAAQ,EACRC,WAAY,GACZF,YAAa,EACbwB,OAAQ,EACRC,QAAS,EACT5B,QAAS,EACT6B,MAAO,EACPC,SAAU,EACVrC,QAAS,GACTC,sBAAuB,GACvBqC,aAAc,GACdC,gBAAiB,IC/ZZ,MAAMC,GACX,cAEEvX,KAAKwX,KAAO,IAAInO,SAAS,IAAIoO,YAAY,IAEzC1Z,OAAOoC,OAAOH,MAGhB,KAAK0X,EAAOC,EAAOC,EAAOC,EAAOC,GAC/B9X,KAAKwX,KAAKO,SAAqB,EAAGJ,GAAyB,GAC3D3X,KAAKwX,KAAKO,SAAqB,EAAGL,GAAyB,GAC3D,MAAMM,EAAKhY,KAAKwX,KAAKxN,aAAyB,GAAqB,GAEnEhK,KAAKwX,KAAKO,SAAqB,EAAGF,GAAyB,GAC3D7X,KAAKwX,KAAKO,SAAqB,EAAGH,GAAyB,GAC3D,MAAMK,EAAKjY,KAAKwX,KAAKxN,aAAyB,GAAqB,GAI7DqB,EAAM/B,OAFA0O,EAAKC,GAGPzP,OAAO,GAAKsP,IAAatP,OAAO,IAAMA,OAAO,KAAOA,OAAO,IAGrE,OAAOc,OAAO+B,GAGhB,kBACE6M,EACAC,EACAC,EACAC,EACAC,EACAC,EACAT,GAEA9X,KAAKwX,KAAKO,SAAqB,EAAGI,GAA6B,GAC/DnY,KAAKwX,KAAKO,SAAqB,EAAGG,GAA6B,GAC/D,MAAMM,EAASxY,KAAKwX,KAAKxN,aACX,GACM,GAGpBhK,KAAKwX,KAAKO,SAAqB,EAAGM,GAA6B,GAC/DrY,KAAKwX,KAAKO,SAAqB,EAAGK,GAA6B,GAC/D,MAAMK,EAASzY,KAAKwX,KAAKxN,aACX,GACM,GAEd0O,EAAOF,GAAUhQ,OAAO,IAAOiQ,EAErCzY,KAAKwX,KAAKO,SAAqB,EAAGQ,GAA0B,GAC5DvY,KAAKwX,KAAKO,SAAqB,EAAGO,GAA0B,GAC5D,MAAMK,EAAM3Y,KAAKwX,KAAKxN,aAAyB,GAAqB,GAI9DqB,EAAM/B,OAFCoP,EAAMC,GAGRnQ,OAAO,GAAKsP,IAAatP,OAAO,IAAMA,OAAO,KAAOA,OAAO,IAGtE,OAAOc,OAAO+B,GAGhB,mBACE6M,EACAC,EACAC,EACAC,EACAC,EACAC,EACAT,GAEA9X,KAAKwX,KAAKO,SAAqB,EAAGI,GAA6B,GAC/DnY,KAAKwX,KAAKO,SAAqB,EAAGG,GAA6B,GAC/D,MAAMM,EAASxY,KAAKwX,KAAKxN,aACX,GACM,GAGpBhK,KAAKwX,KAAKO,SAAqB,EAAGM,GAA6B,GAC/DrY,KAAKwX,KAAKO,SAAqB,EAAGK,GAA6B,GAC/D,MAAMK,EAASzY,KAAKwX,KAAKxN,aACX,GACM,GAEd0O,EAAOF,GAAUhQ,OAAO,IAAOiQ,EAErCzY,KAAKwX,KAAKO,SAAqB,EAAGQ,GAA0B,GAC5DvY,KAAKwX,KAAKO,SAAqB,EAAGO,GAA0B,GAC5D,MAAMK,EAAM3Y,KAAKwX,KAAKxN,aAAyB,GAAqB,GAI9DqB,EAAM/B,OAFAoP,EAAMC,GAGRnQ,OAAO,GAAKsP,IAAatP,OAAO,IAAMA,OAAO,KAAOA,OAAO,IAGrE,OAAOc,OAAO+B,IC/FX,MAAM,GACX,YAAY5C,GACVzI,KAAKyI,OAASA,EACd1K,OAAOoD,KAAKnB,MAGd,YAAY4Y,EAAIC,EAAI/Z,GAClB,MAAMga,EAAI,GAAOnP,MAAMiP,GACrBzZ,EAAI,GAAOwK,MAAMkP,GACnB7Y,KAAKyI,OAAOG,OAAO+C,WAAWmN,EAAG3Z,EAAGA,EAAIL,GACxCkB,KAAKyI,OAAOG,OAAOoC,SAAS8N,EAAGA,EAAIha,GAAGia,UAGxC,gBAAgBH,EAAIC,EAAI/Z,EAAGpB,GACzB,IAAIob,EAAI,GAAOnP,MAAMiP,GACnBzZ,EAAI,GAAOwK,MAAMkP,GACnB,KAAO/Z,EAAI,GACTkB,KAAKyI,OAAOG,OAAOkQ,KAAO9Y,KAAKyI,OAAOG,OAAOzJ,KAC7Ca,KAAKyI,OAAOG,OAAOkQ,KAAOpb,IACxBoB,EAEM,IAANA,IAASkB,KAAKyI,OAAOG,OAAOkQ,GAAK9Y,KAAKyI,OAAOG,OAAOzJ,IAG1D,YAAY0Z,EAAI/N,GACd,MAAM3L,EAAI,GAAOwK,MAAMkP,GACrB3P,EAASlJ,KAAKyI,OAAOG,OAAOoC,SAAS7L,EAAGA,EAAI2L,GAC9C,OAAO5B,EAAOxJ,OAAO,CAAC4N,EAAG0L,IAAMzP,KAAKoB,IAAI2C,EAAG0L,GAAI9P,EAAO,IAGxD,YAAY2P,EAAI/N,GACd,MAAM3L,EAAI,GAAOwK,MAAMkP,GACrB3P,EAASlJ,KAAKyI,OAAOG,OAAOoC,SAAS7L,EAAGA,EAAI2L,GAC9C,OAAO5B,EAAOxJ,OAAO,CAAC4N,EAAG0L,IAAMzP,KAAK0P,IAAI3L,EAAG0L,GAAI9P,EAAO,IAGxD,UAAU2P,EAAI/N,EAAKoO,GACjB,MAAM/Z,EAAI,GAAOwK,MAAMkP,GAEvB,OADW7Y,KAAKyI,OAAOG,OAAOoC,SAAS7L,EAAGA,EAAI2L,GAChCpL,OAAO,CAACyZ,EAAKzb,IAAOA,IAAMwb,EAAIC,EAAM,EAAIA,EAAM,GAG9D,mBAAmB1N,EAAM2N,EAAS1N,EAAM2N,EAASva,GAC/C,MAAMwa,EAAM,GAAO3P,MAAM8B,GACvB8N,EAAM,GAAO5P,MAAM+B,GAMrB,OALA1L,KAAKyI,OAAOG,OAAO+C,WACjB2N,EAAMF,EACNG,EAAMF,EACNE,EAAMF,EAAUva,GAEX2M,EAAO2N,EAGhB,oBAAoB9L,EAAGkM,EAAMC,EAAMC,GACjC,MAAMpN,EAAM,GAAO3C,MAAM6P,GACvBG,EAAQrM,EAAEC,SAASkM,GAAMG,SAASF,EAAK,KACzC,IAAK,IAAIrc,EAAI,EAAGA,EAAIsc,EAAM5I,SAAU1T,EAClC2C,KAAKyI,OAAOG,OAAO0D,EAAMjP,GAAKsc,EAAME,YAAYxc,GAClD,OAAOmc,EAAOG,EAAM5I,OAGtB,uBAAuBzD,EAAGkM,GACxB,OAAOxZ,KAAK8Z,oBAAoBxM,EAAGkM,EAAM,GAAI,GAG/C,iCAAiClM,EAAGkM,GAClC,OAAOxZ,KAAK8Z,oBAAoBxM,EAAGkM,EAAM,GAAI,GAG/C,wBAAwBlM,EAAGkM,GACzB,OAAOxZ,KAAK8Z,oBAAoBxM,EAAGkM,EAAM,GAAI,GAG/C,kCAAkClM,EAAGkM,GACnC,OAAOxZ,KAAK8Z,oBAAoBxM,EAAGkM,EAAM,GAAI,GAG/C,+BAA+BlM,EAAGkM,GAChCxZ,KAAK8Z,oBAAoBxM,EAAGkM,EAAM,GAAI,GAGxC,0CAA0ClM,EAAGkM,GAC3CxZ,KAAK8Z,oBAAoBxM,EAAGkM,EAAM,GAAI,IAGxC,wBAAwBlM,EAAGkM,GACzB,OAAOxZ,KAAK8Z,oBAAoBxM,EAAGkM,EAAM,GAAI,GAG/C,kCAAkClM,EAAGkM,GACnC,OAAOxZ,KAAK8Z,oBAAoBxM,EAAGkM,EAAM,GAAI,IC1F1C,MAAM,GACX,YAAY/Q,GACVzI,KAAKyI,OAASA,EACd1K,OAAOoD,KAAKnB,MAGd,gBAAgByL,EAAM2N,EAAS1N,EAAM2N,EAASva,GAC5C,MAAMwa,EAAM,GAAO3P,MAAM8B,GAAkB,EAAV2N,EAC/BG,EAAM,GAAO5P,MAAM+B,GAAkB,EAAV2N,EAC7BrZ,KAAKyI,OAAOG,OAAO+C,WAAW2N,EAAKC,EAAKA,EAAU,EAAJza,GAGhD,gBAAgB2M,EAAM2N,EAAS1N,EAAM2N,EAASva,GAC5C,MAAMwa,EAAM,GAAO3P,MAAM8B,GAAkB,EAAV2N,EAC/BG,EAAM,GAAO5P,MAAM+B,GAAkB,EAAV2N,EAC7B,IAAK,IAAIhc,EAAI,EAAGA,EAAQ,EAAJyB,IAASzB,EAAG,CAC9B,MAAMwP,EAAMtD,KAAKuD,KACf9M,KAAKyI,OAAOG,OAAO0Q,EAAMjc,GAAK2C,KAAKyI,OAAOG,OAAO2Q,EAAMlc,IAEzD,GAAIwP,EAAK,OAAOA,EAElB,OAAO,EAGT,qBAAqBkN,EAAMC,EAAUT,EAAKU,GACxC,MACE7a,EADU,IAAI8a,YAAY,QAAS,CAAEC,OAAO,IACpCC,OACNpa,KAAKyI,OAAOG,OAAOoC,SAAS,GAAOrB,MAAM4P,GAAM,GAAO5P,MAAMsQ,KAEhE,IAAK,IAAI5c,EAAI,EAAGA,EAAI+B,EAAE2R,SAAU1T,EAC9B2C,KAAKyI,OAAOiG,SAASqL,EAAW,EAAJ1c,EAAO+B,EAAEib,WAAWhd,IAElD,OADA2C,KAAKyI,OAAOmG,SAASoL,EAAU5a,EAAE2R,QAC1BkJ,EAGT,qBAAqBK,EAAOf,EAAKgB,EAAQC,GACvC,MACEpb,EADU,IAAI8a,YAAY,WAAY,CAAEC,OAAO,IACvCC,OACNpa,KAAKyI,OAAOG,OAAOoC,SACjB,GAAOrB,MAAM4P,EAAe,EAATgB,GACnB,GAAO5Q,MAAM4P,EAAe,EAATgB,EAAsB,EAATC,KAGpCT,EAAOzQ,OAAOtJ,KAAKyI,OAAOqF,QAAQwM,IASlChd,GARM,IAAImd,aAQFC,WACNtb,EACAY,KAAKyI,OAAOG,OAAOoC,SACjB,GAAOrB,MAAMoQ,GACb,GAAOpQ,MAAMoQ,EAAgB,EAATS,KAEtBG,QACJ3a,KAAKyI,OAAOmG,SAAS0L,EAAOP,EAAOzc,IC3DhC,MAAM,GACX,YAAYmL,EAAQmS,GAClB5a,KAAKyI,OAASA,EAEdzI,KAAK6a,WAAaD,EAAqBE,KAAKD,WAC5C7a,KAAK+a,WAAaH,EAAqBE,KAAKC,WAC5C/a,KAAKgb,iBAAmBJ,EAAqBE,KAAKE,iBAClDjd,OAAOoC,OAAOH,MAMhB,mBACE,MAAMS,EAAOT,KAAK+a,aAClB,OAAiB,IAAVta,EAAK,GAAkBA,EAAK,GASrC,aAAawa,EAAQ7J,GACnB,GAAIA,EAAM,CACR,IAAI8J,EAAM,EAAGC,EAAOnb,KAAK6a,WACrBM,EAAO,MACTD,EAAM3R,KAAKC,MAAMxJ,KAAK6a,WAAa,KACnCM,EAAO,GAETnb,KAAKyI,OAAOmG,SAASwC,EAAO,EAAqC8J,GACjElb,KAAKyI,OAAOmG,SAASwC,EAAO,EAAsC+J,GAEpE,OAAO,EAST,cAAcF,EAAQ7J,GACpB,GAAIA,EAAM,CAER,MAAM3Q,EAAOwa,GAAU,GAA+Bjb,KAAK+a,aAAe/a,KAAKgb,mBAC/Ehb,KAAKyI,OAAOmG,SAASwC,EAAO,EAAqC3Q,EAAK,IACtET,KAAKyI,OAAOmG,SAASwC,EAAO,EAAsC3Q,EAAK,IAEzE,OAAO,GCpDJ,MCAM2a,GAAkB,CAC7B,EACA,EACA,EACA,EACA,GACA,EACA,GACA,GACA,GACA,IACA,IACA,MACA,IACA,GACA,IACA,EACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,GClBF,SAASC,GAAO3d,GACd,MAAM4d,EAAKhS,OAAO5L,GAClB,OAAO4d,GAAMA,EAAM,EAA2B,GAAM,EAM/C,MAAM,GACX,YACE7S,EACAkJ,EACAU,EACAkJ,EACAC,EACAC,EACA7J,EACA8J,EACAC,EACAC,GAEA5b,KAAKyI,OAASA,EACdzI,KAAK6b,UAAYlK,EACjB3R,KAAKuS,iBAAmBF,EACxBrS,KAAK8b,kBAAoBP,EACzBvb,KAAKwb,UAAYA,EACjBxb,KAAK+b,WAAaN,EAClBzb,KAAKe,YAAc6Q,EACnB5R,KAAK8V,gBAAkB4F,EAMvB1b,KAAK2b,KAAOA,EAQZ3b,KAAK4b,YAAcA,EAQnB5b,KAAKgc,gBAAkB,IAAI7M,IAM3BnP,KAAKic,0BAA4B,GAYjCjc,KAAKkc,YAAc,IAAI/M,IAMvBnP,KAAKmc,iBAAmB,GAQxBnc,KAAKoc,YAAc,IAAIjN,IAOvBnP,KAAKqc,WAAa,IAAIlN,IACtBpR,OAAOoC,OAAOH,MAShB,SAASoR,GACP,MAAMf,EAAKgL,GAAOjK,GAChBnR,EAAQD,KAAKyI,OAAOmF,QAAQyC,EAAK,GACnC,OAAOhP,QAAQpB,EAAQ,GASzB,YAAYvC,EAAG4e,GACb,MAAMC,EAASvc,KAAK6b,UAAU3L,SAAS3G,KAAKqG,KAAK0M,EAAQ,IACzDtc,KAAKyI,OAAOmD,OAAO2Q,EAAQ7e,EAAG4e,GAC9B,MAAME,EAAanB,GAAOkB,GAM1B,OALKvc,KAAKkc,YAAYvL,IAAI6L,KACxBxc,KAAKmc,iBAAiB5a,KAAKib,GAC3Bxc,KAAKkc,YAAY3L,IAAIiM,IAEvBxc,KAAKoc,YAAY7L,IAAI8K,GAAO3d,IACrB6e,EAoBT,WAAW7e,EAAG+e,EAAYC,EAAMC,GAa9B,OAZKF,IAEHA,EAAa,GAAOG,SAASlf,IAC7Bgf,EAAOpT,OAAOtJ,KAAKyI,OAAOqF,QAAQ2O,KACvB,GAAK,IAGdE,EAAO3c,KAAKyI,OAAOoF,QACjB6O,EAAO,KAILC,GACN,KF1Ia,GE0IU,CAErB3c,KAAKyI,OAAOmG,SACV6N,EACAzc,KAAKe,YAAY8b,oBAGnB,MAAOC,EAAOC,GAAK/c,KAAKgd,WACtB1T,OACEtJ,KAAKyI,OAAOqF,QACV2O,EAAa,KAKnB,OAFAzc,KAAKyI,OAAOmG,SAAS6N,EAAYzc,KAAKe,YAAYkc,cAClDjd,KAAKyI,OAAOmG,SAAS6N,EAAa,EAAuCK,GAClE,CAACA,EFzJG,IE2Jb,KFhKwB,GEgKU,CAEhC9c,KAAKyI,OAAOmG,SACV6N,EACAzc,KAAKe,YAAY8b,oBAGnB,MAAOC,EAAOI,GAAYld,KAAKgd,WAC7B1T,OACEtJ,KAAKyI,OAAOqF,QACV2O,EAAa,MAInB,OAAQS,GACN,KFpMY,EEqMZ,KFlMgB,EEmMhB,KFhMkB,EEgMc,CAC9B,MAAMC,EAASnd,KAAKyI,OAAOoF,QACzB6O,EAAO,GAIHU,EAAWpd,KAAKyI,OAAOqF,QAC3B,GAAO8O,SAASE,IAAW,EAAIK,GAAW,IAO5C,OALAnd,KAAKyI,OAAOmG,SAAS6N,EAAa,EAAuCW,GAKlEpd,KAAKgd,WAAWtf,EAAG+e,EAAYC,EF1L/B,IE4LT,KFrNgB,EEsNhB,KFnNgB,EEmNc,CAC5B,MAAMU,EAAWpd,KAAKyI,OAAOqF,QAAQ,GAAO8O,SAASE,GAAS,GAK9D,OAJA9c,KAAKyI,OAAOmG,SACV6N,EAAa,EACbW,GAEKpd,KAAKgd,WAAWtf,EAAG+e,EAAYC,EFnM/B,IEqMT,QAME,OALA1c,KAAKyI,OAAOmG,SAAS6N,EAAYC,GACjC1c,KAAKyI,OAAOmG,SACV6N,EAAa,GACbK,GAEK,CAACpf,EAAGif,IAIjB,QACE,MAAO,CAACjf,EAAGif,IAcjB,gBAAgBjf,GACd,IAAK,GAAOyP,OAAOzP,GAAI,CAErB,KAAkB,EAAZ4L,OAAO5L,IACX,MAAM,IAAI0C,YAAYC,aAAa,mBAAmB3C,EAAE6P,SAAS,KAEnE,OADAvN,KAAKqc,WAAW9L,IAAIjH,OAAO5L,IACpBA,EAET,MAAMwP,EAAM,GAAOmQ,UAAU3f,GAC3B+e,EAAa,GAAOG,SAASlf,GAC/B,IAAIgf,EAAOpT,OAAOtJ,KAAKyI,OAAOqF,QAAQ2O,IAEtC,GAAIC,EAAO,EAGT,OAAO,GAAOY,UAAUZ,EAAMxP,GACzB,GAAIlN,KAAKgc,gBAAgBrL,IAAI8L,GAGlC,OAAO/e,EACF,IAAKsC,KAAKyI,OAAO8U,YAAYd,GAUlC,OAPAzc,KAAKgc,gBAAgBzL,IAAIkM,GAEzBzc,KAAKic,0BAA0B1a,KAAKkb,GAK7B/e,EACF,GAAIsC,KAAKwd,SAASf,GAQvB,OALAzc,KAAKgc,gBAAgBzL,IAAIkM,GAEzBzc,KAAKic,0BAA0B1a,KAAKkb,GAEpCzc,KAAKkc,YAAY3L,IAAI8K,GAAOoB,IACrB/e,EAIT,GAAIsC,KAAK+b,aAAe/b,KAAK+b,WAAWpL,IAAI+L,GAC1C,MAAM,IAAItc,YAAYC,aACpB,wBAAwBqc,EAAKnP,SAAS,KAE1C,IAAIgP,OAAS7T,EAETiU,EAAO3c,KAAKyI,OAAOoF,QACrB6O,EAAO,GAMT,OF3R0B,IEuRtBC,GFlRW,IEkR4BA,IAEzCA,EAAO3c,KAAKgd,WAAW1T,OAAO5L,GAAI+e,EAAYC,EAAMC,GAAM,IAEpDA,GACN,KF/SoB,EEgTpB,KFzSiB,GE0SjB,KF3SiB,EE4SjB,KFnToB,EEoTlBJ,EAASvc,KAAKyd,YAAYhB,EAAY,IACtC,MAEF,KFzSmB,GE0SnB,KFzSmB,GE0SjBF,EAASvc,KAAKyd,YAAYhB,EAAY,GAA+B,GACrE,MAEF,KF3SmB,GE4SnB,KF7SmB,GE8SnB,KF5SmB,GE6SjBF,EAASvc,KAAKyd,YACZhB,EACA,GAA+B,IAEjC,MAEF,KF3TiB,GE4TjB,KF7TiB,GE8TjB,KF5TiB,GE6TjB,KFrUoB,EEsUpB,KFvUoB,EEwUpB,KFtUoB,EEuUlBF,EAASvc,KAAKyd,YAAYhB,EAAY,IACtC,MAEF,KFjUe,GEiUU,CACvB,MAAMiB,EAAO1d,KAAKyI,OAAOoF,QACrB6O,EAAO,GAETiB,EAAW3d,KAAKyI,OAAOoF,QACrB6O,EAAO,EAA0C,GAErDH,EAASvc,KAAKyd,YACZhB,EACA,IAAiCiB,EAAOC,GAAa,IAEvD,MAEF,KFrVa,EEsVb,KF7VgB,EE8VhB,KFxVsB,EEyVtB,KFzToB,GE0TpB,KFzToB,GE0TpB,KFnTuB,GEoTvB,KFnTuB,GEoTvB,KFnTc,GEoTd,KFnTc,GEoTd,KFnTkB,GEoTlB,KFjUmB,GEiUU,CAC3B,MAAMD,EAAO1d,KAAKyI,OAAOoF,QACrB6O,EAAO,GAETiB,EAAW3d,KAAKyI,OAAOoF,QACrB6O,EAAO,EAA0C,GAErDH,EAASvc,KAAKyd,YAAYhB,EAAa,EAAIiB,EAAOC,GAAa,GAC/D,MAEF,KF3VwB,GE4VtBpB,EAASvc,KAAKyd,YAAYhB,EAAY,IACtC,MAEF,KF1Va,GEmWX,OARAF,EAASvc,KAAK4d,gBACZ5d,KAAKyI,OAAOqF,QACV2O,EAAa,IAKjBzc,KAAKyI,OAAOmG,SAAS6N,EAAY,GAAOa,UAAUf,EAAQ,IACnDA,EAET,KFvWa,GEuWU,CACrB,MAAMsB,EAAS7d,KAAKyI,OAAOoF,QACzB4O,EAAa,IAEfF,EAASvc,KAAKyd,YACZhB,EACA,IAA8BoB,GAAU,IAE1C,MAEF,KFlXY,GEkXU,CACpB,MAAMA,EAAS7d,KAAKyI,OAAOoF,QACzB4O,EAAa,GAEfF,EAASvc,KAAKyd,YACZhB,EACA,GAA6BoB,GAAU,IAEzC,MAEF,KF1XkB,GE0XU,CAC1B,MAAMhS,EAAOvC,OACXtJ,KAAKyI,OAAOqF,QAAQ2O,EAAa,IAEnCF,EAASvc,KAAKyd,YACZhB,EACA,GAAmC5Q,GAAQ,IAE7C,MAEF,KFpXmB,GEqXjB0Q,EAASvc,KAAKyd,YACZhB,EASI,EARJlT,KAAKqG,MACF,EACCtG,OACEtJ,KAAKyI,OAAOqF,QACV2O,EAAa,KAGjB,IAGN,MAEF,KFlY4B,GEmY5B,KFlY4B,GEmY5B,KFlYmC,GEmYnC,KFlYmC,GEmYjCF,EAASvc,KAAKyd,YACZhB,EACA,IACGnT,OACCtJ,KAAKyI,OAAOqF,QACV2O,EAAa,MAGf,IAEN,MAEF,KFlYkC,GEmYlC,KFlYkC,GEmYlC,KFlYyC,GEmYzC,KFlYyC,GEmYvCF,EAASvc,KAAKyd,YACZhB,EACA,IACGnT,OACCtJ,KAAKyI,OAAOqF,QACV2O,EAAa,MAGf,IAEN,MAEF,QACE,MAAM,IAAIrc,YAAYC,aAO1B,OAFAL,KAAKyI,OAAOmG,SAAS6N,EAAYF,EAAS,GAEnC,GAAOe,UAAUf,EAAQrP,GAGlC,kBAAkB/N,GAChBa,KAAKyI,OAAOmG,SAASzP,EAAGa,KAAK4d,gBAAgB5d,KAAKyI,OAAOqF,QAAQ3O,KAGnE,sBAAsB2e,EAASJ,GAC7B,IAAK,IAAIrgB,EAAI,EAAGA,EAAIqgB,IAAQrgB,EAAG2C,KAAK+d,kBAAkBD,GAAWzgB,GAAK,IAGxE,oBAAoBygB,EAASE,EAAQnS,GACnC,IAAK,IAAIxO,EAAI,EAAGA,EAAIwO,IAAQxO,EACU,EAA9BiM,OAAO0U,GAAUxV,OAAOnL,KAC5B2C,KAAK+d,kBAAkBD,GAAWzgB,GAAK,IAG7C,oBAAoBygB,EAASG,EAAcpS,GACzC,IAAK,IAAIqS,EAAI,EAAGA,EAAIrS,EAAMqS,GAAK,GAAI,CACjC,MAAMF,EAAShe,KAAKyI,OAAOqF,QACzBmQ,EAAe,IAA6CC,GAAK,IAEnE,IAAK,IAAI7gB,EAAI6gB,EAAG7gB,EAAI6gB,EAAI,IAAM7gB,EAAIwO,IAAQxO,EACA,EAAlCiM,OAAO0U,GAAUxV,OAAOnL,EAAI6gB,KAChCle,KAAK+d,kBAAkBD,GAAWzgB,GAAK,KAI/C,YAAYK,EAAGygB,EAAYL,EAASD,GAClC7d,KAAK+d,kBAAkBrgB,EAAIygB,GAC3B,MAAMC,EAAMpe,KAAKyI,OAAOqF,QAAQpQ,EAAIygB,GAClCE,EAAW/U,OAAOtJ,KAAKyI,OAAOqF,QAAQ,GAAO8O,SAASwB,KACxD,GAAIpe,KAAK+b,aAAe/b,KAAK+b,WAAWpL,IAAI0N,GAC1C,MAAM,IAAIje,YAAYC,aACpB,wBAAwBge,EAAS9Q,SAAS,KAE9C,OACEvN,KAAKyI,OAAOoF,QACVwQ,EACE,EACA,IAGJ,KChgBiB,EDigBfre,KAAKse,oBACHR,EACA9d,KAAKyI,OAAOqF,QACVuQ,EACE,EACA,IACC7V,OAAO,GACZqV,GAEF,MAEF,KC3gBqB,ED4gBnB7d,KAAKue,oBACHT,EACAxU,OACEtJ,KAAKyI,OAAOqF,QACVuQ,EACE,EACA,IAGNR,GAEF,MAEF,KCxhBiB,EDyhBf,MAAM,IAAIzd,YAAYC,aAExB,QACEL,KAAKse,oBACHR,EACAtV,OACE4S,GACEpb,KAAKyI,OAAOoF,QACVwQ,EACE,EACA,MAGH7V,OAAO,GACZqV,IAOR,mBAAmB1M,EAAIqN,GACrB,IAAI9gB,EAAIyT,EACR,OAAa,CACX,GAAIzT,EAAI8gB,EAAQ,MAAM,IAAIpe,YAAYC,aACtC,GAAI3C,GAAK8gB,EAAQ,MACjB,MAAM9B,EAAOpT,OAAOtJ,KAAKyI,OAAOqF,QAAQpQ,IACtCif,EAAO3c,KAAKyI,OAAOoF,QACjB6O,EAAO,GAET+B,EAAaze,KAAKyI,OAAOqF,QACvB4O,EAAO,GAEX,GAAI1c,KAAK+b,aAAe/b,KAAK+b,WAAWpL,IAAI+L,GAC1C,MAAM,IAAItc,YAAYC,aACpB,wBAAwBqc,EAAKnP,SAAS,KAM1C,OAJIvN,KAAKyI,OAAOoF,QAAQ6O,EAAO,KAC7B1c,KAAK4d,gBACH5d,KAAKyI,OAAOqF,QAAQ4O,EAAO,KAEvBC,GACN,KFviBiB,GEwiBjB,KFriBoB,GEsiBpB,KFriBmB,GEsiBnB,KFriBuB,GEsiBvB,KFriBkB,GEsiBlB,KFnhBwB,GEohBxB,KFnhByB,GEohBzB,KFnhBuB,GEmhBY,CACjC,MAAM9Q,EAA4B,GAArBvC,OAAOmV,GAClBT,EAASS,GAAcjW,OAAO,GAChCxI,KAAKse,oBAAoB5gB,EAAI,EAAGsgB,EAAQnS,GACxCnO,GAAM,EAAImO,GAAS,EACnB,MAEF,KFpjBe,GEojBY,CACzB,MAAMA,EAAOvC,OACXtJ,KAAKyI,OAAOqF,QACVxE,OAAOmV,GAAc,KAGzBze,KAAKue,oBAAoB7gB,EAAI,EAAG4L,OAAOmV,GAAa5S,GACpDnO,GAAM,EAAImO,GAAS,EACnB,MAKF,KFhkBe,GEgkBY,CACzB,MAAM6S,EAAShhB,EACTmO,EAAOvC,OACXtJ,KAAKyI,OAAOqF,QAAQ4Q,EAAS,KAM/B1e,KAAK+d,kBAAkBW,EAAS,IAIhC,MAAMC,EAHIrV,OACRtJ,KAAKyI,OAAOqF,QAAQ4Q,EAAS,KAEN,EACnBL,EAAW/U,OACftJ,KAAKyI,OAAOqF,QAAQ,GAAO8O,SAAS+B,KAGhCC,EAAW5e,KAAKyI,OAAOoF,QAC3BwQ,EACE,EACA,GAGEQ,EACJH,EAAS,GAEX,OAAQE,GACN,KC5nBW,ED6nBT5e,KAAKse,oBACH5gB,EAAI,GACJsC,KAAKyI,OAAOqF,QACVuQ,EACE,EACA,IACC7V,OAAO,GACZqD,GAEF,MAEF,KCvoBe,EDwoBb7L,KAAKue,oBACH7gB,EAAI,GACJ4L,OACEtJ,KAAKyI,OAAOqF,QACVuQ,EACE,EACA,IAGNxS,GAEF,MAEF,KCppBW,EDqpBT,MAAM,IAAIzL,YAAYC,aAExB,QAAS,CAEP,MAAMye,EAAmB,GACnBC,EAAoB,EACpBf,EAAS5C,GAAgBwD,GAGzBI,EAAcxW,OAAOwV,IAAWxV,OAAOuW,GACvCE,EAAcjB,EAASc,EAE7B9e,KAAKse,oBACHO,EACAG,EACAC,GAGF,OAGJvhB,GAAK,IAAiCmO,GAAQ,GAC9C,MAEF,QACE,MAAM,IAAIzL,YAAYC,eAQ9B,eACE,MAAM6e,EAAWlf,KAAKic,0BAChBkD,EAASnf,KAAKmc,iBAEpB,IAAIiD,OAAe1W,EAAW2W,OAAgB3W,EAU9C,OAAa,CAiBX,IAhBK0W,IAEHA,EAAeD,EAAOG,MAClBF,IAKFC,EAAgB/V,OACdtJ,KAAKyI,OAAOqF,QACVsR,EAAe,MAMhBA,GAAc,CASnB,GAAIC,GALiB/V,OACnBtJ,KAAKyI,OAAOqF,QACVsR,EAAe,IASjB,MAIFC,GAAiBrf,KAAKuf,gBAAgBF,GAExC,GAAIF,EAAOpO,OAAS,EAKlBqO,EAAeC,OAAgB3W,MALjC,CAOO,GAAuB,GAAnBwW,EAASnO,OAIlB,OAEF,KAAOmO,EAASnO,OAAS,GACvB/Q,KAAKuf,gBAAgBL,EAASI,SAapC,gBAAgB5hB,GACd,MAAMgf,EAAOpT,OAAOtJ,KAAKyI,OAAOqF,QAAQpQ,IACtCif,EAAO3c,KAAKyI,OAAOoF,QAAQ6O,EAAO,GACpC,GAAI1c,KAAK+b,aAAe/b,KAAK+b,WAAWpL,IAAI+L,GAC1C,MAAM,IAAItc,YAAYC,aACpB,wBAAwBqc,EAAKnP,SAAS,KAE1C,OAAQoP,GACN,KF7wBoB,EE+wBlB,OADA3c,KAAKwf,sBAAsB9hB,EAAI,EAAG,GAC3B,GAET,KFhxBoB,EEixBlB,OAAO,GAET,KFjxBoB,EEmxBlB,OADAsC,KAAKwf,sBAAsB9hB,EAAI,EAAG,GAC3B,GAET,KFtxBoB,EEwxBlB,OADAsC,KAAKwf,sBAAsB9hB,EAAI,EAAG,GAC3B,GAET,KFxxBoB,EEyxBlB,OAAO,GAET,KFzxBa,EE0xBb,KFzxBiB,EE0xBjB,KFzxBiB,GE0xBjB,KFzxBiB,GE0xBjB,KFzxBiB,GE0xBjB,KFzxBiB,GE0xBjB,KFzxBoB,GEyxBU,CACxBsC,KAAKyI,OAAOoF,QAAQ6O,EAAO,KAC7B1c,KAAK4d,gBACH5d,KAAKyI,OAAOqF,QACV4O,EACE,EACA,IAGR,MAAMgB,EAAO1d,KAAKyI,OAAOoF,QACvB6O,EAAO,GAETiB,EAAW3d,KAAKyI,OAAOoF,QACrB6O,EAAO,EAA0C,GAGnD,OADA1c,KAAKwf,sBAAsB9hB,EAAI,EAAGggB,GAC1B,EAAIA,EAAOC,GAAa,EAElC,KFxzBgB,EEyzBhB,KFnzBsB,EEozBtB,KFrxBmB,GEsxBnB,KF7wBuB,GE8wBvB,KF7wBuB,GE8wBvB,KF5wBc,GE6wBd,KF5wBkB,GE6wBlB,KFjwBwB,GEiwBU,CAChC,MAAMD,EAAO1d,KAAKyI,OAAOoF,QACrB6O,EAAO,GAETiB,EAAW3d,KAAKyI,OAAOoF,QACrB6O,EAAO,EAA0C,GAGrD,OADA1c,KAAKwf,sBAAsB9hB,EAAI,EAAGggB,GAC1B,EAAIA,EAAOC,GAAa,EAElC,KFrzBsB,GEszBtB,KF5zBe,GE6zBf,KF5zBmB,GE6zBnB,KF5zBmB,GE6zBnB,KF5zBmB,GE6zBnB,KF5zBmB,GE6zBnB,KF5zBmB,GE4zBU,CACvB3d,KAAKyI,OAAOoF,QAAQ6O,EAAO,KAC7B1c,KAAK4d,gBACH5d,KAAKyI,OAAOqF,QACV4O,EAAO,KAGb,MAAMgB,EAAO1d,KAAKyI,OAAOoF,QACvB6O,EAAO,GAETiB,EAAW3d,KAAKyI,OAAOoF,QACrB6O,EAAO,EAA0C,GAMnD,OAJA1c,KAAKwf,sBACH9hB,EAAI,GACJggB,GAEK,IAAiCA,EAAOC,GAAa,GAE9D,KF70BwB,GEq1BtB,OAPI3d,KAAKyI,OAAOoF,QAAQ6O,EAAO,KAC7B1c,KAAK4d,gBACH5d,KAAKyI,OAAOqF,QACV4O,EAAO,KAGb1c,KAAK+d,kBAAkBrgB,EAAI,IACpB,GAET,KFr1BY,GEq1BU,CACpB,MAAMmgB,EAAS7d,KAAKyI,OAAOoF,QACzBnQ,EAAI,GAQN,OANAsC,KAAKyf,YACH/hB,EACA,EACAA,EAAI,EACJmgB,GAEK,GAA6BA,GAAU,GAEhD,KFh2Ba,GEg2BU,CACrB,MAAMA,EAAS7d,KAAKyI,OAAOoF,QACzBnQ,EAAI,IAQN,OANAsC,KAAKyf,YACH/hB,EACA,GACAA,EAAI,GACJmgB,GAEK,IAA8BA,GAAU,GAEjD,KF32BkB,GE22BU,CAC1B,MAAMhS,EAAOvC,OACXtJ,KAAKyI,OAAOqF,QACVpQ,EAAI,IASR,OANAsC,KAAK+d,kBAAkBrgB,EAAI,GAC3BsC,KAAK0f,mBACHhiB,EAAI,EACJA,EACE,EAA0CmO,GAEvC,GAAmCA,GAAQ,GAEpD,KFv3BoB,GEy3BlB,YADA7L,KAAK+d,kBAAkBrgB,EAAI,GAG7B,KFh3BoB,GEi3BpB,KFh3BoB,GEo3BlB,OAHAsC,KAAK+d,kBAAkBrgB,EAAI,IAC3BsC,KAAK+d,kBAAkBrgB,EAAI,IAC3BsC,KAAK+d,kBAAkBrgB,EAAI,IACpB,GAAoC,EAE7C,KFp3BmB,GEq3BjB,OAOM,EANJ6L,KAAKqG,MACF,EACCtG,OACEtJ,KAAKyI,OAAOqF,QAAQpQ,EAAI,KAE1B,GAIR,KF93B4B,GE+3B5B,KF93B4B,GE+3B5B,KF93BmC,GE+3BnC,KF93BmC,GE83BU,CAC3C,MAAMggB,EAAOpU,OACXtJ,KAAKyI,OAAOqF,QAAQpQ,EAAI,KAM1B,OAJAsC,KAAKwf,sBACH9hB,EAAI,GACJggB,GAEK,IAAqCA,GAAQ,GAEtD,KFr4Bc,GE04BZ,OAJA1d,KAAK+d,kBAAkBrgB,EAAI,IAC3BsC,KAAK+d,kBAAkBrgB,EAAI,IAC3BsC,KAAK+d,kBAAkBrgB,EAAI,IAC3BsC,KAAK+d,kBAAkBrgB,EAAI,IACpB,GAAmC,EAE5C,KFz4Ba,GE24BX,YADAsC,KAAK+d,kBAAkBrgB,EAAI,IAG7B,KF54Be,GE44BU,CACvB,MACEiiB,EACE3f,KAAKyI,OAAOoF,QAAQnQ,EAAI,KAA4C,EACtEyT,EAAK7H,OAAOtJ,KAAKyI,OAAOqF,QAAQpQ,EAAI,KACpC8gB,EAAS9gB,EAAI,GAAqCiiB,EAEpD,OADA3f,KAAK0f,mBAAmBvO,EAAIqN,GACrB,GAAqCmB,EAE9C,KF/4BkC,GEg5BlC,KF/4BkC,GEg5BlC,KF/4ByC,GEg5BzC,KF/4ByC,GE+4BU,CACjD,MAAMjC,EAAOpU,OACXtJ,KAAKyI,OAAOqF,QAAQpQ,EAAI,KAM1B,OAJAsC,KAAKwf,sBACH9hB,EAAI,GACJggB,GAEK,IAAkDA,GAAQ,GAEnE,QACE,MAAM,IAAItd,YAAYC,cAQ5B,gBAME,MAAMuf,EACF5f,KAAKe,YAAYuT,eAAiB,EACpCuL,EAAWvW,OACTtJ,KAAKyI,OAAOqF,QAAQ8R,EAAW,KAGnC5f,KAAKyI,OAAOmG,SACVgR,EAAW,GACX,GAIF5f,KAAKyI,OAAOmG,SACVgR,EAAW,GACX5f,KAAK6b,UAAU5L,QAAQ4P,IAO3B,YACE,GAAI7f,KAAK2b,MAAQ3b,KAAK6b,UAAUiE,WAAa9f,KAAK4b,YAOhD,YADA5b,KAAK+f,gBAGP/f,KAAK8V,gBAAgBC,MAAM,GAK3B/V,KAAK6b,UAAUzM,gBAAgB,GAG/B,IAAK,MAAO2N,EAAG3I,KAAapU,KAAKwb,UAAUvI,KACzCmB,EAAShD,KAAOpR,KAAK4d,gBAAgBxJ,EAAShD,MAIhD,IAAK,MAAOD,EAAIzT,KAAMsC,KAAKuS,iBAAiBtB,IAAI1R,UACnC,EAAL4R,GAASnR,KAAKuS,iBAAiBtB,IAAIjE,IAAImE,EAAInR,KAAK4d,gBAAgBlgB,IAQxE,IAAIsiB,EAAkB,IAAIjT,IAC1B,IAAK,MAAOxB,EAAK0U,KAAWjgB,KAAK8b,kBAAkBjK,WAAWtS,UAAW,CACvE,MAAM2gB,EAAWlgB,KAAK4d,gBAAgBrS,GAChC4U,EAAcngB,KAAK4d,gBAAgBqC,GACzCD,EAAgBhT,IAAIkT,EAAUC,GAEhCngB,KAAK8b,kBAAkBjK,WAAamO,EAGpChgB,KAAKogB,eAGL,IAAK,MAAOrD,EAAG3I,KAAapU,KAAKwb,UAAUvI,KACzC,GAAImB,EAAST,IAAK,CAChB,MAAMO,EAAME,EAAShD,KACfwE,EAAWtM,OACftJ,KAAKyI,OAAOqF,QAAQoG,EAAM,KAEtB/C,EAAK7H,OACTtJ,KAAKyI,OAAOqF,QAAQ8H,EAAW,KAEjCxB,EAAST,IAAMrK,OAAOtJ,KAAKyI,OAAOqF,QAAQqD,EAAK,IAKnDnR,KAAK6b,UAAUwE,eAAergB,KAAKkc,YAAalc,KAAKoc,aAErDpc,KAAK6b,UAAUzM,gBAAgB,GAE/BpP,KAAK+f,gBAEL/f,KAAKuS,iBAAiB+N,eAAetgB,KAAKqc,YAE1Crc,KAAKgc,gBAAgBuE,QACrBvgB,KAAKkc,YAAYqE,QACjBvgB,KAAKoc,YAAYmE,QACjBvgB,KAAKqc,WAAWkE,QAChBvgB,KAAK8V,gBAAgBY,KAAK,IE1jCvB,MAAM,GACX,YAAYjO,EAAQkJ,EAAWxU,EAASse,EAAa7J,GACnD5R,KAAKyI,OAASA,EACdzI,KAAK6b,UAAYlK,EACjB3R,KAAK7C,QAAUA,EACf6C,KAAK+b,WAAaN,EAClBzb,KAAKe,YAAc6Q,EACnB5R,KAAKwgB,QAAU,IAAItG,YAAY,QAAS,CAAEC,OAAO,IACjDpc,OAAOoC,OAAOH,MAehB,qBAAqBygB,EAAKvM,EAAKwM,GAC7B,MAAMC,EAAgB3gB,KAAK6b,UAAU3L,SACnC3G,KAAKqG,KAAK,GAA+B,GAAK,GAEhD5P,KAAKyI,OAAOmG,SAAS+R,EAAe3gB,KAAKe,YAAY6f,gBACrD5gB,KAAKyI,OAAOmG,SACV+R,EAAgB,GAChBD,GAEF,MAAM9K,EAAWtM,OACftJ,KAAKyI,OAAOqF,QAAQoG,EAAM,KAE5B,IAAI/U,EAAImK,OACNtJ,KAAKyI,OAAOqF,QAAQ8H,EAAW,KAEjC,OAAa,CACX,MAAM8G,EAAOpT,OAAOtJ,KAAKyI,OAAOqF,QAAQ3O,IACtCwd,EAAO3c,KAAKyI,OAAOoF,QACjB6O,EAAO,GAET+B,EAAaze,KAAKyI,OAAOqF,QACvB4O,EAAO,GAEX,GAAI1c,KAAK+b,aAAe/b,KAAK+b,WAAWpL,IAAI+L,GAC1C,MAAM,IAAItc,YAAYC,aACpB,wBAAwBqc,EAAKnP,SAAS,KAE1C,OAAQoP,GACN,KJzBoB,GIyBY,CAC9B,MAAMkE,EAAKvX,OACTtJ,KAAKyI,OAAOqF,QAAQ3O,EAAI,KAE1Ba,KAAK7C,QAAQ2jB,YACX9gB,KAAKe,YAAYuT,eACjBJ,EACA2M,EACAF,GAGFxhB,GAAM,EADOmK,OAAOmV,EAAajW,OAAO,MACrB,EACnB,MAEF,KJtCmB,GIuCnB,KJrCkB,GIuChB,OADAxI,KAAKyI,OAAOmG,SAASgH,EAAW,GAAiCzW,GAC1Dwd,EAET,KJ/CiB,GIiDfxd,GAAM,EADOmK,OAAOmV,EAAajW,OAAO,MACrB,EACnB,MAEF,KJnDe,GIyDbrJ,GAAM,EALOmK,OACXtJ,KAAKyI,OAAOqF,QACVxE,OAAOmV,GAAc,MAGN,EACnB,MAEF,KJ3De,GI2DY,CACzB,MAAM5S,EAAOvC,OACXtJ,KAAKyI,OAAOqF,QAAQ3O,EAAI,KAE1BA,GAAK,IAAiC0M,GAAQ,GAC9C,MAEF,QACE,MAAM,IAAIzL,YAAYC,aACpB,iDAAiDsc,UAAaxd,EAAEoO,SAC9D,SAuCZ,KAAKnO,GACH,GAAIA,EAAG,CACL,MAAM2hB,EAAK/gB,KAAKyI,OAAOG,OAAOoC,SAAS,GAAOrB,MAAMvK,IAClD0L,EAAMiW,EAAG9V,QAAQ,GACjB+V,EAAKD,EAAG/V,SAAS,EAAGF,GACpB3M,EAAI6B,KAAKwgB,QAAQpG,OAAO4G,GAC1B,MAAM,IAAI5gB,YAAYC,aAAa,SAASlC,GAE5C,MAAM,IAAIiC,YAAYC,aAAa,SCpJlC,MAAM4gB,GACX,YAAYxY,EAAQsK,GAClB/S,KAAKyI,OAASA,EACdzI,KAAK+S,GAAKA,EACV/S,KAAKkhB,QAAU,IAAIzG,YACnB1c,OAAOoC,OAAOH,MAGhB,YAAYmhB,EAAKC,GACf,MAAMhiB,EAAOY,KAAKyI,OAAO4Y,QAAQD,GAAvB,KACVphB,KAAK+S,GAAGuO,UAAU,EAAGthB,KAAKkhB,QAAQK,OAAOniB,KCPtC,MAAM,GACX,YAAYqJ,GACVzI,KAAKyI,OAASA,EAcdzI,KAAKwhB,aAAe,IACpBxhB,KAAKyhB,aAAe,GACpBzhB,KAAK0hB,aAAe,KACpB1hB,KAAK2hB,aAAe,GAEpB3hB,KAAK4hB,WAAa5hB,KAAK0hB,YAAc1hB,KAAK2hB,aAAe,EAEzD3hB,KAAK6hB,SAAW,QAChB7hB,KAAK8hB,OAAS,WAEd9hB,KAAK+hB,WAAa/hB,KAAKwhB,YAAcxhB,KAAKyhB,aAAe,EACzDzhB,KAAKgiB,SAAW,QAChBhiB,KAAKiiB,OAAS,WAEdjiB,KAAKkiB,WAAa,QAClBliB,KAAKmiB,WAAa,SAElBniB,KAAKoiB,WAAa,QAClBpiB,KAAKqiB,WAAa,QAElBriB,KAAKsiB,SAAW,WAGhBtiB,KAAKkJ,OAAS,IAAIuO,YAAY,GAC9BzX,KAAKwX,KAAO,IAAInO,SAASrJ,KAAKkJ,QAE9BnL,OAAOoD,KAAKnB,MAId,oBAAoBsN,GAClB,OAAOvP,OAAOwkB,IAAI,EAAGjV,GAGvB,WAAWA,GACT,OAAOA,GAAKA,EAGd,YAAYA,GACV,OAAOA,GAAKA,EAGd,cAAcA,GACZ,OAAOkV,SAASlV,GAGlB,eAAeA,GACb,OAAOkV,SAASlV,GAIlB,gBAAgBA,GACd,OAAQkV,SAASlV,KAAOtN,KAAKyiB,WAAWnV,GAG1C,iBAAiBA,GACf,OAAQkV,SAASlV,KAAOtN,KAAK0iB,YAAYpV,GAM3C,sBAAsBqV,GAEpB,OADa,QACNA,EAKT,sBAAsBA,GAGpB,OAASA,EADI3iB,KAAK4iB,kBAAkBD,IACX,MAAS,GAFrB,IAKf,kBAAkBA,GAChB,OAAOA,IAAS,GAGlB,uBAAuBA,GAErB,OAAOA,GADOna,OAAO,IAAMA,OAAO,KAAOA,OAAO,GAIlD,uBAAuBma,GACrB,MAAMpa,EAAOC,OAAO,MAIpB,OADmBma,EAFN3iB,KAAK6iB,mBAAmBF,IAEFna,OAAO,MACpBA,OAAO,IAAOD,EAGtC,mBAAmBoa,GACjB,OAAOA,GAAQna,OAAO,IAIxB,qBAAqB8E,GACnB,MAAMqV,EAAO3iB,KAAK8iB,aAAaxV,GAEzByV,EAAW/iB,KAAKgjB,uBAAuBL,GACvCM,EAAWjjB,KAAKkjB,uBAAuBP,GAC7C,OAAOI,IAAava,OAAO,IAAMya,IAAaza,OAAO,GAGvD,oBAAoB8E,GAClB,MAAMqV,EAAO3iB,KAAKmjB,YAAY7V,GACxByV,EAAW/iB,KAAKojB,sBAAsBT,GACtCM,EAAWjjB,KAAKqjB,sBAAsBV,GAC5C,OAAoB,IAAbI,GAA+B,IAAbE,EAI3B,qBAAqB3V,GACnB,OAAOvP,OAAOwkB,IAAI,EAAGjV,GAGvB,YAAYlM,GAEV,OADApB,KAAKwX,KAAKrN,WAAW,EAAG/I,GACjBpB,KAAKwX,KAAK1N,UAAU,GAG7B,aAAanM,GAEX,OADAqC,KAAKwX,KAAKnN,WAAW,EAAG1M,GACjBqC,KAAKwX,KAAKxN,aAAa,GAIhC,aAAarM,GACXqC,KAAKwX,KAAKnN,WAAW,EAAG1M,GAGxB,MAAO,CAFKqC,KAAKwX,KAAK1N,UAAU,GACnB9J,KAAKwX,KAAK1N,UAAsB,IAI/C,YAAYwZ,GAEV,OADAtjB,KAAKwX,KAAKO,SAAS,EAAGuL,GACftjB,KAAKwX,KAAKtN,WAAW,GAG9B,aAAaoZ,GAEX,OADAtjB,KAAKwX,KAAK+L,YAAY,EAAGD,GAClBtjB,KAAKwX,KAAKpN,WAAW,GAG9B,kBAAkBoZ,EAAMC,EAAMriB,GAE5B,IAAIsiB,EAAKC,EAAK7W,EACV8W,EAAO5jB,KAAKmjB,YAAY/hB,GAE5B,GAA6B,IAAxBwiB,GAAQ5jB,KAAKiiB,QAChByB,EAAM,EACNC,EAAM,MACD,CAQL,GAPAA,GAAQC,IAAS,GAAM,KAAQ5jB,KAAK+hB,WAGpC/hB,KAAKwX,KAAKzN,UAAU,EAAG6Z,GACvB9W,EAAO9M,KAAKwX,KAAKqM,SAAS,GAE1BD,GAAQ5jB,KAAKgiB,SAAW,EACpB2B,GAAO3jB,KAAK+hB,WAEd6B,GAAQ5jB,KAAKgiB,cAIb,IAFA2B,GAAO,IAEEC,EAAO5jB,KAAKgiB,WACnB4B,IAAS,EACTD,GAAO,EAIXD,EAAME,EACF9W,EAAO,IACT4W,GAAOA,GAKX1jB,KAAKyI,OAAOmG,SAAS4U,EAAME,GAC3B1jB,KAAKyI,OAAOmG,SAAS6U,EAAME,GAM7B,sBAAsBG,GACpB,IAAIhX,EAAMiX,EAAMC,EAASC,EAAUC,EACnC,MAAMC,EAAOnkB,KAAKokB,aAAaN,GAC/B,IAAIO,EAAMF,EAAK,GACXP,EAAOO,EAAK,GACZR,EAAM,EAEV,GAAW,GAAPU,GAAqC,IAAxBT,GAAQ5jB,KAAK8hB,QAC5BkC,EAAU,EACVC,EAAW,EACXC,EAAW,EACXH,EAAO,MACF,CAQL,GAPAA,GAASH,IAAS,GAAM,MAAS5jB,KAAK4hB,WAGtC5hB,KAAKwX,KAAKzN,UAAU,EAAG6Z,GACvB9W,EAAO9M,KAAKwX,KAAKqM,SAAS,GAE1BD,GAAQ5jB,KAAK6hB,SAAW,EACpBkC,GAAQ/jB,KAAK4hB,WAEfgC,GAAQ5jB,KAAK6hB,cAIb,IAFAkC,MAESH,EAAO5jB,KAAK6hB,WACnB+B,IAAS,EACLS,EAAMrkB,KAAK8hB,QAAQ8B,IACvBS,IAAQ,EACRN,IAGJJ,EAAMI,EACNC,EAAUK,EACVJ,EAAWL,EACXM,EAAWpX,EAAO,GAAK,EAAI,EAG7B,MAAO,CAACoX,EAAUD,EAAUD,EAASL,GAGvC,oBAAoBW,EAAYC,EAAYC,EAAWC,EAAOX,GAC5D,MAAOI,EAAUD,EAAUD,EAASL,GAAO3jB,KAAK0kB,sBAAsBZ,GACtE9jB,KAAKyI,OAAOI,SAAS0a,YAAY,GAAO5Z,MAAM2a,GAAa9b,OAAO0b,IAAW,GAC7ElkB,KAAKyI,OAAOmG,SAAS2V,EAAYN,GACjCjkB,KAAKyI,OAAOmG,SAAS4V,EAAWR,GAChChkB,KAAKyI,OAAOmG,SAAS6V,EAAOd,GAI9B,oBAAoBhmB,GAClB,MAAMgnB,EAAM3kB,KAAK0kB,sBAAsB/mB,GACjCumB,EAAWS,EAAI,GACfV,EAAWU,EAAI,GACfX,EAAUW,EAAI,GACdhB,EAAMgB,EAAI,GAKhB,MAAO,CAFLnc,OAAO0b,IACN1b,OAAOyb,IAAazb,OAAO,IAAMA,OAAO,KAAOA,OAAOwb,IAC5CL,GAIf,UAAUviB,GACR,MAAMuhB,EAAO3iB,KAAKmjB,YAAY/hB,GAC9B,IAAIwjB,EAAOpc,OAAOxI,KAAKojB,sBAAsBT,IACzCkC,EAAOrc,OAAOxI,KAAKqjB,sBAAsBV,IACzCmC,EAAQtc,OAAOxI,KAAK4iB,kBAAkBD,IAG1C,MAAMoC,EAAmB,IAChB/kB,KAAKglB,YACV1b,OAAQwb,GAAStc,OAAO,IAAQoc,GAAQpc,OAAO,IAAOqc,IAK1D,GAAID,EAAO,IAET,OAAOxjB,EAET,GAAIwjB,EAAO,IAGT,OAAO,EAIT,MAAMK,EAAOzc,OAAO,IAAOA,OAAO,KAAOoc,EACnCrc,EAAOC,OAAO,GAAKyc,EAAOzc,OAAO,GACvC,IAAI0c,EAAOL,EAAOrc,OAAOxI,KAAKkiB,YAC1BiD,EAAOD,EAAO3c,EAGlB,OAFA2c,GAAQC,EAEJA,EAAOF,GAASE,GAAQF,GAAuC,IAA9BC,EAAQ1c,OAAO,GAAKyc,GAE3C,GAARC,EAEK,GAIPL,EAAOK,EAAO1c,OAAOxI,KAAKkiB,YACnB6C,MAITG,GAAQ1c,OAAO,GAAKyc,EAChBC,GAAQllB,KAAKmiB,YAEf0C,EAAOrc,OAAO,GACdoc,GAAQpc,OAAO,GACRuc,MAGPF,EAAOK,EAAO1c,OAAOxI,KAAKkiB,YACnB6C,MAKb,WAAWpnB,GAET,MAAMglB,EAAO3iB,KAAK8iB,aAAanlB,GAC/B,IAAIgmB,EAAM3jB,KAAKgjB,uBAAuBL,GAClCyC,EAAUplB,KAAKkjB,uBAAuBP,GAC1C3iB,KAAKwX,KAAKvN,aAAa,EAAGmb,GAA4B,GACtD,IAAIC,EAAQ7c,OAAOxI,KAAKwX,KAAK1N,UAAU,GAAsB,IACzDwb,EAAQ9c,OAAOxI,KAAKwX,KAAK1N,UAAU,GAAsB,IACzDgD,EAAO9M,KAAK6iB,mBAAmBF,GAGnC,MAAM4C,EAAoB,KACxBvlB,KAAKwX,KAAKO,SAAS,EAAGzO,OAAO+b,IAAQ,GACrCrlB,KAAKwX,KAAKO,SAAS,EAAGzO,OAAOgc,IAAQ,GACrC,MAAME,EAAWxlB,KAAKwX,KAAKxN,aAAa,GAAG,GAErC2Y,EAAQ7V,GAAQtE,OAAO,IAAQmb,GAAOnb,OAAO,IAAOgd,EAG1D,OAFUlc,OAAOtJ,KAAKylB,aAAa9C,KASrC,GAAIgB,EAAM,KAER,OAAOhmB,EAGT,GAAIgmB,EAAM,KAGR,OAAO,EAGT,GAAIA,EAAM,KAAM,CAGd,MAAMsB,EAAOzc,OAAO,IAAOA,OAAO,MAAQmb,EACpCpb,EAAOC,OAAO,GAAKyc,EAAOzc,OAAO,GACvC,IAAI0c,EAAOI,EAAQ9c,OAAOxI,KAAKoiB,YAC/B,MAAM+C,EAAOD,EAAO3c,EAGpB,OAFA2c,GAAQC,EAGNA,EAAOF,GACNE,GAAQF,GACA,GAATI,GACiC,IAA9BH,EAAQ1c,OAAO,GAAKyc,GAGX,GAARC,EAEK,GAGTI,EAAQJ,EAAO1c,OAAOxI,KAAKoiB,YAC3BiD,EAAQ7c,OAAO,GAIR+c,MAGPF,EAAQ7c,OAAO,GAEf0c,GAAQ1c,OAAO,GAAKyc,EAChBC,GAAQllB,KAAKqiB,YAEfiD,EAAQ9c,OAAO,GACfmb,GAAOnb,OAAO,GAEP+c,MAGTD,EAAQJ,EAAO1c,OAAOxI,KAAKoiB,YAEpBmD,MAEJ,CAEL,MAAMN,EAAOzc,OAAO,IAAOA,OAAO,MAAQmb,EACpCpb,EAAOC,OAAO,GAAKyc,EAAOzc,OAAO,GACvC,IAAI0c,EAAOG,EACPF,EAAOD,EAAO3c,EAGlB,OAFA2c,GAAQC,EAGNA,EAAOF,GACNE,GAAQF,GAGmB,IAFzBA,GAAQjlB,KAAKsiB,SACF,EAARgD,EACAJ,EAAQ,EAAID,IAGlBI,EAAQH,EACDK,MAIPL,GAAQ1c,OAAO,GAAKyc,EACpBI,EAAQH,EAIJA,GAAQ1c,OAAO,IAAMA,OAAO,MAAQ,GAGtC0c,EAAOI,EAAQ9c,OAAO,GAClB0c,GAAQllB,KAAKoiB,YAGfkD,EAAQ9c,OAAO,GAEfmb,GAAOnb,OAAO,GAEP+c,MAEPG,EAAEpC,KAAKqC,UAAYT,EACZK,MAGFA,OClcjB,MAAMK,GAASzjfjkfE,GAAO3c,WAAWycrRG,GAAU5c,WAAWycbI,GAAWC,WAAWL,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,MAAM,OAAO,KAAK,KAAK,KAAK,KAAK,IAAI,MAAM,OAAO,IAAI,MAAM,OAAO,KAAK,IAAI,MAAM,MAAM,OAAO,KAAK,IAAI,OAAO,IAAI,MAAM,OAAO,IAAI,KAAK,IAAI,IAAI,MAAM,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,EAAE,MAAM,KAAK,OAAO,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,OAAO,MAAM,EAAE,EAAE,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,KAAK,MAAM,GAAG,GAAG,GAAG,IAEhrBM,GAAWD,WAAWL,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,EAAE,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,EAAE,IAAI,EAAE,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,IAAI,IAAI,OAAO,IAAI,MAAM,GAAG,IAAI,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,GAAG,KAAK,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,GAAG,IAAI,KAAK,KAAK,KAAK,IAAI,EAAE,GAAG,MAAM,MAAM,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,OAAO,MAAM,MAAM,EAAE,GAAG,OAAO,OAAO,OAAO,OAAO,MAAM,GAAG,OAAO,MAAM,GAAG,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,KAAK,IAAI,OAAO,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,GAEvoBO,GAAWF,WAAWL,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,MAAM,OAAO,KAAK,KAAK,KAAK,KAAK,IAAI,MAAM,OAAO,IAAI,MAAM,OAAO,KAAK,IAAI,MAAM,MAAM,OAAO,KAAK,IAAI,OAAO,IAAI,MAAM,OAAO,IAAI,KAAK,IAAI,IAAI,MAAM,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,EAAE,MAAM,KAAK,OAAO,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,OAAO,MAAM,EAAE,EAAE,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,KAAK,MAAM,GAAG,GAAG,GAAG,IAclrB,SAASQ,GAAUC,EAAO5oB,GACxB,MAAM6oB,EAbR,SAASC,EAAU5nB,EAAK6nB,EAAOC,GAC7B,MAAMC,EAAaF,EAAQ,GAAKC,EAC1BE,MAAYH,EAAQC,GAAO,GACjC,OAAI9nB,EAAMgnB,GAAOgB,GACRD,GAAc,EAAIH,EAAU5nB,EAAK6nB,EAAOG,GACtChoB,GAAOknB,GAAMc,GACfA,EAEAD,GAAc,EAAIH,EAAU5nB,EAAKgoB,EAAOF,GAKrCF,CAAU9oB,EAAG,EAAGA,EAAI,GAChC,OAAe,GAAR6oB,EAAY,EAAID,EAAMP,GAAKQ,IAG7B,MAAMM,GACX,YAAYnlB,GACV3D,OAAOoD,KAAKnB,MAGd,SAAStC,GACP,OAAO2oB,GAAUL,GAAStoB,GAG5B,WAAWA,GACT,SAAW,GAAKsC,KAAK8mB,SAASppB,GAAM,GAGtC,WAAWA,GACT,SAAW,GAAKsC,KAAK8mB,SAASppB,GAAM,GAGtC,WAAWA,GACT,SAAW,GAAKsC,KAAK8mB,SAASppB,GAAM,SAGtC,WAAWA,GACT,SAAW,GAAKsC,KAAK8mB,SAASppB,GAAM,IAGtC,WAAWA,GACT,SAAW,GAAKsC,KAAK8mB,SAASppB,GAAM,KAGtC,WAAWA,GACT,SAAW,GAAKsC,KAAK8mB,SAASppB,GAAM,MAGtC,WAAWA,GACT,SAAW,GAAKsC,KAAK8mB,SAASppB,GAAM,SAGtC,WAAWA,GACT,SAAW,GAAKsC,KAAK8mB,SAASppB,GAAM,UAGtC,WAAWA,GACT,OAAOA,EAAI2oB,GAAUF,GAAUzoB,GAGjC,WAAWA,GACT,OAAOA,EAAI2oB,GAAUJ,GAAUvoB,GAGjC,WAAWA,GACT,OAAOA,EAAI2oB,GAAUD,GAAU1oB,IClFnC,SAASqpB,GAAUC,EAAK9Z,GACtB,MAAM+Z,EAAM,GACZ,KAAO/Z,GAAK,CACV,MAAM7P,GAAW,GAAN6P,GAAc,EACzB,IAAK8Z,EAAI3pB,GACP,MAAM,IAAI+C,YAAYC,aAAa,8BAA8B6M,GAEnE+Z,EAAI1lB,KAAKylB,EAAI3pB,IACb6P,KAAS,EAEX,OAAO+Z,EA2BF,MAAM,GACX,YACExe,EACAiT,EACA9J,EACA4J,EACAnJ,GAEArS,KAAK6V,QAAU9X,OAAOoC,OAAO,CAC3BsI,OAAQA,EACRqN,gBAAiB4F,EACjB3a,YAAa6Q,EACb4J,UAAWA,EACXjJ,iBAAkBF,EAClB6U,mBAAoB,IAAIna,IACxBoa,WAAY,GAAsBjnB,IAAI4L,GAvC5C,SAAqBuJ,EAAGvJ,GACtB,OAAQA,GACN,IAAK,QACH,OAAOlK,GAAKyT,EAAEc,YAAYd,EAAEQ,QAAQtD,iBAAiB6D,SAASxU,IAEhE,QAAS,CACP,MAAMR,EAAI,SAAS0K,EACnB,OAAOlK,GAAKyT,EAAEjU,GAAGQ,KAgC2BwlB,CAAYpnB,KAAM8L,IAC9Dub,YAAa,GAAsBnnB,IAAI4L,GA5B7C,SAAsBuJ,EAAGvJ,GACvB,OAAQA,GACN,IAAK,QACH,OAAO3M,GAAKkW,EAAEQ,QAAQtD,iBAAiBoE,SAAStB,EAAEiS,aAAanoB,IAEjE,QAAS,CACP,MAAMiC,EAAI,UAAU0K,EACpB,OAAO3M,GAAKkW,EAAEjU,GAAGjC,KAqB4BooB,CAAavnB,KAAM8L,MAIpE,WAAW3M,GACT,OAAOa,KAAK6V,QAAQ2F,UAAUgM,sBAC5B,uBACAroB,GAIJ,eAAeA,GACb,OAAOa,KAAK6V,QAAQ2F,UAAUgM,sBAAsB,iBAAkBroB,GAGxE,mBAAmBgS,EAAIsW,EAASC,EAASC,EAAIC,GAC3C,MAAMC,EAAed,GAAU/mB,KAAK6V,QAAQsR,WAAYM,GACtDK,EAAgBf,GAAU/mB,KAAK6V,QAAQwR,YAAaK,GACpDK,EAAW/nB,KAAK6V,QAAQ9U,YACtB4mB,EACI,0CACA,8CAENK,EAAYF,EAAc/W,OACtB5R,GAAKa,KAAKioB,WAAW9oB,GACrBA,GAAKa,KAAKkoB,eAAe/oB,GAC/B,GAAI2oB,EAAc/W,OAAS,EACzB,MAAM,IAAI3Q,YAAYC,aAAa,kCAErC,MAAM8nB,EAAKC,SAAUC,KACnB,IACE,GAAIA,EAAKtX,SAAW8W,EAAa9W,OAC/B,MAAM,IAAI3Q,YAAYC,aACpB,YAAYwnB,EAAa9W,yBAAyBsX,EAAKtX,UAG3D,IAAI5R,EAAIa,KAAK6V,QAAQtD,iBAAiBjB,eAAeH,GACrD,IAAK,IAAI9T,EAAI,EAAGA,EAAIgrB,EAAKtX,SAAU1T,EACjC8B,EAAIa,KAAKiW,UAAU9W,EAAG0oB,EAAaxqB,GAAGgrB,EAAKhrB,KAE7C8B,EAAIa,KAAKiW,UAAU8R,EAAU5oB,GAC7B,MAAMiU,QAAY4U,EAAU7oB,GAC5B,GAAI2oB,EAAc/W,OAChB,OAAO+W,EAAc,GAAG9nB,KAAK6V,QAAQ2F,UAAU8M,UAAUlV,IAE3D,QACAwU,MAIJ,OADA5nB,KAAK6V,QAAQqR,mBAAmBla,IAAImb,EAAIhX,GACjCgX,EAGT,oBAAoBI,GAClB,MAAMJ,EAAKnoB,KAAK6V,QAAQtD,iBAAiBoE,SAAS4R,GAClDvoB,KAAK6V,QAAQtD,iBAAiBhB,cAC5BvR,KAAK6V,QAAQqR,mBAAmBhpB,IAAIiqB,IAEtCnoB,KAAK6V,QAAQqR,mBAAmBtW,OAAOuX,GACvCnoB,KAAK6V,QAAQtD,iBAAiBb,UAAU6W,IC9G5C,MAAMC,GACJ,YAAYpnB,EAAGqnB,GACbzoB,KAAK0oB,MAAQtnB,EACbpB,KAAK2oB,eAAiBF,EACtBzoB,KAAK4oB,QAAU,GACf5oB,KAAKkJ,OAAS,GACdlJ,KAAKwgB,QAAU,IAAItG,YAAY,QAAS,CAAEC,OAAO,IACjDpc,OAAOoD,KAAKnB,MAGd,OACE,MAAM7B,EAAI6B,KAAK4oB,QAEf,OADA5oB,KAAK4oB,QAAU,GACRzqB,EAGT,MAAMmO,GACJ,MAAMuc,EACW,iBAARvc,EACHA,EACAtM,KAAKwgB,QAAQpG,OAAO9N,EAAK,CAAEwc,QAAQ,IACrC9oB,KAAK2oB,iBACP3oB,KAAK4oB,SAAWC,GAElB7oB,KAAKkJ,QAAU2f,EACf,MAAME,EAAO/oB,KAAKkJ,OAAO8f,MAAM,MAC/BhpB,KAAKkJ,OAAS6f,EAAKzJ,MACnB,IAAK,MAAM2J,KAAOF,EAChB/oB,KAAK0oB,MAAMO,GAEb,OAAO3c,EAAIyE,QAwEA,QAIb+J,KAAM,CAMJC,WAAY,KACV,MAAMmO,EAAKC,YAAYC,MACjBhqB,EAAImK,KAAKC,MAAM0f,EAAK,KAE1B,MAAO,CAAC9pB,EAD+B,IAA5BmK,KAAKC,MAAM0f,EAAS,IAAJ9pB,KAO7B4b,iBAAkB,KAChB,MAAMkO,EAAKxoB,KAAK0oB,MACVhqB,EAAImK,KAAKC,MAAM0f,EAAK,KAE1B,MAAO,CAAC9pB,EAD+B,IAA5BmK,KAAKC,MAAM0f,EAAS,IAAJ9pB,KAW7Byb,WAAY,KAEd9H,GAxGF,MACE,YAAY0V,GACVzoB,KAAKqpB,MAAQ,MACX3gB,EACA,IAAI8f,GAAOc,QAAQ9nB,IAAKinB,GACxB,IAAID,GAAOc,QAAQC,MAAOd,IAE5B1qB,OAAOoC,OAAOH,MAGhB,SAASwpB,GACP,OAAOxpB,KAAKqpB,MAAMG,GAAIC,OAGxB,UAAUD,EAAIld,GACZ,OAAOtM,KAAKqpB,MAAMG,GAAIE,MAAMpd,KA0F9Bqd,MAtFF,MACE,YAAYlhB,EAAQmhB,GAClB5pB,KAAKyI,OAASA,EACd1K,OAAOoD,KAAKnB,MAEd,YAAY6pB,EAAMC,GAChB9pB,KAAKyI,OAAOmG,SAASib,EAAM,GAE7B,YACE,MAAMzpB,YAAYC,aAAa,wCAEjC,YACE,MAAMD,YAAYC,aAAa,wCAEjC,OACE,MAAMD,YAAYC,aAAa,mCAEjC,QACE,MAAMD,YAAYC,aAAa,oCAEjC,YACE,MAAMD,YAAYC,aAAa,wCAEjC,OACE,MAAMD,YAAYC,aAAa,mCAEjC,QACE,MAAMD,YAAYC,aAAa,oCAEjC,UACE,MAAMD,YAAYC,aAAa,sCAEjC,UACE,MAAMD,YAAYC,aAAa,sCAEjC,WACE,MAAMD,YAAYC,aAAa,uCAEjC,SACE,MAAMD,YAAYC,aAAa,qCAEjC,SACE,MAAMD,YAAYC,aAAa,qCAEjC,SACE,MAAMD,YAAYC,aAAa,yCAkDlC,SAAU0pB,EAAQrhB,GAGjB,IAAIqhB,EAAOvV,aAAX,CAIA,IAIIwV,EA6HIC,EAZAC,EArBAC,EACAC,EAjGJC,EAAa,EACbC,EAAgB,GAChBC,GAAwB,EACxBC,EAAMT,EAAOU,SAoJbC,EAAW3sB,OAAO0B,gBAAkB1B,OAAO0B,eAAesqB,GAC9DW,EAAWA,GAAYA,EAASlV,WAAakV,EAAWX,EAGf,qBAArC,GAAGxc,SAAS/P,KAAKusB,EAAOY,SApFxBX,EAAoB,SAASY,GACzBD,QAAQE,UAAS,WAAcC,EAAaF,QAIpD,WAGI,GAAIb,EAAOgB,cAAgBhB,EAAOiB,cAAe,CAC7C,IAAIC,GAA4B,EAC5BC,EAAenB,EAAOoB,UAM1B,OALApB,EAAOoB,UAAY,WACfF,GAA4B,GAEhClB,EAAOgB,YAAY,GAAI,KACvBhB,EAAOoB,UAAYD,EACZD,GAwEJG,GAIArB,EAAOsB,iBA9CVnB,EAAU,IAAImB,gBACVC,MAAMH,UAAY,SAASvqB,GAE/BkqB,EADalqB,EAAM2qB,OAIvBvB,EAAoB,SAASY,GACzBV,EAAQsB,MAAMT,YAAYH,KA2CvBJ,GAAO,uBAAwBA,EAAIiB,cAAc,WAtCpDxB,EAAOO,EAAIkB,gBACf1B,EAAoB,SAASY,GAGzB,IAAIe,EAASnB,EAAIiB,cAAc,UAC/BE,EAAOC,mBAAqB,WACxBd,EAAaF,GACbe,EAAOC,mBAAqB,KAC5B3B,EAAK4B,YAAYF,GACjBA,EAAS,MAEb1B,EAAK6B,YAAYH,KAKrB3B,EAAoB,SAASY,GACzBpV,WAAWsV,EAAc,EAAGF,KAlD5BT,EAAgB,gBAAkB5gB,KAAKwiB,SAAW,IAClD3B,EAAkB,SAASxpB,GACvBA,EAAMorB,SAAWjC,GACK,iBAAfnpB,EAAM2qB,MACyB,IAAtC3qB,EAAM2qB,KAAKtgB,QAAQkf,IACnBW,GAAclqB,EAAM2qB,KAAKU,MAAM9B,EAAcpZ,UAIjDgZ,EAAOmC,iBACPnC,EAAOmC,iBAAiB,UAAW9B,GAAiB,GAEpDL,EAAOoC,YAAY,YAAa/B,GAGpCJ,EAAoB,SAASY,GACzBb,EAAOgB,YAAYZ,EAAgBS,EAAQ,OAgEnDF,EAASlW,aA1KT,SAAsB4X,GAEI,mBAAbA,IACTA,EAAW,IAAIC,SAAS,GAAKD,IAI/B,IADA,IAAI/D,EAAO,IAAIpZ,MAAMqd,UAAUvb,OAAS,GAC/B1T,EAAI,EAAGA,EAAIgrB,EAAKtX,OAAQ1T,IAC7BgrB,EAAKhrB,GAAKivB,UAAUjvB,EAAI,GAG5B,IAAIkvB,EAAO,CAAEH,SAAUA,EAAU/D,KAAMA,GAGvC,OAFAiC,EAAcD,GAAckC,EAC5BvC,EAAkBK,GACXA,KA6JTK,EAAS8B,eAAiBA,EA1J1B,SAASA,EAAe5B,UACbN,EAAcM,GAyBzB,SAASE,EAAaF,GAGlB,GAAIL,EAGA/U,WAAWsV,EAAc,EAAGF,OACzB,CACH,IAAI2B,EAAOjC,EAAcM,GACzB,GAAI2B,EAAM,CACNhC,GAAwB,EACxB,KAjCZ,SAAagC,GACT,IAAIH,EAAWG,EAAKH,SAChB/D,EAAOkE,EAAKlE,KAChB,OAAQA,EAAKtX,QACb,KAAK,EACDqb,IACA,MACJ,KAAK,EACDA,EAAS/D,EAAK,IACd,MACJ,KAAK,EACD+D,EAAS/D,EAAK,GAAIA,EAAK,IACvB,MACJ,KAAK,EACD+D,EAAS/D,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAChC,MACJ,QACI+D,EAASK,WAnDnB,EAmDoCpE,IAiBlBqE,CAAIH,GACN,QACEC,EAAe5B,GACfL,GAAwB,MAvE1C,CAyLkB,oBAAToC,KAAyC,oBAAX5C,YAAyB,EAAOA,OAAS4C,MC/UjE,QAACC,aAAcC,IAAkB,CAAEC,MAAO,CAACC,0DAA2DC,IAAMA,EAAKH,EAAiBlW,SAASqW,GAAWH,EAAiBzW,SAAS4W,EAAGC,MAAQD,EAAGC,MAAQ,GAAGD,IAAQE,uDAAwDF,IAAMA,EAAKH,EAAiBlW,SAASqW,GAAWH,EAAiBzW,SAAS4W,EAAG,KAAMG,uDAAuD,CAACH,EAAGI,KAAMJ,EAAKH,EAAiBlW,SAASqW,IAAe,IAAM9hB,OAAOmiB,cAAcD,GAAOE,uDAAuD,IAAYT,EAAiBzW,SAAS,CAAC,KAAOmX,uDAAwDP,IAAMA,EAAKH,EAAiBlW,SAASqW,GAAY,MAAS,MAAM7uB,EAAI6uB,EAAGQ,OAAQ,OAAOrvB,EAAEsvB,KAAO,EAAK,EAAItvB,EAAEG,MAAMub,YAAY,IAA5E,IAAyF6T,uDAAwDV,IAAMA,EAAKH,EAAiBlW,SAASqW,GAAWH,EAAiBzW,SAAS4W,EAAG5uB,OAAOuvB,cAAeC,oDAAqDZ,GAAcH,EAAiBnb,UAAUsb,MAAWa,cAAe,CAAC,CAAC,eAAe,iBAAmB,KAAmB,GAAmB,IAAQ9sB,YAAahD,OAAOoC,OAAO,CAAC,eAAiB,iBAAiB,kCAAoC,iBAAiB,kCAAoC,iBAAiB,iCAAmC,iBAAiB,kCAAoC,iBAAiB,mCAAqC,iBAAiB,wDAA0D,iBAAiB,kCAAoC,iBAAiB,2BAA6B,iBAAiB,mBAAqB,iBAAiB,KAAO,iBAAiB,cAAgB,iBAAiB,yBAA2B,iBAAiB,kCAAoC,iBAAiB,kCAAoC,iBAAiB,aAAe,iBAAiB,0BAA4B,iBAAiB,mBAAqB,iBAAiB,mBAAqB,iBAAiB,mBAAqB,iBAAiB,wCAA0C,iBAAiB,2CAA6C,iBAAiB,eAAiB,iBAAiB,mBAAqB,iBAAiB,qBAAuB,mBAAoBqS,WAAY,IAAIzF,IAAI,IAAK+gB,WAAY,KAAMnlB,cAAe,EAAGgT,MAAM,EAAOgN,gBAAgB,EAAO/M,YAAa,GAAMhB,qBAAsB,ICFv5E,OAA0B,wCCIzC,IAEImT,GAFa3tB,YAAY4tB,iBAAiBC,MAAM,KAE1B/Y,KAAKzX,GCkBxB2qB,eAAmC8F,GACxC,IAAIC,EAA8BD,EAAIE,gBAChCF,EAAIE,gBACJ,GACJC,EAA8B,IAAIvuB,EAAgB,CAAC,YAAa,OAChEwuB,EAAoB,IAAIztB,EAAgBqtB,EAAIntB,aAC5CwtB,EAAoB,IAAI9sB,EAAO6sB,EAAmBJ,EAAIntB,aACtDytB,EAA2B,KAC3BC,EAAwB,IAAIruB,YAAYsuB,MAAM,CAC5CC,QAAS,UACTC,QAASV,EAAIJ,aAEfe,EAAyB,IAAIzuB,YAAY0uB,OAAO,CAC9CF,QAASrlB,KAAKoB,IAAIujB,EAAIvlB,cAAgB,EAAGulB,EAAItS,cAAgB,EAA2B,SAE1FmT,EAAoB,IAAI,GACxBC,EAAyB,IAAI,GAC3BV,EACAJ,EAAIntB,YACJguB,GAEFE,EAAuB,IAAI,GACzBF,GAEFG,EAA+B,IAAIle,GACnCme,EAAgC,IAAI,GAClCJ,EACAE,EACAf,EAAIntB,aAENquB,EAA+B,IAAIhd,GAAiB2c,EAAmBG,EAA8BhB,EAAI1b,YACzG6c,EAAgB,IAAKnB,EAAItT,qBAAuB,GAAEsT,EAAIvF,gBACtD2G,EAAuB,IAAI,GACzBP,EACAb,EAAIntB,YACJmuB,EACAG,GAEFE,EAA6B,IAAIhY,GACjCiY,EAA8B,IAAI,GAAgB,MAClDC,EAAwB,IAAI,GAAUV,GACtCW,EAAwB,IAAI,GAAUX,EAAmBb,EAAItT,sBAC7D+U,EAAgB,IAAI,GAClBZ,EACAE,EACAC,EACAC,EACAG,EACApB,EAAInS,WACJmS,EAAIntB,YACJstB,EACAH,EAAIvS,KACJuS,EAAItS,aAENgU,EAAyB,IAAI,GAAWb,GACxCc,EAAsB,IAAI5O,GAAS8N,EAAmBM,GACtDS,EAAqB,IAAIjJ,GACzBkJ,EAAqB,IAAI,GACvBhB,EACAV,EACAH,EAAIntB,YACJuuB,EACAJ,GAEFc,EAA8B,IAAI,GAChCjB,EACAE,EACAc,EACA7B,EAAInS,WACJmS,EAAIntB,aAERuuB,EAAqBnyB,QAAU4yB,EAE/B,MAAME,QCjGD7H,kBDiGiC8H,GAMhCC,EAA4B,CAChCC,aAAc,CAACjxB,EAAG2L,EAAKvM,EAAI6K,aAAe2lB,EAAkBxiB,OAAOpN,EAAG2L,EAAKvM,GAC3E6X,SAAUxU,GAAKstB,EAA6B9Y,SAASxU,GACrD+U,SAAUtZ,GAAK6xB,EAA6BvY,SAAStZ,GACrDqU,UAAWrU,GAAK6xB,EAA6Bxd,UAAUrU,GACvD0V,GAAIsc,EACJgB,MAAO,CACLC,OAAQ,IAAMjB,EAAckB,SAAS,GACrCC,OAAQ,IAAMnB,EAAckB,SAAS,IAEvCE,iBAAmBC,GACjBpB,EAAqBmB,iBAAiBC,IAIpCC,EAAe5yB,OAAO6yB,OAC1B1C,EAAItB,aAAauD,GACjB,CACE5mB,KAAMA,KACNsnB,UAAW,CACTvK,MAAOmI,GAETqC,WAAY,CACVroB,OAAQomB,GAEVkC,IAAK,CACHC,SAAU1jB,GACR+hB,EAAc/N,UAAU,EA/BhC,SAA6BhU,GAC3B,MAAO,KAAKA,EAAEC,SAAS,IAAIqM,SAAS,EAAG,KA8BHqX,CAAoB3jB,GAAvB,MAC7B4jB,YAAa,SAAS5jB,EAAG0L,GACvB,GAAI1L,GAAK0L,EACP,MAAM,IAAI5Y,YAAYC,aAAa,gBAAgBiN,MAAM0L,MAG7DmY,MAAO7jB,GAAK+hB,EAAc/N,UAAU,EAAMhU,EAAH,OAEzCyF,GAAI,CACF0W,KAAM,CAACD,EAAIld,EAAK8kB,KACd,MAAMjyB,EAAI,GAAOwK,MAAM2C,GACvB,OAAO2jB,EAAwBld,GAAGwd,SAChC/G,EACAuF,EAAkBnmB,OAClBzJ,EACAiyB,EACA,OAGJ1H,MAAO,CAACF,EAAIld,EAAK8kB,KACf,MAAMjyB,EAAI,GAAOwK,MAAM2C,GACvB,OAAQkd,GAAM,EACV6F,EACAY,EAAwBld,IAC1BuO,UAAUkI,EAAIuF,EAAkBnmB,OAAOoC,SAAS7L,EAAGA,EAAIiyB,MAG7DzH,MAAOtqB,EAAS,IAAK6uB,EAAItT,qBAA0B,MAAEmU,EAAmB,IACxEsC,WAAYhyB,EAASmwB,GACrB8B,KAAMjyB,EAASowB,GACfhvB,KAAMpB,EAASqwB,GAEf6B,WAAYlyB,EAASuwB,GACrB4B,GAAInyB,EAASswB,GACb8B,gBAAiBpyB,EAAS2wB,GAC1B0B,UAAWryB,EAAS4vB,GACpB0C,QAAStyB,EAASkwB,GAClBT,OAAQzvB,EAAS0vB,GACjB6C,WAAYvyB,EAAS2vB,GACrB/N,SAAU5hB,EAASwwB,GACnBgC,UAAWxyB,EAAS6vB,GACpB4C,WAAYzyB,EAAS8vB,GACrB4C,UAAW1yB,EAAS+vB,GACpBvI,QAASxnB,EAASywB,GAClBkC,QAAS3yB,EAASkvB,GAClB0D,QAAS,CACPC,mBAAoB,CAAC/gB,EAAIsW,EAASC,EAASC,EAAIwK,KAC7C,IAAI5J,EAAK,GACLJ,EAAK4H,EAAmBmC,mBAC1B/gB,EACAsW,EACAC,EACAC,EACAwK,EACI,IAAMpC,EAAmBqC,oBAAoB7J,EAAG,IAChD,QAGN,OADAA,EAAG,GAAK2G,EAA6B9Y,SAAS+R,GACvCI,EAAG,IAEZ6J,oBAAqB7J,GAAMwH,EAAmBqC,oBAAoB7J,IAEpE8J,UAAWhzB,EAASiwB,KAIxB,OAAOlvB,YAAYkyB,YAAYpE,EAAI9wB,OAAQuzB,GAAczb,KAAK7X,IAC5DmxB,EAA2BnxB,EAC3B0xB,EAAkBwD,KAAK1D,EAAwBX,EAAIvlB,eACnDsmB,EAAqBsD,OACrB/C,EAA4B/mB,OAASsmB,EACrCO,EAAqBkD,MAAM7C,GAE3B,IAAK,MAAOvuB,EAAGjC,EAAGszB,EAAGt0B,EAAGd,KAAM6wB,EAAIL,cAChCkC,EACE3uB,GACE2uB,EAAmBmC,mBACrBhD,EAA6Bzc,aAAatT,GAC1CszB,EACAt0B,EACAd,EACA,QAOJ,OAHAU,OAAO6yB,OAAOb,EAAoBvB,EAAyBrxB,SAC3D4yB,EAAmB2C,UAEZ30B,OAAO6yB,OAAOT,EAA2B,CAC9ChzB,QAAS4yB,EACThvB,YAAamtB,EAAIntB,YACjBqtB,gBAAiBD,MDtNnB,CAAwBpwB,OAAO6yB,OAAO,GAAK,CAACxzB,OAAQK,MACpDk1B,MAAMtlB,GAAOic,QAAQC,MAAMlc,IAE/B8d,UAAY,SAAS9V,GACnB,IAAI,KAACkW,GAAQlW,GACT,MAACud,EAAK,QAAEC,EAAO,IAAE/nB,GAAOygB,EAC5BwC,GAAS7Y,KAAK7X,GACZA,EAAEF,QAAQ21B,aAAahoB,EAAK+nB,EAASD,IACrC1d,KAAKyP,IACLoG,YAAY,CACVgI,MAAM,EACNpO,UAEDgO,MAAMtlB,IACP0d,YAAY,CACVgI,MAAM,EACN1lB,IAAK,wFAEN6H,KAAK8d","file":"2452e8e355d1b2d9b7af.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export function modulify(obj) {\n  return Object.entries(\n    Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj))\n  ).reduce(\n    (acc, [k, descr]) =>\n      k === \"constructor\" || descr.get\n        ? acc\n        : ((acc[k] = obj[k].bind(obj)), acc),\n    {}\n  );\n}\n","export class ReentrancyGuard {\n  constructor(names) {\n    this.names = names;\n    this.flags = this.names.map(() => false);\n    Object.freeze(this);\n  }\n\n  enter(i) {\n    if (this.flags[i])\n      throw new WebAssembly.RuntimeError(\n        `ReentrancyGuard: ${this.names[i]} reentered!`\n      );\n    this.flags[i] = true;\n  }\n\n  exit(i) {\n    this.flags[i] = false;\n  }\n}\n","class Event {\n  constructor(lv, ev) {\n    this.time = new Date();\n    this.level = lv;\n    this.event = ev;\n    Object.freeze(this);\n  }\n}\n\nexport class EventLogManager {\n  constructor(syms) {\n    this.symbolTable = syms;\n    this.events = [];\n    this.enabled = true;\n    this.onEvent = () => {};\n    Object.seal(this);\n  }\n\n  isEnabled() {\n    return this.enabled;\n  }\n\n  setEnabled(f) {\n    this.enabled = Boolean(f);\n  }\n\n  log(lv, _ev) {\n    if (this.enabled) {\n      const ev = new Event(lv, _ev);\n      this.events.push(ev);\n      this.onEvent(ev);\n    }\n  }\n\n  logInfo(ev) {\n    this.log(\"INFO\", ev);\n  }\n\n  logError(ev) {\n    this.log(\"ERROR\", ev);\n  }\n\n  logEvent(ev) {\n    this.log(\"EVENT\", ev);\n  }\n}\n","export class Tracer {\n  constructor(logger, syms) {\n    this.logger = logger;\n    this.symbolLookupTable = {};\n    for (const [k, v] of Object.entries(syms)) this.symbolLookupTable[v] = k;\n    Object.freeze(this);\n  }\n\n  traceCmm(f) {\n    this.logger.logInfo([\"call\", f, this.symbolLookupTable[f]]);\n  }\n\n  traceCmmBlock(f, lbl) {\n    this.logger.logInfo([\"br\", f, this.symbolLookupTable[f], lbl]);\n  }\n\n  traceCmmSetLocal(f, i, v) {\n    this.logger.logInfo([\n      \"set_local\",\n      f,\n      this.symbolLookupTable[f],\n      i,\n      v,\n      this.symbolLookupTable[v]\n    ]);\n  }\n}\n","export const dataTag = 0x1ffff7;\nexport const functionTag = 0x1fffed;\nexport const mblock_size = 0x100000;\nexport const mblock_size_log2 = 0x14;\nexport const block_size = 0x1000;\nexport const blocks_per_mblock = 0xfc;\nexport const offset_timespec_tv_sec = 0x0;\nexport const offset_timespec_tv_nsec = 0x8;\nexport const sizeof_bdescr = 0x40;\nexport const offset_first_bdescr = 0x100;\nexport const offset_first_block = 0x4000;\nexport const sizeof_first_mblock = 0xfc000;\nexport const offset_bdescr_start = 0x0;\nexport const offset_bdescr_free = 0x8;\nexport const offset_bdescr_link = 0x10;\nexport const offset_bdescr_gen_no = 0x28;\nexport const offset_bdescr_node = 0x2c;\nexport const offset_bdescr_flags = 0x2e;\nexport const offset_bdescr_blocks = 0x30;\nexport const BF_PINNED = 0x4;\nexport const pageSize = 65536;\nexport const offset_Capability_r = 0x18;\nexport const sizeof_StgAP = 0x20;\nexport const offset_StgAP_arity = 0x10;\nexport const offset_StgAP_n_args = 0x14;\nexport const offset_StgAP_fun = 0x18;\nexport const offset_StgAP_payload = 0x20;\nexport const sizeof_StgAP_STACK = 0x20;\nexport const offset_StgAP_STACK_size = 0x10;\nexport const offset_StgAP_STACK_fun = 0x18;\nexport const offset_StgAP_STACK_payload = 0x20;\nexport const sizeof_StgArrBytes = 0x10;\nexport const offset_StgArrBytes_bytes = 0x8;\nexport const offset_StgFunInfoExtraFwd_fun_type = 0x0;\nexport const offset_StgFunInfoExtraFwd_srt = 0x8;\nexport const offset_StgFunInfoExtraFwd_b = 0x10;\nexport const offset_StgFunInfoTable_i = 0x0;\nexport const offset_StgFunInfoTable_f = 0x18;\nexport const sizeof_StgInd = 0x10;\nexport const offset_StgInd_indirectee = 0x8;\nexport const sizeof_StgIndStatic = 0x20;\nexport const offset_StgIndStatic_indirectee = 0x8;\nexport const offset_StgInfoTable_layout = 0x8;\nexport const offset_StgInfoTable_type = 0x10;\nexport const offset_StgInfoTable_srt = 0x14;\nexport const offset_StgLargeBitmap_size = 0x0;\nexport const offset_StgLargeBitmap_bitmap = 0x8;\nexport const sizeof_StgMutArrPtrs = 0x18;\nexport const offset_StgMutArrPtrs_ptrs = 0x8;\nexport const offset_StgMutArrPtrs_payload = 0x18;\nexport const offset_StgMVar_head = 0x8;\nexport const offset_StgMVar_tail = 0x10;\nexport const offset_StgMVar_value = 0x18;\nexport const sizeof_StgPAP = 0x18;\nexport const offset_StgPAP_arity = 0x8;\nexport const offset_StgPAP_n_args = 0xc;\nexport const offset_StgPAP_fun = 0x10;\nexport const offset_StgPAP_payload = 0x18;\nexport const offset_StgRegTable_rR1 = 0x0;\nexport const offset_StgRegTable_rF1 = 0x50;\nexport const offset_StgRegTable_rD1 = 0x68;\nexport const offset_StgRegTable_rCurrentNursery = 0x378;\nexport const offset_StgRegTable_rHpAlloc = 0x388;\nexport const offset_StgRegTable_rRet = 0x390;\nexport const sizeof_StgRetFun = 0x18;\nexport const offset_StgRetFun_size = 0x8;\nexport const offset_StgRetFun_fun = 0x10;\nexport const offset_StgRetFun_payload = 0x18;\nexport const offset_StgRetInfoTable_i = 0x0;\nexport const offset_StgRetInfoTable_srt = 0x18;\nexport const sizeof_StgSelector = 0x18;\nexport const offset_StgSelector_selectee = 0x10;\nexport const sizeof_StgSmallMutArrPtrs = 0x10;\nexport const offset_StgSmallMutArrPtrs_ptrs = 0x8;\nexport const offset_StgSmallMutArrPtrs_payload = 0x10;\nexport const sizeof_StgThunk = 0x10;\nexport const offset_StgThunk_payload = 0x10;\nexport const offset_StgThunkInfoTable_i = 0x0;\nexport const offset_StgThunkInfoTable_srt = 0x18;\nexport const offset_StgTSO_id = 0x30;\nexport const offset_StgTSO_stackobj = 0x18;\nexport const offset_StgTSO_what_next = 0x20;\nexport const offset_StgTSO_why_blocked = 0x22;\nexport const offset_StgTSO_block_info = 0x28;\nexport const offset_StgStack_stack_size = 0x8;\nexport const offset_StgStack_sp = 0x10;\nexport const offset_StgStack_stack = 0x18;\nexport const offset_StgUpdateFrame_updatee = 0x8;\nexport const offset_StgWeak_cfinalizers = 0x8;\nexport const offset_StgWeak_key = 0x10;\nexport const offset_StgWeak_value = 0x18;\nexport const offset_StgWeak_finalizer = 0x20;\nexport const offset_StgWeak_link = 0x28;\nexport const sizeof_StgStableName = 0x10;\nexport const offset_StgStableName_header = 0x0;\nexport const offset_StgStableName_sn = 0x8;\nexport const offset_stat_mtime = 0x58;\nexport const offset_stat_size = 0x30;\nexport const offset_stat_mode = 0x18;\nexport const offset_stat_dev = 0x0;\nexport const offset_stat_ino = 0x8;\nexport const clock_monotonic = 0x1;\nexport const clock_realtime = 0x0;\nexport const hsTyCons = [\"JSVal\",\"Bool\",\"Char\",\"Double\",\"Float\",\"Int\",\"Int8\",\"Int16\",\"Int32\",\"Int64\",\"Word\",\"Word8\",\"Word16\",\"Word32\",\"Word64\",\"StablePtr\",\"Ptr\",\"FunPtr\"];\n","import * as rtsConstants from \"./rts.constants.mjs\";\n\nfunction mask(n) {\n  return (BigInt(1) << BigInt(n)) - BigInt(1);\n}\n\n/**\n * Class acting as the low-level interface to Wasm memory.\n * It mainly provides methods to load/store data in memory\n * (e.g. {@link Memory#i64Load}, {@link Memory#i64Store}),\n * static methods to handle pointer tagging (e.g. {@link Memory#getTag},\n * {@link Memory#getDynTag}), and a MBlock allocator\n * ({@link Memory#getMBlocks} and {@link Memory#freeMBlocks}).\n */\nexport class Memory {\n  constructor() {\n    /**\n     * The underlying Wasm Memory instance.\n     * @name Memory#memory\n     */\n    this.memory = undefined;\n    /**\n     * The number of MBlock slots reserved for\n     * the static part of memory (vs the dynamic part\n     * where heap objects are allocated at runtime).\n     * The static MBlocks contain the initial compiled\n     * Wasm code plus auxiliary static data structures\n     * like info tables.\n     * @name Memory#staticMBlocks\n     */\n    this.staticMBlocks = undefined;\n    /**\n     * Low-level interfaces for reading/writing the contents\n     * of {@link Memory#memory}.\n     * @name Memory#i8view\n     * @name Memory#dataView\n     */\n    this.i8View = undefined;\n    this.dataView = undefined;\n    /**\n     * The current capacity of {@link Memory#memory} in MBlocks.\n     * By \"capacity\" we mean the real size of Wasm linear memory,\n     * whereas by \"size\" we indicate the range within the capacity\n     * that we really use at the moment.\n     * @name Memory#capacity\n     */\n    this.capacity = undefined;\n    /**\n     * A BigInt storing a bit for each MBlock slot\n     * in {@link Memory#memory}. The bit is either 0 or 1\n     * according to whether that MBlock slot is used or not.\n     * @name Memory#liveBitset\n     * @type BigInt\n     */\n    this.liveBitset = undefined;\n    Object.seal(this);\n  }\n\n  /**\n   * Initializes the {@link Memory} object.\n   */\n  init(memory, static_mblocks) {\n    this.memory = memory;\n    this.staticMBlocks = static_mblocks;\n    this.initView();\n    this.capacity = this.memory.buffer.byteLength / rtsConstants.mblock_size;\n    this.liveBitset = mask(this.staticMBlocks);\n  }\n\n  /**\n   * (Re)Initializes the low-level interfaces for {@link Memory#memory}.\n   */\n  initView() {\n    this.i8View = new Uint8Array(this.memory.buffer);\n    this.dataView = new DataView(this.memory.buffer);\n  }\n\n  static unTag(p) {\n    return Number(p) & 0xffffffff;\n  }\n\n  static getTag(p) {\n    //return Number(BigInt(p) >> BigInt(32));\n    return Math.floor(Number(p) / (2**32));\n  }\n\n  static tagData(p) {\n    return rtsConstants.dataTag * (2**32) + Number(p);\n  }\n\n  static tagFunction(p) {\n    return rtsConstants.functionTag * (2**32) + Number(p);\n  }\n\n  static unDynTag(p) {\n    const np = Number(p);\n    return np - (np & 7);\n  }\n\n  static getDynTag(p) {\n    return Number(p) & 7;\n  }\n\n  static setDynTag(p, t) {\n    const np = Number(p);\n    return np - (np & 7) + t;\n  }\n\n  /**\n   * Increases the size of {@link Memory#memory} the given\n   * number of pages.\n   * Recall: the size (in bytes) of a Wasm Memory page is stored\n   * in the {@link rtsConstants.pageSize} constant (=64KiB).\n   * @param n The number of Wasm pages to add\n   * @returns The previous number of pages\n   */\n  grow(n) {\n    this.memory.grow(n);\n    this.capacity = this.memory.buffer.byteLength / rtsConstants.mblock_size;\n    this.initView();\n  }\n\n  i8Load(p) {\n    return this.i8View[Memory.unTag(p)];\n  }\n\n  i8Store(p, v) {\n    this.i8View[Memory.unTag(p)] = Number(v);\n  }\n\n  i16Load(p) {\n    return this.dataView.getUint16(Memory.unTag(p), true);\n  }\n\n  i16Store(p, v) {\n    this.dataView.setUint16(Memory.unTag(p), Number(v), true);\n  }\n\n  i32Load(p) {\n    return this.dataView.getUint32(Memory.unTag(p), true);\n  }\n\n  i32Store(p, v) {\n    this.dataView.setUint32(Memory.unTag(p), Number(v), true);\n  }\n\n  i64Load(p) {\n    return this.dataView.getBigUint64(Memory.unTag(p), true);\n  }\n\n  i64Store(p, v) {\n    this.dataView.setBigUint64(Memory.unTag(p), BigInt(v), true);\n  }\n\n  f32Load(p) {\n    return this.dataView.getFloat32(Memory.unTag(p), true);\n  }\n\n  f32Store(p, v) {\n    this.dataView.setFloat32(Memory.unTag(p), Number(v), true);\n  }\n\n  f64Load(p) {\n    return this.dataView.getFloat64(Memory.unTag(p), true);\n  }\n\n  f64Store(p, v) {\n    this.dataView.setFloat64(Memory.unTag(p), Number(v), true);\n  }\n\n  i32LoadS8(p) {\n    return this.dataView.getInt8(Memory.unTag(p));\n  }\n\n  i32LoadU8(p) {\n    return this.dataView.getUint8(Memory.unTag(p));\n  }\n\n  i32LoadS16(p) {\n    return this.dataView.getInt16(Memory.unTag(p), true);\n  }\n\n  i32LoadU16(p) {\n    return this.dataView.getUint16(Memory.unTag(p), true);\n  }\n\n  i64LoadS8(p) {\n    return BigInt(this.dataView.getInt8(Memory.unTag(p)));\n  }\n\n  i64LoadU8(p) {\n    return BigInt(this.dataView.getUint8(Memory.unTag(p)));\n  }\n\n  i64LoadS16(p) {\n    return BigInt(this.dataView.getInt16(Memory.unTag(p), true));\n  }\n\n  i64LoadU16(p) {\n    return BigInt(this.dataView.getUint16(Memory.unTag(p), true));\n  }\n\n  /**\n   * Checks whether the object at address {@param p} is\n   * heap-allocated, i.e. whether it resides in the dynamic\n   * part of the memory. Used during garbage collection\n   * (in {@link GC#evacuateClosure}) to avoid evacuating\n   * objects in the static MBlocks.\n   */\n  heapAlloced(p) {\n    return (\n      Memory.unTag(p) >=\n      this.staticMBlocks << rtsConstants.mblock_size_log2\n    );\n  }\n\n  /**\n   * Obtains {@param n} MBlocks from {@link Memory#memory}.\n   * @returns The memory address at the beginning of the\n   *   requested free memory area.\n   */\n  getMBlocks(n) {\n    // First of all, check if there are free spots in the existing memory by\n    // inspecting this.liveBitset for enough adjacent 0's. In this way, we reuse\n    // previously freed MBlock slots and reduce fragmentation.\n    const m = mask(n);\n    for (let i = BigInt(0); i <= BigInt(this.capacity - n); ++i) {\n      const mi = m << i;\n      if (!(this.liveBitset & mi)) {\n        this.liveBitset |= mi;\n        return Memory.tagData(Number(i) * rtsConstants.mblock_size);\n      }\n    }\n    // No luck, we need to grow the Wasm linear memory\n    // (we actually - at least - double it, in order to reduce\n    // amortized overhead of allocating individual MBlocks)\n    let d = Math.max(n, this.capacity);\n    if (this.capacity + d >= 1024) d = n;\n    this.grow(d * (rtsConstants.mblock_size / rtsConstants.pageSize));\n\n    return this.getMBlocks(n);\n  }\n\n  /**\n   * Frees {@param n} MBlocks starting at address {@param p}.\n   */\n  freeMBlocks(p, n) {\n    const mblock_no =\n      BigInt(Memory.unTag(p)) >> BigInt(rtsConstants.mblock_size_log2);\n    this.liveBitset &= ~(mask(n) << mblock_no);\n  }\n\n  expose(p, len, t) {\n    return new t(this.memory.buffer, Memory.unTag(p), len);\n  }\n\n  strlen(_str) {\n    return this.i8View.subarray(Memory.unTag(_str)).indexOf(0);\n  }\n\n  strLoad(_str) {\n    let p = Memory.unTag(_str);\n    let s = \"\";\n    let i = 0;\n\n    while (1) {\n      let c = this.i8View[p + i];\n      if (c == 0) {\n        return s;\n      }\n      s += String.fromCharCode(c);\n      i++;\n    }\n  }\n\n  memchr(_ptr, val, num) {\n    const ptr = Memory.unTag(_ptr),\n      off = this.i8View.subarray(ptr, ptr + num).indexOf(val);\n    return off === -1 ? 0 : _ptr + off;\n  }\n\n  memcpy(_dst, _src, n) {\n    this.i8View.copyWithin(\n      Memory.unTag(_dst),\n      Memory.unTag(_src),\n      Memory.unTag(_src) + n\n    );\n  }\n\n  memmove(_dst, _src, n) {\n    return this.memcpy(_dst, _src, n);\n  }\n\n  memset(_dst, c, n, size = 1) {\n    // We only allow 1, 2, 4, 8. Any other size should get a runtime error.\n    const ty = {\n      1 : Uint8Array,\n      2 : Uint16Array,\n      4 : Uint32Array,\n      8 : BigUint64Array\n    };\n    const buf = this.expose(_dst, n, ty[size]);\n\n    if (size === 8) {\n      // TODO: The conversion BigInt(c) is lossy. Numbers are represented as\n      // IEEE754 double precision floating point numbers, for which the maximum\n      // (representable) safe integer in JavaScript is (Number.MAX_SAFE_INTEGER\n      // = 2^53 - 1).\n      buf.fill(BigInt(c));\n    } else {\n      buf.fill(c);\n    }\n  }\n\n  memsetFloat32(_dst, c, n) {\n    const buf = this.expose(_dst, n, Float32Array);\n    buf.fill(c);\n  }\n\n  memsetFloat64(_dst, c, n) {\n    const buf = this.expose(_dst, n, Float64Array);\n    buf.fill(c);\n  }\n\n  memcmp(_ptr1, _ptr2, n) {\n    for (let i = 0; i < n; ++i) {\n      const sgn = Math.sign(\n        this.i8View[Memory.unTag(_ptr1) + i] -\n          this.i8View[Memory.unTag(_ptr2) + i]\n      );\n      if (sgn) return sgn;\n    }\n    return 0;\n  }\n}\n","import * as rtsConstants from \"./rts.constants.mjs\";\nimport { Memory } from \"./rts.memory.mjs\";\n\nfunction showI64(x) {\n  return `0x${x.toString(16)}`;\n}\n\nexport class MemoryTrap {\n  constructor(logger, syms, memory) {\n    this.logger = logger;\n    this.symbolLookupTable = new Map();\n    for (const [k, v] of Object.entries(syms)) this.symbolLookupTable.set(v, k);\n    this.memory = memory;\n    Object.freeze(this);\n  }\n\n  trap(sym, p) {\n    const tag = Memory.getTag(p),\n      untagged = BigInt(Memory.unTag(p)),\n      mblock_no = untagged >> BigInt(rtsConstants.mblock_size_log2),\n      mblock_live = Boolean((this.memory.liveBitset >> mblock_no) & BigInt(1));\n    if (tag != rtsConstants.dataTag || !mblock_live) {\n      const err = new WebAssembly.RuntimeError(\n        `Invalid address ${showI64(p)} accessed in ${this.symbolLookupTable.get(\n          Number(sym)\n        )}`\n      );\n      this.logger.logError(err);\n      throw err;\n    }\n  }\n\n  loadI8(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i8Load(p);\n  }\n\n  loadI16(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i16Load(p);\n  }\n\n  loadI32(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i32Load(p);\n  }\n\n  loadI64(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i64Load(p);\n  }\n\n  loadI32S8(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i32LoadS8(p);\n  }\n\n  loadI32U8(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i32LoadU8(p);\n  }\n\n  loadI32S16(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i32LoadS16(p);\n  }\n\n  loadI32U16(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i32LoadU16(p);\n  }\n\n  loadI64S8(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i64LoadS8(p);\n  }\n\n  loadI64U8(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i64LoadU8(p);\n  }\n\n  loadI64S16(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i64LoadS16(p);\n  }\n\n  loadI64U16(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.i64LoadU16(p);\n  }\n\n  loadF32(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.f32Load(p);\n  }\n\n  loadF64(sym, bp, o) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    return this.memory.f64Load(p);\n  }\n\n  storeI8(sym, bp, o, v) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    this.memory.i8Store(p, v);\n  }\n\n  storeI16(sym, bp, o, v) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    this.memory.i16Store(p, v);\n  }\n\n  storeI32(sym, bp, o, v) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    this.memory.i32Store(p, v);\n  }\n\n  storeI64(sym, bp, o, v) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    this.memory.i64Store(p, v);\n  }\n\n  storeF32(sym, bp, o, v) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    this.memory.f32Store(p, v);\n  }\n\n  storeF64(sym, bp, o, v) {\n    const p = bp + BigInt(o);\n    this.trap(sym, p);\n    this.memory.f64Store(p, v);\n  }\n}\n","import * as rtsConstants from \"./rts.constants.mjs\";\n\n/**\n * Class implementing the allocation of nurseries,\n * and also individual heap objects.\n * In the asterius RTS - contrary to GHC - we don't\n * really distinguish between \"blocks\" and \"MBlocks\"\n * (\"megablocks\", \"em-blocks\"); here all blocks are\n * really MBlocks. MBlocks have a fixed size of 1MiB\n * and are allocated by {@link Memory}. Moreover,\n * MBlocks can be chained to form MegaGroups.\n * For more information on (mega)block allocation, see\n * {@link https://gitlab.haskell.org/ghc/ghc/wikis/commentary/rts/storage/block-alloc}.\n */\nexport class HeapAlloc {\n  constructor(memory) {\n    /**\n     * @type Memory\n     * @name HeapAlloc#memory\n     */\n    this.memory = memory;\n    /**\n     * An array with two entries:\n     * 1. The unpinned pool, i.e. the address of the\n     *    block descriptor for the MBlock where\n     *    unpinned objects are allocated,\n     * 2. The pinned pool, i.e. the address of the\n     *    block descriptor for the MBlock where\n     *    pinned objects are allocated.\n     * @name HeapAlloc#currentPools\n     */\n    this.currentPools = [undefined, undefined];\n    /**\n     * An array containing the addresses of\n     * the (block descriptors of the) MBlocks\n     * allocated for each generation.\n     * @name HeapAlloc#generations\n     */\n    this.generations = new Array(2); // 2 generations\n    /**\n     * The set of all currently allocated MegaGroups.\n     */\n    this.mgroups = new Set();\n    Object.freeze(this);\n  }\n\n  /**\n   * Initializes the pinned & unpinned pools.\n   */\n  init() {\n    this.setGenerationNo(0);\n    this.currentPools[1] = this.allocMegaGroup(1, true);\n  }\n  /**\n   * Sets the current generation number, so that new closures and \n   * MBlocks are allocated in the right space and with correct flag.\n   * @param {number} gen_no The generation number\n   * @param {boolean} [forceNewAlloc=true] Force the allocation\n   *   of a new MBlock. \n   */\n  setGenerationNo(gen_no, forceNewAlloc=true) {\n    let pool = this.generations[gen_no];\n    if (forceNewAlloc || !pool) {\n      pool = this.allocMegaGroup(1, false, gen_no);\n      this.generations[gen_no] = pool;\n    }\n    this.currentPools[0] = pool;\n  }\n\n  /**\n   * Allocates a new MegaGroup of enough MBlocks to\n   * accommodate the supplied amount of bytes.\n   * @param b The number of bytes to allocate\n   * @param pinned Whether the MBlocks should be pinned\n   * @param gen_no The generation number\n   * @returns The address of the block descriptor\n   *  of the first MBlock of the MegaGroup.\n   */\n  hpAlloc(b, pinned=false, gen_no=0) {\n    const mblocks =\n        b <= rtsConstants.sizeof_first_mblock\n          ? 1\n          : 1 +\n            Math.ceil(\n              (b - rtsConstants.sizeof_first_mblock) / rtsConstants.mblock_size\n            ),\n      bd = this.allocMegaGroup(mblocks, pinned, gen_no);\n    return bd;\n  }\n\n  /**\n   * Allocates enough blocks to accommodate the given number\n   * of words in the appropriate pool.\n   * @param n The number of (64 bit) words to allocate\n   * @param pinned Whether to allocate in the pinned pool\n   */\n  allocate(n, pinned = false) {\n    const b = n << 3; // The size in bytes\n    // Large objects are forced to be pinned as well\n    // (by large, we mean >= 4KiB):\n    pinned = pinned || b >= rtsConstants.block_size;\n    let pool = this.currentPools[Number(pinned)],\n      current_start = Number(\n        this.memory.i64Load(pool + rtsConstants.offset_bdescr_start)\n      ),\n      current_free = Number(\n        this.memory.i64Load(pool + rtsConstants.offset_bdescr_free)\n      );\n    const current_blocks = this.memory.i32Load(\n        pool + rtsConstants.offset_bdescr_blocks\n      ),\n      current_limit = current_start + rtsConstants.block_size * current_blocks,\n      new_free = current_free + b;\n\n    if (new_free <= current_limit) {\n      // if the pool has enough space\n      this.memory.i64Store(\n        pool + rtsConstants.offset_bdescr_free,\n        new_free\n      );\n    } else {\n      // not enough space in the corresponding pool,\n      // allocate a new one\n      if (pinned) {\n        pool = this.hpAlloc(b, true);\n        this.currentPools[1] = pool;\n      } else {\n        const gen_no = this.memory.i16Load(pool + rtsConstants.offset_bdescr_gen_no);\n        pool = this.hpAlloc(b, false, gen_no);\n        this.currentPools[0] = pool;\n        this.generations[gen_no] = pool;\n      }\n      current_free = Number(\n        this.memory.i64Load(\n          pool + rtsConstants.offset_bdescr_free\n        )\n      );\n      this.memory.i64Store(\n        pool + rtsConstants.offset_bdescr_free,\n        current_free + b\n      );\n    }\n    return current_free;\n  }\n\n  /**\n   * Allocates the given number of words in the pinned pool.\n   * @param n The number of (64 bit) words to allocate\n   */\n  allocatePinned(n) {\n    return this.allocate(n, true);\n  }\n\n  /**\n   * Allocates a new MegaGroup of size the supplied number of MBlocks.\n   * @param n The number of requested MBlocks\n   * @param pinned Whether the MBlocks should be pinned\n   * @param gen_no The generation number\n   * @return The address of the block descriptor\n   *  of the first MBlock of the MegaGroup\n   */\n  allocMegaGroup(n, pinned=false, gen_no=0) {\n    const req_blocks =\n        (rtsConstants.mblock_size * n - rtsConstants.offset_first_block) /\n        rtsConstants.block_size,\n      mblock = this.memory.getMBlocks(n),\n      bd = mblock + rtsConstants.offset_first_bdescr,\n      block_addr = mblock + rtsConstants.offset_first_block;\n    this.memory.i64Store(bd + rtsConstants.offset_bdescr_start, block_addr);\n    this.memory.i64Store(bd + rtsConstants.offset_bdescr_free, block_addr);\n    this.memory.i64Store(bd + rtsConstants.offset_bdescr_link, 0);\n    this.memory.i16Store(bd + rtsConstants.offset_bdescr_node, n);\n    this.memory.i32Store(bd + rtsConstants.offset_bdescr_blocks, req_blocks);\n    this.memory.i16Store(\n      bd + rtsConstants.offset_bdescr_flags,\n      pinned ? rtsConstants.BF_PINNED : 0\n    );\n    this.memory.i16Store(bd + rtsConstants.offset_bdescr_gen_no, gen_no);\n    this.mgroups.add(bd);\n    return bd;\n  }\n\n  /**\n   * Frees the garbage MBlocks by taking into account the\n   * information on live and dead MBlocks passed by the \n   * garbage collector. Used by {@link GC#performGC}.\n   * @param live_mblocks The set of current live MBlocks\n   * @param live_mblocks The set of current dead MBlocks\n   * @param major Whether this info comes from a minor or major GC\n   */\n  handleLiveness(live_mblocks, dead_mblocks, major=true) {\n    for (const bd of live_mblocks) {\n      if (!this.mgroups.has(bd)) {\n        throw new WebAssembly.RuntimeError(\n          `Invalid live mblock 0x${bd.toString(16)}`\n        );\n      }\n    }\n    // Free MBlocks that have been copied during GC\n    for (const bd of dead_mblocks) {\n      if (!this.mgroups.has(bd)) {\n        throw new WebAssembly.RuntimeError(\n          `Invalid dead mblock 0x${bd.toString(16)}`\n        );\n      }\n      this.mgroups.delete(bd);\n      const p = bd - rtsConstants.offset_first_bdescr,\n        n = this.memory.i16Load(bd + rtsConstants.offset_bdescr_node);\n      this.memory.freeMBlocks(p, n);\n    }\n\n    // Free unreachable MBlocks\n    for (const bd of Array.from(this.mgroups)) {\n      if (!live_mblocks.has(bd)) {\n        const\n          gen_no = this.memory.i16Load(bd + rtsConstants.offset_bdescr_gen_no),\n          pinned = Boolean(\n            this.memory.i16Load(bd + rtsConstants.offset_bdescr_flags) & rtsConstants.BF_PINNED\n          );\n        // Note: not all unreachable MBlocks can be \n        // freed during a minor collection. This is because\n        // pinned MBlocks or older MBlocks may look unreachable\n        // since only the pointers to younger generations\n        // are stored in the remembered set.\n        if(major || (!pinned && gen_no == 0)) {\n          this.mgroups.delete(bd);\n          const p = bd - rtsConstants.offset_first_bdescr,\n            n = this.memory.i16Load(bd + rtsConstants.offset_bdescr_node);\n          this.memory.freeMBlocks(p, n);\n        }\n      }\n    }\n    // Reallocate pinned pool if the current has been freed\n    if (!this.mgroups.has(this.currentPools[1])) {\n      this.currentPools[1] = this.allocMegaGroup(1, true);\n    }\n    // Reinitialize generations if necessary\n    for (let i=0; i < this.generations.length; i++)\n      if (!this.mgroups.has(this.generations[i])) {\n        this.generations[i] = undefined;\n      }\n  }\n\n  /**\n   * Estimates the size of living objects by counting the number\n   * of MBlocks that were allocated by {@link GC#getMBlocks} \n   * some time ago, but have not been yet been freed by {@link GC#freeMBlocks}.\n   * @returns The number of allocated MBlocks\n   */\n  liveSize() {\n    let acc = 0;\n    for (const bd of this.mgroups) {\n      acc += this.memory.i16Load(bd + rtsConstants.offset_bdescr_node);\n    }\n    return acc;\n  }\n}\n","export class StablePtrManager {\n  constructor() {\n    this.spt = new Map();\n    this.lasts = [0, 0];\n    Object.freeze(this);\n  }\n\n  newWithTag(v, tag) {\n    const sp = (++this.lasts[tag] << 1) | tag;\n    this.spt.set(sp, v);\n    return sp;\n  }\n\n  newStablePtr(addr) {\n    return this.newWithTag(addr, 0);\n  }\n\n  deRefStablePtr(sp) {\n    return this.spt.get(sp);\n  }\n\n  freeStablePtr(sp) {\n    this.spt.delete(sp);\n  }\n\n  newJSVal(v) {\n    return this.newWithTag(v, 1);\n  }\n\n  getJSVal(sp) {\n    return this.deRefStablePtr(sp);\n  }\n\n  freeJSVal(sp) {\n    this.freeStablePtr(sp);\n  }\n\n  hasStablePtr(sp) {\n    return this.spt.has(sp);\n  }\n\n  preserveJSVals(sps) {\n    for (const sp of Array.from(this.spt.keys()))\n      if (sp & 1 && !sps.has(sp)) this.freeJSVal(sp);\n  }\n}\n","import * as rtsConstants from \"./rts.constants.mjs\";\n\n// https://github.com/ghc/ghc/blob/bf73419518ca550e85188616f860961c7e2a336b/includes/rts/StableName.h\n// https://github.com/ghc/ghc/blob/43967c0c7d2d0110cfc5f9d64a7dab3a3dda8953/rts/StableName.c\nexport class StableNameManager {\n  constructor(memory, heapalloc, symbol_table) {\n    this.memory = memory;\n    this.heapalloc = heapalloc;\n    this.ptr2stable = new Map();\n    this.SymbolTable = symbol_table;\n    Object.seal(this);\n  }\n\n  makeStableName(ptr) {\n    const oldstable = this.ptr2stable.get(ptr);\n    if (oldstable !== undefined) return oldstable;\n\n    const tag = this.ptr2stable.size;\n\n    // https://github.com/ghc/ghc/blob/fe819dd637842fb564524a7cf80612a3673ce14c/includes/rts/storage/Closures.h#L197\n    let stableptr = this.heapalloc.allocatePinned(\n      rtsConstants.sizeof_StgStableName\n    );\n    this.memory.i64Store(stableptr, this.SymbolTable.stg_STABLE_NAME_info);\n    this.memory.i64Store(stableptr + rtsConstants.offset_StgStableName_sn, tag);\n\n    this.ptr2stable.set(ptr, stableptr);\n\n    return stableptr;\n  }\n}\n","const w0_mask = (BigInt(1) << BigInt(64)) - BigInt(1);\n\nexport class StaticPtrManager {\n  constructor(memory, stableptr_manager, spt_entries) {\n    this.memory = memory;\n    this.stablePtrManager = stableptr_manager;\n    this.sptEntries = spt_entries;\n    Object.freeze(this);\n    for (const [, c] of this.sptEntries) {\n      this.stablePtrManager.newStablePtr(c);\n    }\n  }\n\n  hs_spt_lookup(w0_lo, w0_hi, w1_lo, w1_hi) {\n    const r = this.sptEntries.get(\n      (BigInt(w1_hi) << BigInt(96)) |\n        (BigInt(w1_lo) << BigInt(64)) |\n        (BigInt(w0_hi) << BigInt(32)) |\n        BigInt(w0_lo)\n    );\n    return r ? r : 0;\n  }\n\n  hs_spt_key_count() {\n    return this.sptEntries.size;\n  }\n\n  hs_spt_keys(p, n) {\n    if (n !== this.hs_spt_key_count()) {\n      throw new WebAssembly.RuntimeError(\n        `hs_spt_keys required ${n} keys, but there are ${this.hs_spt_key_count()}`\n      );\n    }\n    for (const [k] of this.sptEntries) {\n      this.memory.i64Store(p, k & w0_mask);\n      this.memory.i64Store(p + 8, k >> BigInt(64));\n      p += 16;\n    }\n    return n;\n  }\n}\n","import * as rtsConstants from \"./rts.constants.mjs\";\n\n/**\n * Scheduler.\n *\n * TSO stands for Thread State Object.\n *\n * @property tsos     Contains info (tid, addr, status...) about all the TSOs.\n *\n */\nexport class Scheduler {\n  constructor(memory, symbol_table, stablePtrManager, fs) {\n    this.memory = memory;\n    this.symbolTable = symbol_table;\n    this.lastTid = 0;\n    this.tsos = new Map(); // all the TSOs\n    this.exports = undefined;\n    this.stablePtrManager = stablePtrManager;\n    this.fs = fs;\n    this.gc = undefined;\n    this.blockingPromise = undefined;\n    Object.seal(this);\n  }\n\n  setGC(gc) {\n    this.gc = gc;\n  }\n\n  /**\n   * Create a new TSO. Called by \"createThread\"\n   *\n   * @returns Number TSO ID.\n   */\n  newTSO() {\n    const tid = ++this.lastTid;\n    let promise_resolve, promise_reject;\n    const ret_promise = new Promise((resolve, reject) => {\n      promise_resolve = resolve;\n      promise_reject = reject;\n    });\n    this.tsos.set(\n      tid,\n      Object.seal({\n        addr: -1, // TSO struct address in Wasm memory\n        ret: 0, // returned object address in Wasm memory\n        retError: undefined,\n        rstat: -1, // thread status\n        ffiRet: undefined, // FFI returned value\n        ffiRetType: undefined, // FFI returned value type\n        ffiRetErr: undefined, // FFI returned error\n        returnPromise: ret_promise,\n        promise_resolve: promise_resolve, // Settle the promise used by user\n        promise_reject: promise_reject\n      })\n    );\n    return tid;\n  }\n\n  getTSOaddr(tid) {\n    return this.tsos.get(tid).addr;\n  }\n\n  getTSOret(tid) {\n    return this.tsos.get(tid).ret;\n  }\n\n  getTSOrstat(tid) {\n    return this.tsos.get(tid).rstat;\n  }\n\n  setTSOaddr(tid, addr) {\n    this.tsos.get(tid).addr = addr;\n  }\n\n  setTSOret(tid, ret) {\n    this.tsos.get(tid).ret = ret;\n  }\n\n  setTSOrstat(tid, rstat) {\n    this.tsos.get(tid).rstat = rstat;\n  }\n\n  getTSOid(tso) {\n    return this.memory.i32Load(tso + rtsConstants.offset_StgTSO_id);\n  }\n\n  /**\n   * Called from a generated safe FFI import call.\n   *\n   * @param ffiPromise Promise executing the FFI import code asynchronously.\n   */\n  returnFFIPromise(ffiPromise) {\n    this.blockingPromise = ffiPromise;\n  }\n\n  /**\n   * Called when a thread stops for some reason.\n   */\n  returnedFromTSO(tid) {\n    const tso_info = this.tsos.get(tid);\n    const tso = tso_info.addr;\n    const reason = Number(\n      this.memory.i64Load(\n        this.symbolTable.MainCapability +\n          rtsConstants.offset_Capability_r +\n          rtsConstants.offset_StgRegTable_rRet\n      )\n    );\n\n    switch (reason) {\n      case 1: {\n        // HeapOverflow\n\n        this.gc.performGC();\n\n        // put the thread back into the run-queue\n        // TODO: we should put it in front if it hasn't exceeded its time splice\n        setImmediate(() => this.tick(tid));\n        break;\n      }\n      case 2: {\n        // StackOverflow\n        const prev_stack = Number(\n            this.memory.i64Load(tso + rtsConstants.offset_StgTSO_stackobj)\n          ),\n          next_stack = this.exports.growStack(prev_stack);\n        this.memory.i64Store(\n          tso + rtsConstants.offset_StgTSO_stackobj,\n          next_stack\n        );\n        setImmediate(() => this.tick(tid));\n        break;\n      }\n      case 3: {\n        // ThreadYielding\n        // put the thread back into the run-queue\n        setImmediate(() => this.tick(tid));\n        break;\n      }\n      case 4: {\n        // ThreadBlocked\n\n        const why_blocked = Number(\n          this.memory.i16Load(tso + rtsConstants.offset_StgTSO_why_blocked)\n        );\n\n        switch (why_blocked) {\n          case Blocked.OnCCall:\n          case Blocked.OnCCall_Interruptible: {\n            //console.log(`Thread ${tid}: blocked on FFI`);\n            // Wait for the FFI blocking promise and then requeue the TSO\n            const blocking_promise = this.blockingPromise;\n            this.blockingPromise = undefined;\n            blocking_promise.then(\n              v => {\n                //console.log(`Thread ${tid}: unblocked`);\n                const [retTyp, retVal] = v;\n                tso_info.ffiRet = retVal;\n                tso_info.ffiRetType = retTyp;\n                setImmediate(() => this.tick(tid));\n              },\n              e => {\n                tso_info.ffiRetErr = e;\n                //console.log(`Thread ${tid}: blocking FFI Promise rejected with ${e.stack}`);\n                setImmediate(() => this.tick(tid));\n              }\n            );\n            break;\n          }\n\n          case Blocked.OnDelay: {\n            const us_delay = Number(\n              this.memory.i64Load(tso + rtsConstants.offset_StgTSO_block_info)\n            );\n            const blocking_promise = new Promise((resolve, reject) => {\n              setTimeout(() => resolve(), us_delay / 1000);\n            });\n            // Wait for the timer blocking promise and then requeue the TSO\n            blocking_promise.then(\n              () => {\n                setImmediate(() => this.tick(tid));\n              },\n              e => {\n                throw new WebAssembly.RuntimeError(\n                  `Scheduler: blocking TSO Promise rejected with ${e}`\n                );\n              }\n            );\n            break;\n          }\n\n          case Blocked.OnBlackHole:\n          case Blocked.OnMVar:\n          case Blocked.OnMVarRead: {\n            //console.log(`Thread ${tid}: blocked on MVar`);\n            break;\n          }\n\n          default: {\n            throw new WebAssembly.RuntimeError(\n              `Unhandled thread blocking reason: ${why_blocked}`\n            );\n          }\n        }\n\n        break;\n      }\n      case 5: {\n        // ThreadFinished\n        //console.log(`Thread ${tid}: Finished`);\n        const what_next = Number(\n          this.memory.i16Load(tso + rtsConstants.offset_StgTSO_what_next)\n        );\n        switch (what_next) {\n          case 1: {\n            // ThreadRunGHC\n            setImmediate(() => this.tick(tid));\n            break;\n          }\n          case 3: {\n            // ThreadKilled\n            tso_info.ret = 0;\n            tso_info.rstat = 2; // Killed (SchedulerStatus)\n            tso_info.promise_reject(tso_info.retError);\n            break;\n          }\n          case 4: {\n            // ThreadComplete\n            const stackobj = Number(\n              this.memory.i64Load(tso + rtsConstants.offset_StgTSO_stackobj)\n            );\n            const sp = Number(\n              this.memory.i64Load(stackobj + rtsConstants.offset_StgStack_sp)\n            );\n            tso_info.ret = Number(this.memory.i64Load(sp + 8));\n            tso_info.rstat = 1; // Success (SchedulerStatus)\n            tso_info.promise_resolve(tid); // rts_eval* functions assume a TID is returned\n            break;\n          }\n        }\n        break;\n      }\n      default: {\n        throw new WebAssembly.RuntimeError(\n          `returnFFIPromise: unsupported thread stopping reason ${reason}`\n        );\n      }\n    }\n  }\n\n  tick(tid) {\n    this.exports.context.reentrancyGuard.enter(0);\n    try {\n      const tso_info = this.tsos.get(tid);\n      const tso = tso_info.addr;\n\n      //console.log(`Thread ${tid}: active`);\n\n      // Returning from blocking FFI\n      if (tso_info.ffiRetErr) {\n        //console.log(`Thread ${tid}: FFI error`);\n\n        const stackobj = Number(\n            this.memory.i64Load(tso + rtsConstants.offset_StgTSO_stackobj)\n          ),\n          sp =\n            Number(\n              this.memory.i64Load(stackobj + rtsConstants.offset_StgStack_sp)\n            ) - 16,\n          exception_closure = this.exports.rts_apply(\n            this.symbolTable\n              .base_AsteriusziTypesziJSException_mkJSException_closure,\n            this.exports.rts_mkJSVal(\n              this.stablePtrManager.newJSVal(tso_info.ffiRetErr)\n            )\n          );\n        this.memory.i64Store(stackobj + rtsConstants.offset_StgStack_sp, sp);\n        this.memory.i64Store(sp, this.symbolTable.stg_raise_ret_info);\n        this.memory.i64Store(sp + 8, exception_closure);\n      } else if (typeof tso_info.ffiRetType === \"number\") {\n        switch (\n          tso_info.ffiRetType // tag is encoded with `ffiValueTypesTag`\n        ) {\n          case 0: {\n            // no returned value\n            break;\n          }\n          case 1: {\n            // JSVal\n            const ptr = this.stablePtrManager.newJSVal(tso_info.ffiRet);\n            //console.log(`Restore after FFI with value: ${tso_info.ffiRet} with type ${typeof tso_info.ffiRet} constructor ${tso_info.ffiRet.constructor} as ${ptr}`);\n            this.memory.i64Store(\n              this.symbolTable.MainCapability +\n                rtsConstants.offset_Capability_r +\n                rtsConstants.offset_StgRegTable_rR1,\n              ptr\n            );\n            break;\n          }\n          case 2: {\n            // I64\n            this.memory.i64Store(\n              this.symbolTable.MainCapability +\n                rtsConstants.offset_Capability_r +\n                rtsConstants.offset_StgRegTable_rR1,\n              tso_info.ffiRet\n            );\n            break;\n          }\n          case 3: {\n            // F32\n            this.memory.f32Store(\n              this.symbolTable.MainCapability +\n                rtsConstants.offset_Capability_r +\n                rtsConstants.offset_StgRegTable_rF1,\n              tso_info.ffiRet\n            );\n            break;\n          }\n          case 4: {\n            // F64\n            this.memory.f64Store(\n              this.symbolTable.MainCapability +\n                rtsConstants.offset_Capability_r +\n                rtsConstants.offset_StgRegTable_rD1,\n              tso_info.ffiRet\n            );\n            break;\n          }\n          default:\n            // FIXME: add support for multiple return values: the tag already\n            // supports it and we get a list of values in tso_info.ffiRet\n            throw new WebAssembly.RuntimeError(\n              `Unsupported FFI return value type tag ${tso_info.ffiRetType} (more than one value?): ${tso_info.ffiRet}`\n            );\n        }\n      }\n\n      tso_info.ffiRet = undefined;\n      tso_info.ffiRetType = undefined;\n      tso_info.ffiRetErr = undefined;\n\n      // execute the TSO.\n      let sync_err = false;\n      try {\n        this.exports.scheduleTSO(tso);\n      } catch (err) {\n        sync_err = true;\n        this.exports.stg_returnToSchedNotPaused();\n        tso_info.ffiRetErr = err;\n        setImmediate(() => this.tick(tid));\n      }\n      if (!sync_err) {\n        this.returnedFromTSO(tid);\n      }\n    } finally {\n      this.exports.context.reentrancyGuard.exit(0);\n    }\n  }\n\n  tsoReportException(tso, v) {\n    const err = this.stablePtrManager.getJSVal(v);\n    this.stablePtrManager.freeJSVal(v);\n    const tid = this.getTSOid(tso);\n    this.tsos.get(tid).retError = err;\n  }\n\n  /**\n   * Enqueue the TSO in the run-queue and wake-up the scheduler.\n   */\n  enqueueTSO(tso) {\n    const tid = this.getTSOid(tso);\n\n    // When the TSO has just been created, we need to store its address\n    const tso_info = this.tsos.get(tid);\n    if (tso_info.addr == -1) {\n      tso_info.addr = Number(tso);\n    }\n\n    // Ensure that we wake up the scheduler at least once to execute this thread\n    setImmediate(() => this.tick(tid));\n  }\n\n  /**\n   * Submit a thread creation command.\n   *\n   * @param createThread The name of an exported function with prototype:\n   *                     TSO * createThread(closure*). E.g. \"createIOThread\".\n   * @param closure      The closure to evaluate in the thread.\n   */\n  submitCmdCreateThread(createThread, closure) {\n    const tso = this.exports[createThread](closure),\n      tid = this.getTSOid(tso),\n      tso_info = this.tsos.get(tid);\n    this.enqueueTSO(tso);\n    return tso_info.returnPromise;\n  }\n}\n\n/**\n * Blocked enum type (see rts/Constants.h)\n */\nconst Blocked = {\n  NotBlocked: 0,\n  OnMVar: 1,\n  OnMVarRead: 14,\n  OnBlackHole: 2,\n  OnRead: 3,\n  OnWrite: 4,\n  OnDelay: 5,\n  OnSTM: 6,\n  OnDoProc: 7,\n  OnCCall: 10,\n  OnCCall_Interruptible: 11,\n  OnMsgThrowTo: 12,\n  ThreadMigrating: 13\n};\n","export class IntegerManager {\n  constructor() {\n    // buffer of 8 bytes to hold floats/doubles\n    this.view = new DataView(new ArrayBuffer(8));\n\n    Object.freeze(this);\n  }\n\n  mul2(hi_hi, hi_lo, lo_hi, lo_lo, ipiece) {\n    this.view.setInt32(/*offset=*/ 0, hi_lo, /*littleEndian=*/ true);\n    this.view.setInt32(/*offset=*/ 4, hi_hi, /*littleEndian=*/ true);\n    const hi = this.view.getBigUint64(/*offset=*/ 0, /*littleEndian=*/ true);\n\n    this.view.setInt32(/*offset=*/ 0, lo_lo, /*littleEndian=*/ true);\n    this.view.setInt32(/*offset=*/ 4, lo_hi, /*littleEndian=*/ true);\n    const lo = this.view.getBigUint64(/*offset=*/ 0, /*littleEndian=*/ true);\n\n    const mul = hi * lo;\n    // find the correct value that is masked\n    const val = Number(\n      (mul >> BigInt(32 * ipiece)) & ((BigInt(1) << BigInt(32)) - BigInt(1))\n    );\n\n    return Number(val);\n  }\n\n  quotrem2_quotient(\n    lhs_hi_hi,\n    lhs_hi_lo,\n    lhs_lo_hi,\n    lhs_lo_lo,\n    rhs_hi,\n    rhs_lo,\n    ipiece\n  ) {\n    this.view.setInt32(/*offset=*/ 0, lhs_hi_lo, /*littleEndian=*/ true);\n    this.view.setInt32(/*offset=*/ 4, lhs_hi_hi, /*littleEndian=*/ true);\n    const lhs_hi = this.view.getBigUint64(\n      /*offset=*/ 0,\n      /*littleEndian=*/ true\n    );\n\n    this.view.setInt32(/*offset=*/ 0, lhs_lo_lo, /*littleEndian=*/ true);\n    this.view.setInt32(/*offset=*/ 4, lhs_lo_hi, /*littleEndian=*/ true);\n    const lhs_lo = this.view.getBigUint64(\n      /*offset=*/ 0,\n      /*littleEndian=*/ true\n    );\n    const lhs = (lhs_hi << BigInt(64)) | lhs_lo;\n\n    this.view.setInt32(/*offset=*/ 0, rhs_lo, /*littleEndian=*/ true);\n    this.view.setInt32(/*offset=*/ 4, rhs_hi, /*littleEndian=*/ true);\n    const rhs = this.view.getBigUint64(/*offset=*/ 0, /*littleEndian=*/ true);\n\n    const quot = lhs / rhs;\n    // find the correct value that is masked\n    const val = Number(\n      (quot >> BigInt(32 * ipiece)) & ((BigInt(1) << BigInt(32)) - BigInt(1))\n    );\n\n    return Number(val);\n  }\n\n  quotrem2_remainder(\n    lhs_hi_hi,\n    lhs_hi_lo,\n    lhs_lo_hi,\n    lhs_lo_lo,\n    rhs_hi,\n    rhs_lo,\n    ipiece\n  ) {\n    this.view.setInt32(/*offset=*/ 0, lhs_hi_lo, /*littleEndian=*/ true);\n    this.view.setInt32(/*offset=*/ 4, lhs_hi_hi, /*littleEndian=*/ true);\n    const lhs_hi = this.view.getBigUint64(\n      /*offset=*/ 0,\n      /*littleEndian=*/ true\n    );\n\n    this.view.setInt32(/*offset=*/ 0, lhs_lo_lo, /*littleEndian=*/ true);\n    this.view.setInt32(/*offset=*/ 4, lhs_lo_hi, /*littleEndian=*/ true);\n    const lhs_lo = this.view.getBigUint64(\n      /*offset=*/ 0,\n      /*littleEndian=*/ true\n    );\n    const lhs = (lhs_hi << BigInt(64)) | lhs_lo;\n\n    this.view.setInt32(/*offset=*/ 0, rhs_lo, /*littleEndian=*/ true);\n    this.view.setInt32(/*offset=*/ 4, rhs_hi, /*littleEndian=*/ true);\n    const rhs = this.view.getBigUint64(/*offset=*/ 0, /*littleEndian=*/ true);\n\n    const rem = lhs % rhs;\n    // find the correct value that is masked\n    const val = Number(\n      (rem >> BigInt(32 * ipiece)) & ((BigInt(1) << BigInt(32)) - BigInt(1))\n    );\n\n    return Number(val);\n  }\n}\n","import { Memory } from \"./rts.memory.mjs\";\n\nexport class ByteStringCBits {\n  constructor(memory) {\n    this.memory = memory;\n    Object.seal(this);\n  }\n\n  fps_reverse(_q, _p, n) {\n    const q = Memory.unTag(_q),\n      p = Memory.unTag(_p);\n    this.memory.i8View.copyWithin(q, p, p + n);\n    this.memory.i8View.subarray(q, q + n).reverse();\n  }\n\n  fps_intersperse(_q, _p, n, c) {\n    let q = Memory.unTag(_q),\n      p = Memory.unTag(_p);\n    while (n > 1) {\n      this.memory.i8View[q++] = this.memory.i8View[p++];\n      this.memory.i8View[q++] = c;\n      --n;\n    }\n    if (n === 1) this.memory.i8View[q] = this.memory.i8View[p];\n  }\n\n  fps_maximum(_p, len) {\n    const p = Memory.unTag(_p),\n      buffer = this.memory.i8View.subarray(p, p + len);\n    return buffer.reduce((x, y) => Math.max(x, y), buffer[0]);\n  }\n\n  fps_minimum(_p, len) {\n    const p = Memory.unTag(_p),\n      buffer = this.memory.i8View.subarray(p, p + len);\n    return buffer.reduce((x, y) => Math.min(x, y), buffer[0]);\n  }\n\n  fps_count(_p, len, w) {\n    const p = Memory.unTag(_p),\n      buffer = this.memory.i8View.subarray(p, p + len);\n    return buffer.reduce((tot, c) => (c === w ? tot + 1 : tot), 0);\n  }\n\n  fps_memcpy_offsets(_dst, dst_off, _src, src_off, n) {\n    const dst = Memory.unTag(_dst),\n      src = Memory.unTag(_src);\n    this.memory.i8View.copyWithin(\n      dst + dst_off,\n      src + src_off,\n      src + src_off + n\n    );\n    return _dst + dst_off;\n  }\n\n  _hs_bytestring_itoa(x, _buf, base, pad) {\n    const buf = Memory.unTag(_buf),\n      x_str = x.toString(base).padStart(pad, \"0\");\n    for (let i = 0; i < x_str.length; ++i)\n      this.memory.i8View[buf + i] = x_str.codePointAt(i);\n    return _buf + x_str.length;\n  }\n\n  _hs_bytestring_int_dec(x, _buf) {\n    return this._hs_bytestring_itoa(x, _buf, 10, 0);\n  }\n\n  _hs_bytestring_long_long_int_dec(x, _buf) {\n    return this._hs_bytestring_itoa(x, _buf, 10, 0);\n  }\n\n  _hs_bytestring_uint_dec(x, _buf) {\n    return this._hs_bytestring_itoa(x, _buf, 10, 0);\n  }\n\n  _hs_bytestring_long_long_uint_dec(x, _buf) {\n    return this._hs_bytestring_itoa(x, _buf, 10, 0);\n  }\n\n  _hs_bytestring_int_dec_padded9(x, _buf) {\n    this._hs_bytestring_itoa(x, _buf, 10, 9);\n  }\n\n  _hs_bytestring_long_long_int_dec_padded18(x, _buf) {\n    this._hs_bytestring_itoa(x, _buf, 10, 18);\n  }\n\n  _hs_bytestring_uint_hex(x, _buf) {\n    return this._hs_bytestring_itoa(x, _buf, 16, 0);\n  }\n\n  _hs_bytestring_long_long_uint_hex(x, _buf) {\n    return this._hs_bytestring_itoa(x, _buf, 16, 0);\n  }\n}\n","import { Memory } from \"./rts.memory.mjs\";\n\nexport class TextCBits {\n  constructor(memory) {\n    this.memory = memory;\n    Object.seal(this);\n  }\n\n  _hs_text_memcpy(_dst, dst_off, _src, src_off, n) {\n    const dst = Memory.unTag(_dst) + dst_off * 2,\n      src = Memory.unTag(_src) + src_off * 2;\n    this.memory.i8View.copyWithin(dst, src, src + n * 2);\n  }\n\n  _hs_text_memcmp(_dst, dst_off, _src, src_off, n) {\n    const dst = Memory.unTag(_dst) + dst_off * 2,\n      src = Memory.unTag(_src) + src_off * 2;\n    for (let i = 0; i < n * 2; ++i) {\n      const sgn = Math.sign(\n        this.memory.i8View[dst + i] - this.memory.i8View[src + i]\n      );\n      if (sgn) return sgn;\n    }\n    return 0;\n  }\n\n  _hs_text_decode_utf8(dest, destoffp, src, srcend) {\n    const dec = new TextDecoder(\"utf-8\", { fatal: true }),\n      s = dec.decode(\n        this.memory.i8View.subarray(Memory.unTag(src), Memory.unTag(srcend))\n      );\n    for (let i = 0; i < s.length; ++i)\n      this.memory.i16Store(dest + i * 2, s.charCodeAt(i));\n    this.memory.i64Store(destoffp, s.length);\n    return srcend;\n  }\n\n  _hs_text_encode_utf8(destp, src, srcoff, srclen) {\n    const dec = new TextDecoder(\"utf-16le\", { fatal: true }),\n      s = dec.decode(\n        this.memory.i8View.subarray(\n          Memory.unTag(src + srcoff * 2),\n          Memory.unTag(src + srcoff * 2 + srclen * 2)\n        )\n      ),\n      dest = Number(this.memory.i64Load(destp)),\n      enc = new TextEncoder(),\n      // `Data.Text.Encoding.encodeUtf8` allocates a `ByteArray#` of size\n      // `srclen * 3` to ensure enough space for a single-pass encoding from\n      // UTF-16 to UTF-8. See the comment near\n      // `https://github.com/haskell/text/blob/2176eb38b5238e763e8076b0d0db8c2f2014ab8b/Data/Text/Encoding.hs#L432`\n      // and the \"Buffer Sizing\" section of\n      // `https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encodeInto`\n      // for details.\n      l = enc.encodeInto(\n        s,\n        this.memory.i8View.subarray(\n          Memory.unTag(dest),\n          Memory.unTag(dest + srclen * 3)\n        )\n      ).written;\n    this.memory.i64Store(destp, dest + l);\n  }\n}\n","import * as rtsConstants from \"./rts.constants.mjs\";\n\nexport class TimeCBits {\n  constructor(memory, targetSpecificModule) {\n    this.memory = memory;\n    // Obtain Time API from the passed target-specific module\n    this.resolution = targetSpecificModule.Time.resolution; // format: ns\n    this.getCPUTime = targetSpecificModule.Time.getCPUTime; // format: [s,ns]\n    this.getUnixEpochTime = targetSpecificModule.Time.getUnixEpochTime; // format: [s,ns]\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns a (monotonic) nanoseconds timestamp.\n   */\n  getMonotonicNSec() {\n    const time = this.getCPUTime();\n    return time[0] * 1000000000 + time[1]; \n  }\n\n  /**\n   * Stores at a memory address the resolution of a given clock.\n   * @param clk_id the type of requested clock\n   *   ({@link rtsConstants.clock_monotonic} or {@link rtsConstants.clock_realtime})\n   * @param addr the memory address \n   */\n  clock_getres(clk_id, addr) {\n    if (addr) {\n      let sec = 0, nsec = this.resolution;\n      if (nsec > 1000000000) { // more than 1s\n        sec = Math.floor(this.resolution / 1000000000);\n        nsec = 0;\n      }\n      this.memory.i64Store(addr + rtsConstants.offset_timespec_tv_sec, sec);\n      this.memory.i64Store(addr + rtsConstants.offset_timespec_tv_nsec, nsec);\n    }\n    return 0;\n  }\n\n  /**\n   * Stores at a memory address the time of a given clock.\n   * @param clk_id the type of requested clock\n   *   ({@link rtsConstants.clock_monotonic} or {@link rtsConstants.clock_realtime})\n   * @param addr the memory address \n   */\n  clock_gettime(clk_id, addr) {\n    if (addr) {\n      // fallback by default on the realtime timer\n      const time = clk_id == rtsConstants.clock_monotonic ? this.getCPUTime() : this.getUnixEpochTime();\n      this.memory.i64Store(addr + rtsConstants.offset_timespec_tv_sec, time[0]);\n      this.memory.i64Store(addr + rtsConstants.offset_timespec_tv_nsec, time[1]);\n    }\n    return 0;\n  }\n}\n","export const INVALID_OBJECT = 0;\nexport const CONSTR = 1;\nexport const CONSTR_1_0 = 2;\nexport const CONSTR_0_1 = 3;\nexport const CONSTR_2_0 = 4;\nexport const CONSTR_1_1 = 5;\nexport const CONSTR_0_2 = 6;\nexport const CONSTR_NOCAF = 7;\nexport const FUN = 8;\nexport const FUN_1_0 = 9;\nexport const FUN_0_1 = 10;\nexport const FUN_2_0 = 11;\nexport const FUN_1_1 = 12;\nexport const FUN_0_2 = 13;\nexport const FUN_STATIC = 14;\nexport const THUNK = 15;\nexport const THUNK_1_0 = 16;\nexport const THUNK_0_1 = 17;\nexport const THUNK_2_0 = 18;\nexport const THUNK_1_1 = 19;\nexport const THUNK_0_2 = 20;\nexport const THUNK_STATIC = 21;\nexport const THUNK_SELECTOR = 22;\nexport const BCO = 23;\nexport const AP = 24;\nexport const PAP = 25;\nexport const AP_STACK = 26;\nexport const IND = 27;\nexport const IND_STATIC = 28;\nexport const RET_BCO = 29;\nexport const RET_SMALL = 30;\nexport const RET_BIG = 31;\nexport const RET_FUN = 32;\nexport const UPDATE_FRAME = 33;\nexport const CATCH_FRAME = 34;\nexport const UNDERFLOW_FRAME = 35;\nexport const STOP_FRAME = 36;\nexport const BLOCKING_QUEUE = 37;\nexport const BLACKHOLE = 38;\nexport const MVAR_CLEAN = 39;\nexport const MVAR_DIRTY = 40;\nexport const TVAR = 41;\nexport const ARR_WORDS = 42;\nexport const MUT_ARR_PTRS_CLEAN = 43;\nexport const MUT_ARR_PTRS_DIRTY = 44;\nexport const MUT_ARR_PTRS_FROZEN_DIRTY = 45;\nexport const MUT_ARR_PTRS_FROZEN_CLEAN = 46;\nexport const MUT_VAR_CLEAN = 47;\nexport const MUT_VAR_DIRTY = 48;\nexport const WEAK = 49;\nexport const PRIM = 50;\nexport const MUT_PRIM = 51;\nexport const TSO = 52;\nexport const STACK = 53;\nexport const TREC_CHUNK = 54;\nexport const ATOMICALLY_FRAME = 55;\nexport const CATCH_RETRY_FRAME = 56;\nexport const CATCH_STM_FRAME = 57;\nexport const WHITEHOLE = 58;\nexport const SMALL_MUT_ARR_PTRS_CLEAN = 59;\nexport const SMALL_MUT_ARR_PTRS_DIRTY = 60;\nexport const SMALL_MUT_ARR_PTRS_FROZEN_DIRTY = 61;\nexport const SMALL_MUT_ARR_PTRS_FROZEN_CLEAN = 62;\nexport const COMPACT_NFDATA = 63;\nexport const N_CLOSURE_TYPES = 64;\n","export const stg_arg_bitmaps = [\n  0,\n  0,\n  0,\n  0,\n  65,\n  1,\n  65,\n  65,\n  65,\n  194,\n  964,\n  16328,\n  194,\n  66,\n  130,\n  2,\n  451,\n  195,\n  323,\n  67,\n  387,\n  131,\n  259,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8\n];\n","import * as ClosureTypes from \"./rts.closuretypes.mjs\";\nimport * as FunTypes from \"./rts.funtypes.mjs\";\nimport { Memory } from \"./rts.memory.mjs\";\nimport * as rtsConstants from \"./rts.constants.mjs\";\nimport { stg_arg_bitmaps } from \"./rts.autoapply.mjs\";\n\n/**\n * Returns the address of the block descriptor\n * of the given closure.\n * @param c The closure address\n */\nfunction bdescr(c) {\n  const nc = Number(c);\n  return nc - (nc & (rtsConstants.mblock_size - 1)) + rtsConstants.offset_first_bdescr;\n}\n\n/**\n * Class implementing copying garbage collection.\n */\nexport class GC {\n  constructor(\n    memory,\n    heapalloc,\n    stableptr_manager,\n    stablename_manager,\n    scheduler,\n    info_tables,\n    symbol_table,\n    reentrancy_guard,\n    yolo,\n    gcThreshold\n  ) {\n    this.memory = memory;\n    this.heapAlloc = heapalloc;\n    this.stablePtrManager = stableptr_manager;\n    this.stableNameManager = stablename_manager;\n    this.scheduler = scheduler;\n    this.infoTables = info_tables;\n    this.symbolTable = symbol_table;\n    this.reentrancyGuard = reentrancy_guard;\n    /**\n     * 'Yolo' mode disables garbage collection altogether\n     * (see {@link GC#performGC})\n     * @name GC#yolo\n     */\n    this.yolo = yolo;\n    /**\n     * Garbage collection will not be performed when the\n     * current number of \"live\" MBlocks is less than\n     * {@link GC#gcThreshold} (see {@link GC#performGC}).\n     * @name GC#gcThreshold\n     * @default 64\n     */\n    this.gcThreshold = gcThreshold;\n    /**\n     * Set of closures encountered during garbage\n     * collection but not moved: they are either\n     * closures in the statis part of memory, or\n     * closures in pinned MBlocks.\n     * @name GC#nonMovedObjects\n     */\n    this.nonMovedObjects = new Set();\n    /**\n     * List containing the non-moved closures that\n     * have not been scavenged yet.\n     * @name GC#nonMovedObjectsToScavenge\n     */\n    this.nonMovedObjectsToScavenge = [];\n    /**\n     * Set containing the MBlocks in the to-space,\n     * i.e. the MBlocks where reachable objects are copied\n     * during garbage collection.\n     * Notes:\n     * 1) Pinned MBlocks are not copied during GC: they are\n     *    simply set as live, and added to the liveMBlocks set.\n     * 2) Static objects are not copied either, but their\n     *    blocks are not even added to the liveMBlocks set.\n     * @name GC#liveMBlocks\n     */\n    this.liveMBlocks = new Set();\n    /**\n     * List containing the MBlocks in the to-space\n     * that have yet to be scavenged.\n     * @name GC#blocksToScavenge\n     */\n    this.blocksToScavenge = [];\n    /**\n     * Set containing the MBlocks in the from-space,\n     * i.e. the MBlocks containing objects that have been\n     * copied into to-space. These MBlocks will be freed\n     * at the end of garbage collection.\n     * @name GC#deadMBlocks\n     */\n    this.deadMBlocks = new Set();\n    /**\n     * At each garbage collection, the live JSVals encountered are\n     * recorded in {@link GC#liveJSVals}, and then handled separately\n     * by {@link StablePtrManager}.\n     * @name GC#liveJSVals\n     */\n    this.liveJSVals = new Set();\n    Object.freeze(this);\n  }\n\n  /**\n   * Checks whether the provided memory address resides\n   * in a pinned MBlock. Used by {@link GC#evacuateClosure}\n   * to avoid evacuating pinned objects.\n   * @param addr The memory address to check\n   */\n  isPinned(addr) {\n    const bd = bdescr(addr),\n      flags = this.memory.i16Load(bd + rtsConstants.offset_bdescr_flags);\n    return Boolean(flags & rtsConstants.BF_PINNED);\n  }\n\n  /**\n   * Heap allocates a physical copy of the given closure.\n   * Used during evacuation by {@link GC#evacuateClosure}.\n   * @param c The source address of the closure\n   * @param bytes The size in bytes of the closure\n   */\n  copyClosure(c, bytes) {\n    const dest_c = this.heapAlloc.allocate(Math.ceil(bytes / 8));\n    this.memory.memcpy(dest_c, c, bytes);\n    const dest_block = bdescr(dest_c);\n    if (!this.liveMBlocks.has(dest_block)) {\n      this.blocksToScavenge.push(dest_block);\n      this.liveMBlocks.add(dest_block);\n    }\n    this.deadMBlocks.add(bdescr(c));\n    return dest_c;\n  }\n\n  /**\n   * Performs _stingy_ evaluation, i.e. a very frugual form\n   * of evaluation that is carried during garbage collection.\n   * It implements the following two optimizations:\n   * - Indirections short-cutting;\n   * - Selector optimization: remove thunks of applications of field\n   *   selectors.\n   * Only the argument `c` is required: the other arguments will be\n   * computed in case they are `undefined`.\n   * @param {number} c - The address of the closure\n   * @param {number=} untagged_c - The unDynTag-ed address\n   * @param {number=} info - The info pointer of `c`\n   * @param {number=} type - The closure type of `c`\n   * @returns A tuple array `[res_c, res_type]` containing\n   *   the resulting address and type of the closure after\n   *   the optimisation.\n   */\n  stingyEval(c, untagged_c, info, type) {\n    if (!untagged_c) {\n      // If no information about c is present, compute it\n      untagged_c = Memory.unDynTag(c);\n      info = Number(this.memory.i64Load(untagged_c));\n      if (info % 2 == 0) {\n        // Obtain the closure type only if the header\n        // is an info pointer and not a forwarding pointer\n        type = this.memory.i32Load(\n          info + rtsConstants.offset_StgInfoTable_type\n        );\n      }\n    }\n    switch (type) {\n      case ClosureTypes.IND: {\n        // Whitehole\n        this.memory.i64Store(\n          untagged_c,\n          this.symbolTable.stg_WHITEHOLE_info\n        );\n        // Follow the indirectee\n        const [res_c, _] = this.stingyEval(\n          Number(\n            this.memory.i64Load(\n              untagged_c + rtsConstants.offset_StgInd_indirectee\n            )\n          ));\n        this.memory.i64Store(untagged_c, this.symbolTable.stg_IND_info); // Undo whiteholing\n        this.memory.i64Store(untagged_c + rtsConstants.offset_StgInd_indirectee, res_c);\n        return [res_c, ClosureTypes.IND];\n      }\n      case ClosureTypes.THUNK_SELECTOR: {\n        // Whitehole\n        this.memory.i64Store(\n          untagged_c,\n          this.symbolTable.stg_WHITEHOLE_info\n        );\n        // Follow the selectee\n        const [res_c, res_type] = this.stingyEval(\n          Number(\n            this.memory.i64Load(\n              untagged_c + rtsConstants.offset_StgSelector_selectee\n            ))\n        );\n        // try to perform selection\n        switch (res_type) {\n          case ClosureTypes.CONSTR:\n          case ClosureTypes.CONSTR_2_0:\n          case ClosureTypes.CONSTR_NOCAF: {\n            const offset = this.memory.i32Load(\n              info + rtsConstants.offset_StgInfoTable_layout\n            );\n            // Warning: at this point (and in the similar point below)\n            // we may be losing the dynamic tagging, fixme\n            const selectee = this.memory.i64Load(\n              Memory.unDynTag(res_c) + ((1 + offset) << 3)\n            );\n            this.memory.i64Store(untagged_c + rtsConstants.offset_StgInd_indirectee, selectee);\n            // Set the current closure as IND, but do not\n            // un-whitehole for now: it will be taken care\n            // of later, when propagating the result\n            // (see case IND above)\n            return this.stingyEval(c, untagged_c, info, ClosureTypes.IND);\n          }\n          case ClosureTypes.CONSTR_1_0:\n          case ClosureTypes.CONSTR_1_1: {\n            const selectee = this.memory.i64Load(Memory.unDynTag(res_c) + 8);\n            this.memory.i64Store(\n              untagged_c + rtsConstants.offset_StgInd_indirectee,\n              selectee\n            );\n            return this.stingyEval(c, untagged_c, info, ClosureTypes.IND);\n          }\n          default: {\n            this.memory.i64Store(untagged_c, info); // Undo whiteholing\n            this.memory.i64Store(\n              untagged_c + rtsConstants.offset_StgSelector_selectee,\n              res_c\n            );\n            return [c, type];\n          }\n        }\n      }\n      default: {\n        return [c, type];\n      }\n    }\n  }\n\n  /**\n   * Evacuates a closure. This consists of:\n   * (1) Copying the closure into to-space through {@link GC#copyClosure}\n   * (2) Map the old unDynTag-ed address of the closure\n   *     to its new unDynTag-ed address in {@link GC#closureIndirects}.\n   * If that closure had already been evacuated, simply\n   * return the forwarding pointer already present in {@link GC#closureIndirects}.\n   * @param c The memory address of the closure to evacuate.\n   */\n  evacuateClosure(c) {\n    if (!Memory.getTag(c)) {\n      // c is the address of a JSVal\n      if (!(Number(c) & 1))\n        throw new WebAssembly.RuntimeError(`Illegal JSVal 0x${c.toString(16)}`);\n      this.liveJSVals.add(Number(c));\n      return c;\n    }\n    const tag = Memory.getDynTag(c),\n      untagged_c = Memory.unDynTag(c);\n    let info = Number(this.memory.i64Load(untagged_c));\n\n    if (info % 2) {\n      // The info header has already been overwritten with\n      // a forwarding address: just follow it\n      return Memory.setDynTag(info, tag);\n    } else if (this.nonMovedObjects.has(untagged_c)) {\n      // The closure is either pinned or static, and has\n      // already been enqueued for scavenging: just return it\n      return c;\n    } else if (!this.memory.heapAlloced(untagged_c)) {\n      // Object in the static part of the memory:\n      // it won't be copied ...\n      this.nonMovedObjects.add(untagged_c);\n      // ... but it will still be scavenged\n      this.nonMovedObjectsToScavenge.push(untagged_c);\n      // Warning: do not set the MBlock as live,\n      // because the static part of memory is not\n      // tracked by HeapAlloc.mgroups and it would\n      // break the checks in HeapAlloc.handleLiveness.\n      return c;\n    } else if (this.isPinned(untagged_c)) {\n      // The object belongs to a pinned MBlock:\n      // it won't be copied ...\n      this.nonMovedObjects.add(untagged_c);\n      // ... but it will still be scavenged\n      this.nonMovedObjectsToScavenge.push(untagged_c);\n      // Set the pinned MBlock as live\n      this.liveMBlocks.add(bdescr(untagged_c));\n      return c;\n    }\n    // The closure is heap-allocated and dynamic:\n    // proceed to evacuate it into to-space\n    if (this.infoTables && !this.infoTables.has(info))\n      throw new WebAssembly.RuntimeError(\n        `Invalid info table 0x${info.toString(16)}`\n      );\n    let dest_c = undefined;\n    // Get the type of the closure from info tables\n    let type = this.memory.i32Load(\n      info + rtsConstants.offset_StgInfoTable_type\n    );\n    if (type == ClosureTypes.THUNK_SELECTOR || type == ClosureTypes.IND) {\n      // Optimize selectors and indirections\n      type = this.stingyEval(Number(c), untagged_c, info, type)[1];\n    }\n    switch (type) {\n      case ClosureTypes.CONSTR_0_1:\n      case ClosureTypes.FUN_0_1:\n      case ClosureTypes.FUN_1_0:\n      case ClosureTypes.CONSTR_1_0: {\n        dest_c = this.copyClosure(untagged_c, 16);\n        break;\n      }\n      case ClosureTypes.THUNK_1_0:\n      case ClosureTypes.THUNK_0_1: {\n        dest_c = this.copyClosure(untagged_c, rtsConstants.sizeof_StgThunk + 8);\n        break;\n      }\n      case ClosureTypes.THUNK_1_1:\n      case ClosureTypes.THUNK_2_0:\n      case ClosureTypes.THUNK_0_2: {\n        dest_c = this.copyClosure(\n          untagged_c,\n          rtsConstants.sizeof_StgThunk + 16\n        );\n        break;\n      }\n      case ClosureTypes.FUN_1_1:\n      case ClosureTypes.FUN_2_0:\n      case ClosureTypes.FUN_0_2:\n      case ClosureTypes.CONSTR_1_1:\n      case ClosureTypes.CONSTR_2_0:\n      case ClosureTypes.CONSTR_0_2: {\n        dest_c = this.copyClosure(untagged_c, 24);\n        break;\n      }\n      case ClosureTypes.THUNK: {\n        const ptrs = this.memory.i32Load(\n            info + rtsConstants.offset_StgInfoTable_layout\n          ),\n          non_ptrs = this.memory.i32Load(\n            info + rtsConstants.offset_StgInfoTable_layout + 4\n          );\n        dest_c = this.copyClosure(\n          untagged_c,\n          rtsConstants.sizeof_StgThunk + ((ptrs + non_ptrs) << 3)\n        );\n        break;\n      }\n      case ClosureTypes.FUN:\n      case ClosureTypes.CONSTR:\n      case ClosureTypes.CONSTR_NOCAF:\n      case ClosureTypes.MVAR_CLEAN:\n      case ClosureTypes.MVAR_DIRTY:\n      case ClosureTypes.MUT_VAR_CLEAN:\n      case ClosureTypes.MUT_VAR_DIRTY:\n      case ClosureTypes.WEAK:\n      case ClosureTypes.PRIM:\n      case ClosureTypes.MUT_PRIM:\n      case ClosureTypes.BLACKHOLE: {\n        const ptrs = this.memory.i32Load(\n            info + rtsConstants.offset_StgInfoTable_layout\n          ),\n          non_ptrs = this.memory.i32Load(\n            info + rtsConstants.offset_StgInfoTable_layout + 4\n          );\n        dest_c = this.copyClosure(untagged_c, (1 + ptrs + non_ptrs) << 3);\n        break;\n      }\n      case ClosureTypes.THUNK_SELECTOR: {\n        dest_c = this.copyClosure(untagged_c, rtsConstants.sizeof_StgSelector);\n        break;\n      }\n      case ClosureTypes.IND: {\n        dest_c = this.evacuateClosure(\n          this.memory.i64Load(\n            untagged_c + rtsConstants.offset_StgInd_indirectee\n          )\n        );\n        // cannot simply break here, because in the case of IND closures\n        // dest_c must not be tagged with the current tag\n        this.memory.i64Store(untagged_c, Memory.setDynTag(dest_c, 1));\n        return dest_c;\n      }\n      case ClosureTypes.PAP: {\n        const n_args = this.memory.i32Load(\n          untagged_c + rtsConstants.offset_StgPAP_n_args\n        );\n        dest_c = this.copyClosure(\n          untagged_c,\n          rtsConstants.sizeof_StgPAP + (n_args << 3)\n        );\n        break;\n      }\n      case ClosureTypes.AP: {\n        const n_args = this.memory.i32Load(\n          untagged_c + rtsConstants.offset_StgAP_n_args\n        );\n        dest_c = this.copyClosure(\n          untagged_c,\n          rtsConstants.sizeof_StgAP + (n_args << 3)\n        );\n        break;\n      }\n      case ClosureTypes.AP_STACK: {\n        const size = Number(\n          this.memory.i64Load(untagged_c + rtsConstants.offset_StgAP_STACK_size)\n        );\n        dest_c = this.copyClosure(\n          untagged_c,\n          rtsConstants.sizeof_StgAP_STACK + (size << 3)\n        );\n        break;\n      }\n      case ClosureTypes.ARR_WORDS: {\n        dest_c = this.copyClosure(\n          untagged_c,\n          Math.ceil(\n            (rtsConstants.sizeof_StgArrBytes +\n              Number(\n                this.memory.i64Load(\n                  untagged_c + rtsConstants.offset_StgArrBytes_bytes\n                )\n              )) /\n              8\n          ) * 8\n        );\n        break;\n      }\n      case ClosureTypes.MUT_ARR_PTRS_CLEAN:\n      case ClosureTypes.MUT_ARR_PTRS_DIRTY:\n      case ClosureTypes.MUT_ARR_PTRS_FROZEN_DIRTY:\n      case ClosureTypes.MUT_ARR_PTRS_FROZEN_CLEAN: {\n        dest_c = this.copyClosure(\n          untagged_c,\n          rtsConstants.sizeof_StgMutArrPtrs +\n            (Number(\n              this.memory.i64Load(\n                untagged_c + rtsConstants.offset_StgMutArrPtrs_ptrs\n              )\n            ) <<\n              3)\n        );\n        break;\n      }\n      case ClosureTypes.SMALL_MUT_ARR_PTRS_CLEAN:\n      case ClosureTypes.SMALL_MUT_ARR_PTRS_DIRTY:\n      case ClosureTypes.SMALL_MUT_ARR_PTRS_FROZEN_DIRTY:\n      case ClosureTypes.SMALL_MUT_ARR_PTRS_FROZEN_CLEAN: {\n        dest_c = this.copyClosure(\n          untagged_c,\n          rtsConstants.sizeof_StgSmallMutArrPtrs +\n            (Number(\n              this.memory.i64Load(\n                untagged_c + rtsConstants.offset_StgSmallMutArrPtrs_ptrs\n              )\n            ) <<\n              3)\n        );\n        break;\n      }\n      default:\n        throw new WebAssembly.RuntimeError();\n    }\n    // Overwrite the object header with a forwarding\n    // pointer (i.e. store the address with the\n    // least significant bit set to 1)\n    this.memory.i64Store(untagged_c, dest_c + 1);\n    // Finally, return the new address\n    return Memory.setDynTag(dest_c, tag);\n  }\n\n  scavengeClosureAt(p) {\n    this.memory.i64Store(p, this.evacuateClosure(this.memory.i64Load(p)));\n  }\n\n  scavengePointersFirst(payload, ptrs) {\n    for (let i = 0; i < ptrs; ++i) this.scavengeClosureAt(payload + (i << 3));\n  }\n\n  scavengeSmallBitmap(payload, bitmap, size) {\n    for (let i = 0; i < size; ++i)\n      if (!(Number(bitmap >> BigInt(i)) & 1))\n        this.scavengeClosureAt(payload + (i << 3));\n  }\n\n  scavengeLargeBitmap(payload, large_bitmap, size) {\n    for (let j = 0; j < size; j += 64) {\n      const bitmap = this.memory.i64Load(\n        large_bitmap + rtsConstants.offset_StgLargeBitmap_bitmap + (j >> 3)\n      );\n      for (let i = j; i - j < 64 && i < size; ++i)\n        if (!(Number(bitmap >> BigInt(i - j)) & 1))\n          this.scavengeClosureAt(payload + (i << 3));\n    }\n  }\n\n  scavengePAP(c, offset_fun, payload, n_args) {\n    this.scavengeClosureAt(c + offset_fun);\n    const fun = this.memory.i64Load(c + offset_fun),\n      fun_info = Number(this.memory.i64Load(Memory.unDynTag(fun)));\n    if (this.infoTables && !this.infoTables.has(fun_info))\n      throw new WebAssembly.RuntimeError(\n        `Invalid info table 0x${fun_info.toString(16)}`\n      );\n    switch (\n      this.memory.i32Load(\n        fun_info +\n          rtsConstants.offset_StgFunInfoTable_f +\n          rtsConstants.offset_StgFunInfoExtraFwd_fun_type\n      )\n    ) {\n      case FunTypes.ARG_GEN: {\n        this.scavengeSmallBitmap(\n          payload,\n          this.memory.i64Load(\n            fun_info +\n              rtsConstants.offset_StgFunInfoTable_f +\n              rtsConstants.offset_StgFunInfoExtraFwd_b\n          ) >> BigInt(6),\n          n_args\n        );\n        break;\n      }\n      case FunTypes.ARG_GEN_BIG: {\n        this.scavengeLargeBitmap(\n          payload,\n          Number(\n            this.memory.i64Load(\n              fun_info +\n                rtsConstants.offset_StgFunInfoTable_f +\n                rtsConstants.offset_StgFunInfoExtraFwd_b\n            )\n          ),\n          n_args\n        );\n        break;\n      }\n      case FunTypes.ARG_BCO: {\n        throw new WebAssembly.RuntimeError();\n      }\n      default: {\n        this.scavengeSmallBitmap(\n          payload,\n          BigInt(\n            stg_arg_bitmaps[\n              this.memory.i32Load(\n                fun_info +\n                  rtsConstants.offset_StgFunInfoTable_f +\n                  rtsConstants.offset_StgFunInfoExtraFwd_fun_type\n              )\n            ]\n          ) >> BigInt(6),\n          n_args\n        );\n        break;\n      }\n    }\n  }\n\n  scavengeStackChunk(sp, sp_lim) {\n    let c = sp;\n    while (true) {\n      if (c > sp_lim) throw new WebAssembly.RuntimeError();\n      if (c == sp_lim) break;\n      const info = Number(this.memory.i64Load(c)),\n        type = this.memory.i32Load(\n          info + rtsConstants.offset_StgInfoTable_type\n        ),\n        raw_layout = this.memory.i64Load(\n          info + rtsConstants.offset_StgInfoTable_layout\n        );\n      if (this.infoTables && !this.infoTables.has(info))\n        throw new WebAssembly.RuntimeError(\n          `Invalid info table 0x${info.toString(16)}`\n        );\n      if (this.memory.i32Load(info + rtsConstants.offset_StgInfoTable_srt))\n        this.evacuateClosure(\n          this.memory.i64Load(info + rtsConstants.offset_StgRetInfoTable_srt)\n        );\n      switch (type) {\n        case ClosureTypes.RET_SMALL:\n        case ClosureTypes.UPDATE_FRAME:\n        case ClosureTypes.CATCH_FRAME:\n        case ClosureTypes.UNDERFLOW_FRAME:\n        case ClosureTypes.STOP_FRAME:\n        case ClosureTypes.ATOMICALLY_FRAME:\n        case ClosureTypes.CATCH_RETRY_FRAME:\n        case ClosureTypes.CATCH_STM_FRAME: {\n          const size = Number(raw_layout) & 0x3f,\n            bitmap = raw_layout >> BigInt(6);\n          this.scavengeSmallBitmap(c + 8, bitmap, size);\n          c += (1 + size) << 3;\n          break;\n        }\n        case ClosureTypes.RET_BIG: {\n          const size = Number(\n            this.memory.i64Load(\n              Number(raw_layout) + rtsConstants.offset_StgLargeBitmap_size\n            )\n          );\n          this.scavengeLargeBitmap(c + 8, Number(raw_layout), size);\n          c += (1 + size) << 3;\n          break;\n        }\n\n        // https://github.com/ghc/ghc/blob/2ff77b9894eecf51fa619ed2266ca196e296cd1e/rts/Printer.c#L609\n        // https://github.com/ghc/ghc/blob/2ff77b9894eecf51fa619ed2266ca196e296cd1e/rts/sm/Scav.c#L1944\n        case ClosureTypes.RET_FUN: {\n          const retfun = c;\n          const size = Number(\n            this.memory.i64Load(retfun + rtsConstants.offset_StgRetFun_size)\n          );\n\n          // NOTE: the order is important. The scavenging will move all the\n          // data inside, so that when we grab \"fun\", we grab the right fun\n          // that has been moved.\n          this.scavengeClosureAt(retfun + rtsConstants.offset_StgRetFun_fun);\n          let fun = Number(\n            this.memory.i64Load(retfun + rtsConstants.offset_StgRetFun_fun)\n          );\n          const fun_info_p = fun + 0;\n          const fun_info = Number(\n            this.memory.i64Load(Memory.unDynTag(fun_info_p))\n          );\n\n          const fun_type = this.memory.i32Load(\n            fun_info +\n              rtsConstants.offset_StgFunInfoTable_f +\n              rtsConstants.offset_StgFunInfoExtraFwd_fun_type\n          );\n\n          const ret_fun_payload =\n            retfun + rtsConstants.offset_StgRetFun_payload;\n\n          switch (fun_type) {\n            case FunTypes.ARG_GEN: {\n              this.scavengeSmallBitmap(\n                c + rtsConstants.offset_StgRetFun_payload,\n                this.memory.i64Load(\n                  fun_info +\n                    rtsConstants.offset_StgFunInfoTable_f +\n                    rtsConstants.offset_StgFunInfoExtraFwd_b\n                ) >> BigInt(6),\n                size\n              );\n              break;\n            }\n            case FunTypes.ARG_GEN_BIG: {\n              this.scavengeLargeBitmap(\n                c + rtsConstants.offset_StgRetFun_payload,\n                Number(\n                  this.memory.i64Load(\n                    fun_info +\n                      rtsConstants.offset_StgFunInfoTable_f +\n                      rtsConstants.offset_StgFunInfoExtraFwd_b\n                  )\n                ),\n                size\n              );\n              break;\n            }\n            case FunTypes.ARG_BCO: {\n              throw new WebAssembly.RuntimeError();\n            }\n            default: {\n              // https://github.com/ghc/ghc/blob/bf73419518ca550e85188616f860961c7e2a336b/includes/rts/Constants.h#L186\n              const BITMAP_SIZE_MASK = 0x3f;\n              const BITMAP_BITS_SHIFT = 6;\n              const bitmap = stg_arg_bitmaps[fun_type];\n\n              // https://github.com/ghc/ghc/blob/2ff77b9894eecf51fa619ed2266ca196e296cd1e/includes/rts/storage/InfoTables.h#L116\n              const bitmap_bits = BigInt(bitmap) >> BigInt(BITMAP_BITS_SHIFT);\n              const bitmap_size = bitmap & BITMAP_SIZE_MASK;\n\n              this.scavengeSmallBitmap(\n                ret_fun_payload,\n                bitmap_bits,\n                bitmap_size\n              );\n\n              break;\n            } // end case default\n          } //end switch (fun_type)\n          c += rtsConstants.sizeof_StgRetFun + (size << 3);\n          break;\n        }\n        default:\n          throw new WebAssembly.RuntimeError();\n      }\n    }\n  }\n\n  /**\n   * Loops over all reachable objects and scavenges them.\n   */\n  scavengeLoop() {\n    const closures = this.nonMovedObjectsToScavenge,\n          blocks = this.blocksToScavenge;\n\n    let currentBlock = undefined, currentObject = undefined;\n\n    // Note: there are various nested loops, mainly because there are\n    // two kinds of objects, that must be scavenged in a different way:\n    // objects that have been copied in to-space, and non-moved objects.\n    // Objects copied in to-space are scavenged by traversing the\n    // to-space sequentially. Non-moved objects are stored\n    // in `this.nonMovedObjects` and must be handled separately.\n    // Moreover, scavenging an object of either kind may introduce\n    // new objects of either kind.\n    while (true) {\n      if (!currentBlock) {\n        // We try and pick a new MBlock to scavenge\n        currentBlock = blocks.pop();\n        if (currentBlock)\n          // If there exists a MBlock to scavenge,\n          // start with the object pointed\n          // by the `start` field in the block\n          // descriptor\n          currentObject = Number(\n            this.memory.i64Load(\n              currentBlock + rtsConstants.offset_bdescr_start\n            )\n          );\n      }\n      // Iterate over the objects in the `currentBlock`,\n      // but only if there's such a block\n      while (currentBlock) {\n        // `currentLimit` is the upper limit for `currentBlock`\n        // and consists of a pointer to the free space in the\n        // current block\n        const currentLimit = Number(\n          this.memory.i64Load(\n            currentBlock + rtsConstants.offset_bdescr_free\n          )\n        );\n        if (currentObject >= currentLimit)\n          // There are no more blocks to scavenge in the\n          // `currentBlock`. Break, but do not unset\n          // the current MBlock, as we are not done with\n          // it yet: scavenging the non-moved closures below\n          // may add new objects to `currentBlock`.\n          break;\n        // Scavenge the current object, and increase the\n        // `currentObject` address of the amount (sizeof) provided by\n        // the `scavengeClosure` function.\n        currentObject += this.scavengeClosure(currentObject);\n      }\n      if (blocks.length > 0) {\n        // There are more MBlocks to scavenge:\n        // since we have completely processed the\n        // current currentBlock, we can continue\n        // and pick the next one\n        currentBlock = currentObject = undefined;\n        continue;\n      } else if (closures.length == 0)\n        // There are no more block to scavenge,\n        // nor in the to-space nor among the non-moved\n        // objects. We are done.\n        return;\n      // Scavenge the remaining non-moved objects\n      while (closures.length > 0) {\n        this.scavengeClosure(closures.pop());\n      }\n      // Continue scavenging the possibly newly evacuated objects\n    }\n  }\n\n  /**\n   * Scavenges a single object in to-space by evacuating\n   * each pointer in the object, and replacing the pointer\n   * with the address obtained after evacuation.\n   * @param c The address of the closure to scavenge\n   * @returns The size (in bytes) of the closure c\n   */\n  scavengeClosure(c) {\n    const info = Number(this.memory.i64Load(c)),\n      type = this.memory.i32Load(info + rtsConstants.offset_StgInfoTable_type);\n    if (this.infoTables && !this.infoTables.has(info))\n      throw new WebAssembly.RuntimeError(\n        `Invalid info table 0x${info.toString(16)}`\n      );\n    switch (type) {\n      case ClosureTypes.CONSTR_1_0: {\n        this.scavengePointersFirst(c + 8, 1);\n        return 16;\n      }\n      case ClosureTypes.CONSTR_0_1: {\n        return 16;\n      }\n      case ClosureTypes.CONSTR_1_1: {\n        this.scavengePointersFirst(c + 8, 1);\n        return 24;\n      }\n      case ClosureTypes.CONSTR_2_0: {\n        this.scavengePointersFirst(c + 8, 2);\n        return 24;\n      }\n      case ClosureTypes.CONSTR_0_2: {\n        return 24;\n      }\n      case ClosureTypes.FUN:\n      case ClosureTypes.FUN_1_0:\n      case ClosureTypes.FUN_0_1:\n      case ClosureTypes.FUN_2_0:\n      case ClosureTypes.FUN_1_1:\n      case ClosureTypes.FUN_0_2:\n      case ClosureTypes.FUN_STATIC: {\n        if (this.memory.i32Load(info + rtsConstants.offset_StgInfoTable_srt))\n          this.evacuateClosure(\n            this.memory.i64Load(\n              info +\n                rtsConstants.offset_StgFunInfoTable_f +\n                rtsConstants.offset_StgFunInfoExtraFwd_srt\n            )\n          );\n        const ptrs = this.memory.i32Load(\n          info + rtsConstants.offset_StgInfoTable_layout\n        ),\n        non_ptrs = this.memory.i32Load(\n          info + rtsConstants.offset_StgInfoTable_layout + 4\n        );\n        this.scavengePointersFirst(c + 8, ptrs);\n        return (1 + ptrs + non_ptrs) << 3;\n      }\n      case ClosureTypes.CONSTR:\n      case ClosureTypes.CONSTR_NOCAF:\n      case ClosureTypes.BLACKHOLE:\n      case ClosureTypes.MUT_VAR_CLEAN:\n      case ClosureTypes.MUT_VAR_DIRTY:\n      case ClosureTypes.PRIM:\n      case ClosureTypes.MUT_PRIM:\n      case ClosureTypes.COMPACT_NFDATA: {\n        const ptrs = this.memory.i32Load(\n            info + rtsConstants.offset_StgInfoTable_layout\n          ),\n          non_ptrs = this.memory.i32Load(\n            info + rtsConstants.offset_StgInfoTable_layout + 4\n          );\n        this.scavengePointersFirst(c + 8, ptrs);\n        return (1 + ptrs + non_ptrs) << 3;\n      }\n      case ClosureTypes.THUNK_STATIC:\n      case ClosureTypes.THUNK:\n      case ClosureTypes.THUNK_1_0:\n      case ClosureTypes.THUNK_0_1:\n      case ClosureTypes.THUNK_2_0:\n      case ClosureTypes.THUNK_1_1:\n      case ClosureTypes.THUNK_0_2: {\n        if (this.memory.i32Load(info + rtsConstants.offset_StgInfoTable_srt))\n          this.evacuateClosure(\n            this.memory.i64Load(\n              info + rtsConstants.offset_StgThunkInfoTable_srt\n            )\n          );\n        const ptrs = this.memory.i32Load(\n          info + rtsConstants.offset_StgInfoTable_layout\n        ),\n        non_ptrs = this.memory.i32Load(\n          info + rtsConstants.offset_StgInfoTable_layout + 4\n        );\n        this.scavengePointersFirst(\n          c + rtsConstants.offset_StgThunk_payload,\n          ptrs\n        );\n        return rtsConstants.sizeof_StgThunk + ((ptrs + non_ptrs) << 3);\n      }\n      case ClosureTypes.THUNK_SELECTOR: {\n        if (this.memory.i32Load(info + rtsConstants.offset_StgInfoTable_srt))\n          this.evacuateClosure(\n            this.memory.i64Load(\n              info + rtsConstants.offset_StgThunkInfoTable_srt\n            )\n          );\n        this.scavengeClosureAt(c + rtsConstants.offset_StgSelector_selectee);\n        return rtsConstants.sizeof_StgSelector;\n      }\n      case ClosureTypes.AP: {\n        const n_args = this.memory.i32Load(\n          c + rtsConstants.offset_StgAP_n_args\n        );\n        this.scavengePAP(\n          c,\n          rtsConstants.offset_StgAP_fun,\n          c + rtsConstants.offset_StgAP_payload,\n          n_args\n        );\n        return rtsConstants.sizeof_StgAP + (n_args << 3);\n      }\n      case ClosureTypes.PAP: {\n        const n_args = this.memory.i32Load(\n          c + rtsConstants.offset_StgPAP_n_args\n        );\n        this.scavengePAP(\n          c,\n          rtsConstants.offset_StgPAP_fun,\n          c + rtsConstants.offset_StgPAP_payload,\n          n_args\n        );\n        return rtsConstants.sizeof_StgPAP + (n_args << 3);\n      }\n      case ClosureTypes.AP_STACK: {\n        const size = Number(\n          this.memory.i64Load(\n            c + rtsConstants.offset_StgAP_STACK_size\n          )\n        );\n        this.scavengeClosureAt(c + rtsConstants.offset_StgAP_STACK_fun);\n        this.scavengeStackChunk(\n          c + rtsConstants.offset_StgAP_STACK_payload,\n          c +\n            rtsConstants.offset_StgAP_STACK_payload + size\n        );\n        return rtsConstants.sizeof_StgAP_STACK + (size << 3);\n      }\n      case ClosureTypes.IND_STATIC: {\n        this.scavengeClosureAt(c + rtsConstants.offset_StgIndStatic_indirectee);\n        return; // size not important, this object won't be moved\n      }\n      case ClosureTypes.MVAR_CLEAN:\n      case ClosureTypes.MVAR_DIRTY: {\n        this.scavengeClosureAt(c + rtsConstants.offset_StgMVar_head);\n        this.scavengeClosureAt(c + rtsConstants.offset_StgMVar_tail);\n        this.scavengeClosureAt(c + rtsConstants.offset_StgMVar_value);\n        return rtsConstants.offset_StgMVar_value + 8;\n      }\n      case ClosureTypes.ARR_WORDS: {\n        return (\n          Math.ceil(\n            (rtsConstants.sizeof_StgArrBytes +\n              Number(\n                this.memory.i64Load(c + rtsConstants.offset_StgArrBytes_bytes)\n              )) /\n              8\n          ) * 8\n        );\n      }\n      case ClosureTypes.MUT_ARR_PTRS_CLEAN:\n      case ClosureTypes.MUT_ARR_PTRS_DIRTY:\n      case ClosureTypes.MUT_ARR_PTRS_FROZEN_DIRTY:\n      case ClosureTypes.MUT_ARR_PTRS_FROZEN_CLEAN: {\n        const ptrs = Number(\n          this.memory.i64Load(c + rtsConstants.offset_StgMutArrPtrs_ptrs)\n        );\n        this.scavengePointersFirst(\n          c + rtsConstants.offset_StgMutArrPtrs_payload,\n          ptrs\n        );\n        return rtsConstants.sizeof_StgMutArrPtrs + (ptrs << 3);\n      }\n      case ClosureTypes.WEAK: {\n        this.scavengeClosureAt(c + rtsConstants.offset_StgWeak_cfinalizers);\n        this.scavengeClosureAt(c + rtsConstants.offset_StgWeak_key);\n        this.scavengeClosureAt(c + rtsConstants.offset_StgWeak_value);\n        this.scavengeClosureAt(c + rtsConstants.offset_StgWeak_finalizer);\n        return rtsConstants.offset_StgWeak_link + 8;\n      }\n      case ClosureTypes.TSO: {\n        this.scavengeClosureAt(c + rtsConstants.offset_StgTSO_stackobj);\n        return; // size not important, this object won't be moved\n      }\n      case ClosureTypes.STACK: {\n        const\n          stack_size =\n            this.memory.i32Load(c + rtsConstants.offset_StgStack_stack_size) << 3,\n          sp = Number(this.memory.i64Load(c + rtsConstants.offset_StgStack_sp)),\n          sp_lim = c + rtsConstants.offset_StgStack_stack + stack_size;\n        this.scavengeStackChunk(sp, sp_lim);\n        return rtsConstants.offset_StgStack_stack + stack_size;\n      }\n      case ClosureTypes.SMALL_MUT_ARR_PTRS_CLEAN:\n      case ClosureTypes.SMALL_MUT_ARR_PTRS_DIRTY:\n      case ClosureTypes.SMALL_MUT_ARR_PTRS_FROZEN_DIRTY:\n      case ClosureTypes.SMALL_MUT_ARR_PTRS_FROZEN_CLEAN: {\n        const ptrs = Number(\n          this.memory.i64Load(c + rtsConstants.offset_StgSmallMutArrPtrs_ptrs)\n        );\n        this.scavengePointersFirst(\n          c + rtsConstants.offset_StgSmallMutArrPtrs_payload,\n          ptrs\n        );\n        return rtsConstants.offset_StgSmallMutArrPtrs_payload + (ptrs << 3);\n      }\n      default:\n        throw new WebAssembly.RuntimeError();\n    }\n  }\n\n  /**\n   * Allocates a new nursery and stores its address in the appropriate\n   * field of the StgRegTable of the main capability.\n   */\n  updateNursery() {\n    // Note: the 'rHpAlloc' field of the 'StgRegTable' C struct contains\n    // the number of bytes allocated in the heap, or better the number of\n    // bytes attempted to being allocated before the heap check fails.\n    // Here, we read this field in the hp_alloc variable and\n    // use it to determine the size of the newly allocated nursery.\n    const base_reg =\n        this.symbolTable.MainCapability + rtsConstants.offset_Capability_r,\n      hp_alloc = Number(\n        this.memory.i64Load(base_reg + rtsConstants.offset_StgRegTable_rHpAlloc)\n      );\n    // reset the number of allocated bytes in the nursery\n    this.memory.i64Store(\n      base_reg + rtsConstants.offset_StgRegTable_rHpAlloc,\n      0\n    );\n    // The address of the new nursery's block descriptor is stored\n    // in the 'rCurrentNursery' field of the StgRegTable of the main capability.\n    this.memory.i64Store(\n      base_reg + rtsConstants.offset_StgRegTable_rCurrentNursery,\n      this.heapAlloc.hpAlloc(hp_alloc)\n    );\n  }\n\n  /**\n   * Performs garbage collection, using scheduler Thread State Objects (TSOs) as roots.\n   */\n  performGC() {\n    if (this.yolo || this.heapAlloc.liveSize() < this.gcThreshold) {\n      // Garbage collection is skipped. This happens in yolo mode,\n      // or when the total number of \"live\" MBlocks is below the given threshold\n      // (by \"live\", we mean allocated and not yet freed - see HeapAlloc.liveSize).\n      // This avoids a lot of GC invocations\n      // (see {@link https://github.com/tweag/asterius/pull/379}).\n      this.updateNursery();\n      return;\n    }\n    this.reentrancyGuard.enter(1);\n\n    // Set the current generation number to 1, so that\n    // closures are evacuated in the older generation.\n    // Also, only major collections for now.\n    this.heapAlloc.setGenerationNo(1);\n\n    // Evacuate TSOs\n    for (const [_, tso_info] of this.scheduler.tsos) {\n      tso_info.addr = this.evacuateClosure(tso_info.addr);\n    }\n\n    // Evacuate stable pointers\n    for (const [sp, c] of this.stablePtrManager.spt.entries())\n      if (!(sp & 1)) this.stablePtrManager.spt.set(sp, this.evacuateClosure(c));\n\n    // Stage the movement of stable pointers.\n    // Step 1: Move all the pointers\n    // Step 2: Update the pointer -> stablepointer mapping\n    // We cannot do this at the same time, since moving the pointer while\n    // we walk the ptr2stable map can yield an infinite loop:\n    // eg. (ptr:0 stablename: 42) --MOVE--> (ptr:1 stablename:42) --MOVE--> (ptr:2 stablename:42) ...\n    let ptr2stableMoved = new Map();\n    for (const [ptr, stable] of this.stableNameManager.ptr2stable.entries()) {\n      const ptrMoved = this.evacuateClosure(ptr);\n      const stableMoved = this.evacuateClosure(stable);\n      ptr2stableMoved.set(ptrMoved, stableMoved);\n    }\n    this.stableNameManager.ptr2stable = ptr2stableMoved;\n\n    // do the rest of the scavenging work\n    this.scavengeLoop();\n\n    // update the ret pointer in the complete TSOs\n    for (const [_, tso_info] of this.scheduler.tsos) {\n      if (tso_info.ret) {\n        const tso = tso_info.addr;\n        const stackobj = Number(\n          this.memory.i64Load(tso + rtsConstants.offset_StgTSO_stackobj)\n        );\n        const sp = Number(\n          this.memory.i64Load(stackobj + rtsConstants.offset_StgStack_sp)\n        );\n        tso_info.ret = Number(this.memory.i64Load(sp + 8));\n      }\n    }\n\n    // mark unused MBlocks\n    this.heapAlloc.handleLiveness(this.liveMBlocks, this.deadMBlocks);\n    // set current generation back to 0\n    this.heapAlloc.setGenerationNo(0);\n    // allocate a new nursery\n    this.updateNursery();\n    // garbage collect unused JSVals\n    this.stablePtrManager.preserveJSVals(this.liveJSVals);\n    // cleanup\n    this.nonMovedObjects.clear();\n    this.liveMBlocks.clear();\n    this.deadMBlocks.clear();\n    this.liveJSVals.clear();\n    this.reentrancyGuard.exit(1);\n  }\n}\n","export const ARG_GEN = 0;\nexport const ARG_GEN_BIG = 1;\nexport const ARG_BCO = 2;\nexport const ARG_NONE = 3;\nexport const ARG_N = 4;\nexport const ARG_P = 5;\nexport const ARG_F = 6;\nexport const ARG_D = 7;\nexport const ARG_L = 8;\nexport const ARG_V16 = 9;\nexport const ARG_V32 = 10;\nexport const ARG_V64 = 11;\nexport const ARG_NN = 12;\nexport const ARG_NP = 13;\nexport const ARG_PN = 14;\nexport const ARG_PP = 15;\nexport const ARG_NNN = 16;\nexport const ARG_NNP = 17;\nexport const ARG_NPN = 18;\nexport const ARG_NPP = 19;\nexport const ARG_PNN = 20;\nexport const ARG_PNP = 21;\nexport const ARG_PPN = 22;\nexport const ARG_PPP = 23;\nexport const ARG_PPPP = 24;\nexport const ARG_PPPPP = 25;\nexport const ARG_PPPPPP = 26;\nexport const ARG_PPPPPPP = 27;\nexport const ARG_PPPPPPPP = 28;\n","import * as ClosureTypes from \"./rts.closuretypes.mjs\";\nimport * as rtsConstants from \"./rts.constants.mjs\";\nimport { Memory } from \"./rts.memory.mjs\";\n\n/*\n  The methods of this class are related to exception handling in Haskell.\n */\nexport class ExceptionHelper {\n  constructor(memory, heapalloc, exports, info_tables, symbol_table) {\n    this.memory = memory;\n    this.heapAlloc = heapalloc;\n    this.exports = exports;\n    this.infoTables = info_tables;\n    this.symbolTable = symbol_table;\n    this.decoder = new TextDecoder(\"utf-8\", { fatal: true });\n    Object.freeze(this);\n  }\n\n  /*\n    This implements a subset of `raiseExceptionHelper` in `rts/Schedule.c` of\n    ghc rts. The function is called by `stg_raisezh` in `Exception.cmm` in rts.\n\n    When a Haskell exception is raised, `stg_raisezh` is entered, and it calls\n    `raiseExceptionHelper` to traverse the stack from the top. For each update\n    frame, the thunk is updated with the \"exception closure\" (which throws when\n    entered). It exits when a catch frame or stop frame is encountered.\n\n    The stack pointer is rewritten to the head of last encountered frame, and\n    the frame type is returned to `stg_raisezh` for further processing.\n  */\n  raiseExceptionHelper(reg, tso, exception) {\n    const raise_closure = this.heapAlloc.allocate(\n      Math.ceil(rtsConstants.sizeof_StgThunk / 8) + 1\n    );\n    this.memory.i64Store(raise_closure, this.symbolTable.stg_raise_info);\n    this.memory.i64Store(\n      raise_closure + rtsConstants.offset_StgThunk_payload,\n      exception\n    );\n    const stackobj = Number(\n      this.memory.i64Load(tso + rtsConstants.offset_StgTSO_stackobj)\n    );\n    let p = Number(\n      this.memory.i64Load(stackobj + rtsConstants.offset_StgStack_sp)\n    );\n    while (true) {\n      const info = Number(this.memory.i64Load(p)),\n        type = this.memory.i32Load(\n          info + rtsConstants.offset_StgInfoTable_type\n        ),\n        raw_layout = this.memory.i64Load(\n          info + rtsConstants.offset_StgInfoTable_layout\n        );\n      if (this.infoTables && !this.infoTables.has(info))\n        throw new WebAssembly.RuntimeError(\n          `Invalid info table 0x${info.toString(16)}`\n        );\n      switch (type) {\n        case ClosureTypes.UPDATE_FRAME: {\n          const p1 = Number(\n            this.memory.i64Load(p + rtsConstants.offset_StgUpdateFrame_updatee)\n          );\n          this.exports.updateThunk(\n            this.symbolTable.MainCapability,\n            tso,\n            p1,\n            raise_closure\n          );\n          const size = Number(raw_layout & BigInt(0x3f));\n          p += (1 + size) << 3;\n          break;\n        }\n        case ClosureTypes.CATCH_FRAME:\n        case ClosureTypes.STOP_FRAME: {\n          this.memory.i64Store(stackobj + rtsConstants.offset_StgStack_sp, p);\n          return type;\n        }\n        case ClosureTypes.RET_SMALL: {\n          const size = Number(raw_layout & BigInt(0x3f));\n          p += (1 + size) << 3;\n          break;\n        }\n        case ClosureTypes.RET_BIG: {\n          const size = Number(\n            this.memory.i64Load(\n              Number(raw_layout) + rtsConstants.offset_StgLargeBitmap_size\n            )\n          );\n          p += (1 + size) << 3;\n          break;\n        }\n        case ClosureTypes.RET_FUN: {\n          const size = Number(\n            this.memory.i64Load(p + rtsConstants.offset_StgRetFun_size)\n          );\n          p += rtsConstants.sizeof_StgRetFun + (size << 3);\n          break;\n        }\n        default:\n          throw new WebAssembly.RuntimeError(\n            `raiseExceptionHelper: unsupported stack frame ${type} at 0x${p.toString(\n              16\n            )}`\n          );\n      }\n    }\n  }\n\n  /*\n    This implements `barf` in `rts/RtsMessages.c` of ghc rts. The function is\n    used to signal a fatal runtime error.\n\n    The original `barf` is a varargs C function which takes a format string.\n    Unfortunately, we don't implement handling for varargs yet, so we restrict\n    our `barf` to take exactly 1 argument: a pointer to a NUL-terminated string\n    which is the error message itself.\n\n    There exist special `barf`-related logic in various parts of the asterius\n    compiler:\n\n    * In the rts builtins (`Asterius.Builtins`) module, we import `barf` as\n      `__asterius_barf`, and make a `barf` function wrapper which handles the\n      i64/f64 conversion workaround.\n\n    * In the linker (`Asterius.Resolve`), when we encounter an unresolved\n      symbol, we dynamically generate a small data segment which is the\n      NUL-terminated error message containing the symbol itself. The data\n      segment's own symbol is prefixed with `__asterius_barf_`.\n\n    * In the backends (`Asterius.Backends.*`), when we encounter an unresolved\n      symbol `sym`, we try to find `__asterius_barf_sym`, and if found, we\n      insert a `barf` call there. So if an execution path leads to the\n      unresolved symbol, we're likely to get the symbol name from the js error\n      message.\n\n    * The rts cmm files call `barf` with either 0, 1, 2 arguments. In the\n      backends we remove extra arguments, and if there isn't any, we use a\n      `NULL` pointer as argument, which is interpreted as empty error message in\n      our implementation.\n   */\n  barf(s) {\n    if (s) {\n      const v0 = this.memory.i8View.subarray(Memory.unTag(s)),\n        len = v0.indexOf(0),\n        v1 = v0.subarray(0, len),\n        r = this.decoder.decode(v1);\n      throw new WebAssembly.RuntimeError(`barf: ${r}`);\n    } else {\n      throw new WebAssembly.RuntimeError(\"barf\");\n    }\n  }\n}\n","export class Messages {\n  constructor(memory, fs) {\n    this.memory = memory;\n    this.fs = fs;\n    this.encoder = new TextEncoder();\n    Object.freeze(this);\n  }\n\n  debugBelch2(fmt, arg) {\n    const s = `${this.memory.strLoad(arg)}\\n`;\n    this.fs.writeSync(2, this.encoder.encode(s));\n  }\n}\n","import { Memory } from \"./rts.memory.mjs\";\n\n// Implements primitives from primFloat.c\nexport class FloatCBits {\n  constructor(memory) {\n    this.memory = memory;\n    /* Constants copy-pasted by running this C program:\n        #include <float.h>\n        #include <stdio.h>\n\n        #define PRINT(name) printf(\"this.\" #name \" = %d;\\n\", name);\n        int main() {\n            PRINT(FLT_MIN_EXP); PRINT(FLT_MANT_DIG);\n            PRINT(DBL_MIN_EXP); PRINT(DBL_MANT_DIG);\n            return 0;\n        }\n        Other code copy-pasted from C calculations.\n        */\n\n    this.FLT_MIN_EXP = -125;\n    this.FLT_MANT_DIG = 24;\n    this.DBL_MIN_EXP = -1021;\n    this.DBL_MANT_DIG = 53;\n\n    this.MY_DMINEXP = this.DBL_MIN_EXP - this.DBL_MANT_DIG - 1;\n    /* DMINEXP is defined in values.h on Linux (for example) */\n    this.DHIGHBIT = 0x00100000;\n    this.DMSBIT = 0x80000000;\n\n    this.MY_FMINEXP = this.FLT_MIN_EXP - this.FLT_MANT_DIG - 1;\n    this.FHIGHBIT = 0x00800000;\n    this.FMSBIT = 0x80000000;\n\n    this.FLT_HIDDEN = 0x800000;\n    this.FLT_POWER2 = 0x1000000;\n\n    this.DBL_HIDDEN = 0x100000;\n    this.DBL_POWER2 = 0x200000;\n\n    this.LTOP_BIT = 0x80000000;\n\n    // buffer of 8 bytes to hold floats/doubles\n    this.buffer = new ArrayBuffer(8);\n    this.view = new DataView(this.buffer);\n\n    Object.seal(this);\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  isFloatNegativeZero(x) {\n    return Object.is(-0, x);\n  }\n\n  isFloatNaN(x) {\n    return x != x;\n  }\n\n  isDoubleNaN(x) {\n    return x != x;\n  }\n\n  isFloatFinite(x) {\n    return isFinite(x);\n  }\n\n  isDoubleFinite(x) {\n    return isFinite(x);\n  }\n\n  // Remember, floats have 3 states: {finite, infinite, NaN}.\n  isFloatInfinite(x) {\n    return !isFinite(x) && !this.isFloatNaN(x);\n  }\n\n  isDoubleInfinite(x) {\n    return !isFinite(x) && !this.isDoubleNaN(x);\n  }\n\n  // extract the mantissa from the little endian representation of the bits\n  // of the float.\n  // little endian: <0A 0B> stored as mem[p] = 0A, mem[p + 1] = OB\n  floatMantissaFromBits(bits) {\n    const mask = (1 << 23) - 1;\n    return bits & mask;\n  }\n\n  // extract the exponent from the little endian representation of the bits\n  // of the float.\n  floatExponentFromBits(bits) {\n    const mask = (1 << 8) - 1;\n    const sign = this.floatSignFromBits(bits);\n    return ((bits ^ (sign << 31)) >>> 23) & mask;\n  }\n\n  floatSignFromBits(bits) {\n    return bits >>> 31;\n  }\n\n  doubleMantissaFromBits(bits) {\n    const mask = (BigInt(1) << BigInt(52)) - BigInt(1);\n    return bits & mask;\n  }\n\n  doubleExponentFromBits(bits) {\n    const mask = BigInt((1 << 11) - 1);\n    const sign = this.doubleSignFromBits(bits);\n\n    const bitsNoSign = bits ^ (sign << BigInt(63));\n    return (bitsNoSign >> BigInt(52)) & mask;\n  }\n\n  doubleSignFromBits(bits) {\n    return bits >> BigInt(63);\n  }\n\n  // Check if a double is denormal.\n  isDoubleDenormalized(x) {\n    const bits = this.DoubleToIEEE(x);\n\n    const exponent = this.doubleExponentFromBits(bits);\n    const mantissa = this.doubleMantissaFromBits(bits);\n    return exponent === BigInt(0) && mantissa !== BigInt(0);\n  }\n\n  isFloatDenormalized(x) {\n    const bits = this.FloatToIEEE(x);\n    const exponent = this.floatExponentFromBits(bits);\n    const mantissa = this.floatMantissaFromBits(bits);\n    return exponent === 0 && mantissa !== 0;\n  }\n\n  // Does it really make sense to have two functions?  probably not...\n  isDoubleNegativeZero(x) {\n    return Object.is(-0, x);\n  }\n\n  FloatToIEEE(f) {\n    this.view.setFloat32(0, f);\n    return this.view.getUint32(0);\n  }\n\n  DoubleToIEEE(d) {\n    this.view.setFloat64(0, d);\n    return this.view.getBigUint64(0);\n  }\n\n  // return two 32-bit integers, [low, high] from a 64 bit double;\n  DoubleTo2Int(d) {\n    this.view.setFloat64(0, d);\n    const low = this.view.getUint32(0);\n    const high = this.view.getUint32(/*offset=*/ 4);\n    return [low, high];\n  }\n\n  IEEEToFloat(ieee) {\n    this.view.setInt32(0, ieee);\n    return this.view.getFloat32(0);\n  }\n\n  IEEEToDouble(ieee) {\n    this.view.setBigInt64(0, ieee);\n    return this.view.getFloat64(0);\n  }\n\n  __decodeFloat_Int(manp, expp, f) {\n    // https://github.com/ghc/ghc/blob/610ec224a49e092c802a336570fd9613ea15ef3c/rts/StgPrimFloat.c#L215\n    let man, exp, sign;\n    let high = this.FloatToIEEE(f);\n\n    if ((high & ~this.FMSBIT) == 0) {\n      man = 0;\n      exp = 0;\n    } else {\n      exp = ((high >>> 23) & 0xff) + this.MY_FMINEXP;\n\n      // [sign = high] with a [uint -> int] conversion.\n      this.view.setUint32(0, high);\n      sign = this.view.getInt32(0);\n\n      high &= this.FHIGHBIT - 1;\n      if (exp != this.MY_FMINEXP)\n        /* don't add hidden bit to denorms */\n        high |= this.FHIGHBIT;\n      else {\n        exp += 1;\n        /* A denorm, normalize the mantissa */\n        while (!(high & this.FHIGHBIT)) {\n          high <<= 1;\n          exp -= 1;\n        }\n      }\n\n      man = high;\n      if (sign < 0) {\n        man = -man;\n      }\n    }\n\n    // TODO: double check! Is this i32 or i64? I suspect it is i32.\n    this.memory.i64Store(manp, man);\n    this.memory.i64Store(expp, exp);\n  }\n\n  // https://github.com/ghc/ghc/blob/610ec224a49e092c802a336570fd9613ea15ef3c/rts/StgPrimFloat.c\n  // From StgPrimFloat.c\n  // returns [man_sign, man_high,  man_low, exp]\n  __decodeDouble_2IntJS(dbl) {\n    let sign, iexp, man_low, man_high, man_sign;\n    const ints = this.DoubleTo2Int(dbl);\n    let low = ints[1];\n    let high = ints[0];\n    let exp = 0;\n\n    if (low == 0 && (high & ~this.DMSBIT) == 0) {\n      man_low = 0;\n      man_high = 0;\n      man_sign = 0;\n      iexp = 0;\n    } else {\n      iexp = ((high >>> 20) & 0x7ff) + this.MY_DMINEXP;\n\n      // unsigned to signed conversion\n      this.view.setUint32(0, high);\n      sign = this.view.getInt32(0);\n\n      high &= this.DHIGHBIT - 1;\n      if (iexp != this.MY_DMINEXP)\n        /* don't add hidden bit to denorms */\n        high |= this.DHIGHBIT;\n      else {\n        iexp++;\n        /* A denorm, normalize the mantissa */\n        while (!(high & this.DHIGHBIT)) {\n          high <<= 1;\n          if (low & this.DMSBIT) high++;\n          low <<= 1;\n          iexp--;\n        }\n      }\n      exp = iexp;\n      man_low = low;\n      man_high = high;\n      man_sign = sign < 0 ? -1 : 1;\n    }\n\n    return [man_sign, man_high, man_low, exp];\n  }\n\n  __decodeDouble_2Int(p_man_sign, p_man_high, p_man_low, p_exp, dbl) {\n    const [man_sign, man_high, man_low, exp] = this.__decodeDouble_2IntJS(dbl);\n    this.memory.dataView.setBigInt64(Memory.unTag(p_man_sign), BigInt(man_sign), true);\n    this.memory.i64Store(p_man_high, man_high);\n    this.memory.i64Store(p_man_low, man_low);\n    this.memory.i64Store(p_exp, exp);\n  }\n\n  // From GHC/Integer/Type.hs\n  decodeDoubleInteger(d) {\n    const out = this.__decodeDouble_2IntJS(d);\n    const man_sign = out[0];\n    const man_high = out[1];\n    const man_low = out[2];\n    const exp = out[3];\n\n    const acc =\n      BigInt(man_sign) *\n      (BigInt(man_high) * (BigInt(1) << BigInt(32)) + BigInt(man_low));\n    return [acc, exp];\n  }\n\n  // from cbits/primFloat\n  rintFloat(f) {\n    const bits = this.FloatToIEEE(f);\n    let fexp = BigInt(this.floatExponentFromBits(bits));\n    let fman = BigInt(this.floatMantissaFromBits(bits));\n    let fsign = BigInt(this.floatSignFromBits(bits));\n\n    // put back the float together\n    const reconstructFloat = () => {\n      return this.IEEEToFloat(\n        Number((fsign << BigInt(31)) | (fexp << BigInt(23)) | fman)\n      );\n    };\n\n    /* if real exponent > 22, it's already integral, infinite or nan */\n    if (fexp > 149) {\n      /* 22 + 127 */\n      return f;\n    }\n    if (fexp < 126) {\n      /* (-1) + 127, abs(f) < 0.5 */\n      /* only used for rounding to Integral a, so don't care about -0.0 */\n      return 0.0;\n    }\n    /* 0.5 <= abs(f) < 2^23 */\n    /// let half, mask, mant, frac;\n    const half = BigInt(1) << (BigInt(149) - fexp); /* bit for 0.5 */\n    const mask = BigInt(2) * half - BigInt(1); /* fraction bits */\n    let mant = fman | BigInt(this.FLT_HIDDEN); /* add hidden bit */\n    let frac = mant & mask; /* get fraction */\n    mant ^= frac; /* truncate mantissa */\n\n    if (frac < half || (frac == half && (mant & (BigInt(2) * half)) == 0)) {\n      /* this means we have to truncate */\n      if (mant == 0) {\n        /* f == ±0.5, return 0.0 */\n        return 0.0;\n      } else {\n        /* remove hidden bit and set mantissa */\n        // u.ieee.mantissa = mant ^ FLT_HIDDEN;\n        fman = mant ^ BigInt(this.FLT_HIDDEN);\n        return reconstructFloat();\n      }\n    } else {\n      /* round away from zero, increment mantissa */\n      mant += BigInt(2) * half;\n      if (mant == this.FLT_POWER2) {\n        /* next power of 2, increase exponent and set mantissa to 0 */\n        fman = BigInt(0);\n        fexp += BigInt(1);\n        return reconstructFloat();\n      } else {\n        /* remove hidden bit and set mantissa */\n        fman = mant ^ BigInt(this.FLT_HIDDEN);\n        return reconstructFloat();\n      }\n    }\n  }\n\n  rintDouble(d) {\n    // Code stolen from cbits/primFloat.\n    const bits = this.DoubleToIEEE(d);\n    let exp = this.doubleExponentFromBits(bits);\n    let manFull = this.doubleMantissaFromBits(bits);\n    this.view.setBigUint64(0, manFull, /*little endian=*/ true);\n    let mant1 = BigInt(this.view.getUint32(0, /*little endian=*/ true));\n    let mant0 = BigInt(this.view.getUint32(4, /*little endian=*/ true));\n    let sign = this.doubleSignFromBits(bits);\n\n    // put back the double together\n    const reconstructDouble = () => {\n      this.view.setInt32(0, Number(mant1), true);\n      this.view.setInt32(4, Number(mant0), true);\n      const mantFull = this.view.getBigUint64(0, true);\n\n      const bits = (sign << BigInt(63)) | (exp << BigInt(52)) | mantFull;\n      const n = Number(this.IEEEToDouble(bits));\n\n      return n;\n    };\n\n    // union stg_ieee754_dbl u;\n    // u.d = d;\n    /* if real exponent > 51, it's already integral, infinite or nan */\n    // if (u.ieee.exponent > 1074) /* 51 + 1023 */\n    if (exp > 1074) {\n      /* 51 + 1023 */\n      return d;\n    }\n    // if (u.ieee.exponent < 1022)  /* (-1) + 1023, abs(d) < 0.5 */\n    if (exp < 1022) {\n      /* (-1) + 1023, abs(d) < 0.5 */\n      /* only used for rounding to Integral a, so don't care about -0.0 */\n      return 0.0;\n    }\n    // unsigned int half, mask, mant, frac;\n    if (exp < 1043) {\n      /* 20 + 1023, real exponent < 20 */\n      /* the fractional part meets the higher part of the mantissa */\n      const half = BigInt(1) << (BigInt(1042) - exp); /* bit for 0.5 */\n      const mask = BigInt(2) * half - BigInt(1); /* fraction bits */\n      let mant = mant0 | BigInt(this.DBL_HIDDEN); /* add hidden bit */\n      const frac = mant & mask; /* get fraction */\n      mant ^= frac; /* truncate mantissa */\n\n      if (\n        frac < half ||\n        (frac == half &&\n        mant1 == 0 /* a tie */ &&\n          (mant & (BigInt(2) * half)) == 0)\n      ) {\n        /* truncate */\n        if (mant == 0) {\n          /* d = ±0.5, return 0.0 */\n          return 0.0;\n        }\n        /* remove hidden bit and set mantissa */\n        mant0 = mant ^ BigInt(this.DBL_HIDDEN);\n        mant1 = BigInt(0);\n\n        // reassemble double here\n        // return u.d;\n        return reconstructDouble();\n      } /* round away from zero */ else {\n        /* zero low mantissa bits */\n        mant1 = BigInt(0);\n        /* increment integer part of mantissa */\n        mant += BigInt(2) * half;\n        if (mant == this.DBL_POWER2) {\n          /* power of 2, increment exponent and zero mantissa */\n          mant0 = BigInt(0);\n          exp += BigInt(1);\n          // reassamble\n          return reconstructDouble();\n        }\n        /* remove hidden bit */\n        mant0 = mant ^ BigInt(this.DBL_HIDDEN);\n        // reassemble\n        return reconstructDouble();\n      }\n    } else {\n      /* 20 <= real exponent < 52, fractional part entirely in mantissa1 */\n      const half = BigInt(1) << (BigInt(1074) - exp); /* bit for 0.5 */\n      const mask = BigInt(2) * half - BigInt(1); /* fraction bits */\n      let mant = mant1; /* no hidden bit here */\n      let frac = mant & mask; /* get fraction */\n      mant ^= frac; /* truncate mantissa */\n\n      if (\n        frac < half ||\n        (frac == half /* tie */ &&\n          (half == this.LTOP_BIT\n            ? mant0 & 1 /* yuck */\n            : mant & (2 * half)) == 0)\n      ) {\n        /* truncate */\n        mant1 = mant;\n        return reconstructDouble();\n      } else {\n        /* round away from zero */\n        /* increment mantissa */\n        mant += BigInt(2) * half;\n        mant1 = mant;\n\n        // ORIGINAL CODE: if (mant == 0) { where they exploit 32-bit unsigned\n        // representation.\n        if (mant % (BigInt(1) << BigInt(32)) == 0) {\n          /* low part of mantissa overflowed */\n          /* increment high part of mantissa */\n          mant = mant0 + BigInt(1);\n          if (mant == this.DBL_HIDDEN) {\n            /* hit power of 2 */\n            /* zero mantissa */\n            mant0 = BigInt(0);\n            /* and increment exponent */\n            exp += BigInt(1);\n\n            return reconstructDouble();\n          } else {\n            u.ieee.mantissa0 = mant;\n            return reconstructDouble();\n          }\n        } else {\n          return reconstructDouble();\n        }\n      }\n    }\n  }\n}\n","// Generated by genunicode.hs\n\n// prettier-ignore\nconst _first = Uint32Array.of(0,32,33,36,37,40,41,42,43,44,45,46,48,58,60,63,65,91,92,93,94,95,96,97,123,124,125,126,127,160,161,162,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,184,185,186,187,188,191,192,215,216,223,224,247,248,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,428,429,430,431,432,433,435,436,437,438,439,440,441,442,443,444,445,446,447,448,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,570,571,572,573,574,575,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,600,601,602,603,604,605,608,609,610,611,612,613,614,615,616,617,618,619,620,621,623,624,625,626,627,629,630,637,638,640,641,642,643,644,647,648,649,650,652,653,658,659,660,661,669,670,671,688,706,710,722,736,741,748,749,750,751,768,837,838,880,881,882,883,884,885,886,887,890,891,894,895,900,902,903,904,908,910,912,913,940,941,944,945,962,963,972,973,975,976,977,978,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1024,1040,1072,1104,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1160,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1329,1369,1370,1376,1377,1415,1417,1418,1421,1423,1425,1470,1471,1472,1473,1475,1476,1478,1479,1488,1523,1536,1542,1545,1547,1548,1550,1552,1563,1564,1566,1568,1600,1601,1611,1632,1642,1646,1648,1649,1748,1749,1750,1757,1758,1759,1765,1767,1769,1770,1774,1776,1786,1789,1791,1792,1807,1808,1809,1810,1840,1869,1958,1969,1984,1994,2027,2036,2038,2039,2042,2045,2046,2048,2070,2074,2075,2084,2085,2088,2089,2096,2112,2137,2142,2144,2259,2274,2275,2307,2308,2362,2363,2364,2365,2366,2369,2377,2381,2382,2384,2385,2392,2402,2404,2406,2416,2417,2418,2433,2434,2437,2492,2493,2494,2497,2503,2509,2510,2519,2524,2530,2534,2544,2546,2548,2554,2555,2556,2557,2558,2563,2565,2620,2622,2625,2649,2662,2672,2674,2677,2678,2689,2691,2693,2748,2749,2750,2753,2761,2765,2768,2786,2790,2800,2801,2809,2810,2818,2821,2876,2877,2878,2879,2880,2881,2887,2893,2903,2908,2914,2918,2928,2929,2930,2946,2947,3006,3008,3009,3021,3024,3031,3046,3056,3059,3065,3066,3072,3073,3076,3077,3134,3137,3142,3160,3170,3174,3191,3192,3199,3200,3201,3202,3204,3205,3260,3261,3262,3263,3264,3270,3271,3276,3285,3294,3298,3302,3313,3328,3330,3333,3387,3389,3390,3393,3398,3405,3406,3407,3412,3415,3416,3423,3426,3430,3440,3449,3450,3458,3461,3530,3535,3538,3544,3558,3570,3572,3585,3633,3634,3636,3647,3648,3654,3655,3663,3664,3674,3713,3761,3762,3764,3773,3782,3784,3792,3804,3841,3844,3859,3860,3861,3864,3866,3872,3882,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3904,3953,3967,3968,3973,3974,3976,3981,4030,4038,4039,4048,4053,4057,4096,4139,4141,4145,4146,4152,4153,4155,4157,4159,4160,4170,4176,4182,4184,4186,4190,4193,4194,4197,4199,4206,4209,4213,4226,4227,4229,4231,4237,4238,4239,4240,4250,4253,4254,4256,4304,4347,4348,4349,4352,4957,4960,4969,4992,5008,5024,5104,5112,5120,5121,5741,5743,5760,5761,5787,5788,5792,5867,5870,5873,5906,5920,5938,5941,5952,5970,5984,6002,6016,6068,6070,6071,6078,6086,6087,6089,6100,6103,6104,6107,6108,6109,6112,6128,6144,6150,6151,6155,6158,6160,6176,6211,6212,6277,6279,6313,6314,6432,6435,6439,6441,6450,6451,6457,6464,6468,6470,6480,6608,6618,6622,6656,6679,6681,6683,6686,6688,6741,6742,6743,6744,6753,6754,6755,6757,6765,6771,6784,6816,6823,6824,6832,6846,6912,6916,6917,6964,6965,6966,6971,6972,6973,6978,6979,6981,6992,7002,7009,7019,7028,7040,7042,7043,7073,7074,7078,7080,7082,7083,7086,7088,7098,7142,7143,7144,7146,7149,7150,7151,7154,7164,7168,7204,7212,7220,7222,7227,7232,7245,7248,7258,7288,7294,7296,7297,7298,7299,7301,7302,7303,7304,7312,7360,7376,7379,7380,7393,7394,7401,7405,7406,7412,7413,7415,7416,7418,7424,7468,7531,7544,7545,7546,7549,7550,7566,7567,7579,7616,7680,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7830,7835,7836,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7936,7944,7952,7960,7968,7976,7984,7992,8000,8008,8016,8017,8018,8019,8020,8021,8022,8023,8025,8032,8040,8048,8050,8054,8056,8058,8060,8064,8072,8080,8088,8096,8104,8112,8114,8115,8116,8120,8122,8124,8125,8126,8127,8130,8131,8132,8136,8140,8141,8144,8146,8152,8154,8157,8160,8162,8165,8166,8168,8170,8172,8173,8178,8179,8180,8184,8186,8188,8189,8192,8203,8208,8214,8216,8217,8218,8219,8221,8222,8223,8224,8232,8233,8234,8239,8240,8249,8250,8251,8255,8257,8260,8261,8262,8263,8274,8275,8276,8277,8287,8288,8304,8305,8308,8314,8317,8318,8319,8320,8330,8333,8334,8336,8352,8400,8413,8417,8418,8421,8448,8450,8451,8455,8456,8458,8459,8462,8464,8467,8468,8469,8470,8472,8473,8478,8484,8485,8486,8487,8488,8489,8490,8491,8492,8494,8495,8496,8498,8499,8500,8501,8505,8506,8508,8510,8512,8517,8518,8522,8523,8524,8526,8527,8528,8544,8560,8576,8579,8580,8581,8585,8586,8592,8597,8602,8604,8608,8609,8611,8612,8614,8615,8622,8623,8654,8656,8658,8659,8660,8661,8692,8960,8968,8969,8970,8971,8972,8992,8994,9001,9002,9003,9084,9085,9115,9140,9180,9186,9312,9372,9398,9424,9450,9472,9655,9656,9665,9666,9720,9728,9839,9840,10088,10089,10090,10091,10092,10093,10094,10095,10096,10097,10098,10099,10100,10101,10102,10132,10176,10181,10182,10183,10214,10215,10216,10217,10218,10219,10220,10221,10222,10223,10224,10240,10496,10627,10628,10629,10630,10631,10632,10633,10634,10635,10636,10637,10638,10639,10640,10641,10642,10643,10644,10645,10646,10647,10648,10649,10712,10713,10714,10715,10716,10748,10749,10750,11008,11056,11077,11079,11085,11264,11312,11360,11361,11362,11363,11364,11365,11366,11367,11368,11369,11370,11371,11372,11373,11374,11375,11376,11377,11378,11379,11380,11381,11382,11383,11388,11390,11392,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11492,11493,11499,11500,11501,11502,11503,11506,11507,11513,11517,11518,11520,11568,11631,11632,11647,11648,11744,11776,11778,11779,11780,11781,11782,11785,11786,11787,11788,11789,11790,11799,11800,11802,11803,11804,11805,11806,11808,11809,11810,11811,11812,11813,11814,11815,11816,11817,11818,11823,11824,11834,11836,11840,11841,11842,11843,11904,12288,12289,12292,12293,12294,12295,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,12306,12308,12309,12310,12311,12312,12313,12314,12315,12316,12317,12318,12320,12321,12330,12334,12336,12337,12342,12344,12347,12348,12349,12350,12353,12441,12443,12445,12447,12448,12449,12539,12540,12543,12688,12690,12694,12704,12736,12784,12800,12832,12842,12872,12880,12881,12896,12928,12938,12977,12992,13312,19904,19968,40981,40982,42128,42192,42232,42238,42240,42508,42509,42512,42528,42538,42560,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42606,42607,42608,42611,42612,42622,42623,42624,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42652,42654,42656,42726,42736,42738,42752,42775,42784,42786,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42800,42802,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42864,42865,42873,42874,42875,42876,42877,42878,42879,42880,42881,42882,42883,42884,42885,42886,42887,42888,42889,42891,42892,42893,42894,42895,42896,42897,42898,42899,42900,42901,42902,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42923,42924,42925,42926,42927,42928,42929,42930,42931,42932,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42946,42947,42948,42949,42950,42999,43000,43002,43003,43010,43011,43014,43015,43019,43020,43043,43045,43047,43048,43056,43062,43064,43065,43072,43124,43136,43138,43188,43204,43214,43216,43232,43250,43256,43259,43260,43261,43263,43264,43274,43302,43310,43312,43335,43346,43359,43360,43392,43395,43396,43443,43444,43446,43450,43452,43453,43457,43471,43472,43486,43488,43493,43494,43495,43504,43514,43561,43567,43569,43571,43573,43584,43587,43588,43596,43597,43600,43612,43616,43632,43633,43639,43642,43643,43644,43645,43646,43696,43697,43698,43701,43703,43705,43710,43712,43713,43714,43741,43742,43744,43755,43756,43758,43760,43762,43763,43765,43766,43777,43824,43859,43860,43867,43868,43872,43888,43968,44003,44005,44006,44008,44009,44011,44012,44013,44016,44032,64256,64285,64286,64287,64297,64298,64434,64467,64830,64831,64848,65020,65021,65024,65040,65047,65048,65049,65056,65072,65073,65075,65077,65078,65079,65080,65081,65082,65083,65084,65085,65086,65087,65088,65089,65090,65091,65092,65093,65095,65096,65097,65101,65104,65112,65113,65114,65115,65116,65117,65118,65119,65122,65123,65124,65128,65129,65130,65136,65279,65281,65284,65285,65288,65289,65290,65291,65292,65293,65294,65296,65306,65308,65311,65313,65339,65340,65341,65342,65343,65344,65345,65371,65372,65373,65374,65375,65376,65377,65378,65379,65380,65382,65392,65393,65438,65440,65504,65506,65507,65508,65509,65512,65513,65517,65529,65532,65536,65792,65799,65847,65856,65909,65913,65930,65932,66045,66176,66272,66273,66304,66336,66349,66369,66370,66378,66384,66422,66432,66463,66464,66512,66513,66560,66600,66640,66720,66736,66776,66816,66927,67072,67671,67672,67680,67703,67705,67712,67751,67808,67835,67840,67862,67871,67872,67903,67968,68028,68030,68032,68096,68097,68112,68152,68160,68176,68192,68221,68223,68224,68253,68288,68296,68297,68325,68331,68336,68352,68409,68416,68440,68448,68472,68480,68505,68521,68608,68736,68800,68858,68864,68900,68912,69216,69376,69405,69415,69446,69457,69461,69600,69632,69633,69634,69635,69688,69703,69714,69734,69759,69762,69763,69808,69811,69815,69817,69819,69821,69822,69837,69840,69872,69888,69891,69927,69932,69933,69942,69952,69956,69957,69968,70003,70004,70006,70016,70018,70019,70067,70070,70079,70081,70085,70089,70093,70096,70106,70107,70108,70109,70113,70144,70188,70191,70194,70196,70197,70198,70200,70206,70272,70313,70320,70367,70368,70371,70384,70400,70402,70405,70459,70461,70462,70464,70465,70480,70487,70493,70498,70502,70656,70709,70712,70720,70722,70725,70726,70727,70731,70736,70747,70750,70751,70832,70835,70841,70842,70843,70847,70849,70850,70852,70854,70855,70864,71040,71087,71090,71096,71100,71102,71103,71105,71128,71132,71168,71216,71219,71227,71229,71230,71231,71233,71236,71248,71264,71296,71339,71340,71341,71342,71344,71350,71351,71352,71360,71424,71453,71456,71458,71462,71463,71472,71482,71484,71487,71680,71724,71727,71736,71737,71739,71840,71872,71904,71914,71935,72145,72146,72147,72148,72156,72160,72161,72164,72192,72193,72203,72243,72249,72250,72251,72255,72263,72272,72273,72279,72281,72284,72330,72343,72344,72346,72349,72350,72384,72751,72752,72766,72767,72768,72769,72784,72794,72816,72818,72850,72873,72874,72881,72882,72884,72885,72960,73009,73030,73031,73040,73056,73098,73104,73107,73109,73110,73111,73112,73120,73440,73459,73461,73463,73664,73685,73693,73697,73727,73728,74752,74864,74880,78896,82944,92768,92782,92880,92912,92917,92928,92976,92983,92988,92992,92996,92997,93008,93019,93027,93760,93792,93824,93847,93952,94031,94032,94033,94095,94099,94178,94179,94208,113820,113821,113823,113824,118784,119141,119143,119146,119149,119155,119163,119171,119173,119180,119210,119214,119362,119365,119520,119552,119648,119808,119834,119860,119886,119912,119938,119964,119990,120016,120042,120068,120094,120120,120146,120172,120198,120224,120250,120276,120302,120328,120354,120380,120406,120432,120458,120488,120513,120514,120539,120540,120546,120571,120572,120597,120598,120604,120629,120630,120655,120656,120662,120687,120688,120713,120714,120720,120745,120746,120771,120772,120778,120779,120782,120832,121344,121399,121403,121453,121461,121462,121476,121477,121479,121499,123136,123184,123191,123200,123214,123628,123632,123647,124928,125127,125136,125184,125218,125252,125264,125278,126065,126124,126125,126128,126129,126254,126255,126464,126704,126976,127232,127248,127995,128000,131072,917505,917760);\n// prettier-ignore\nconst _last = Uint32Array.of(31,32,35,36,39,40,41,42,43,44,45,47,57,59,62,64,90,91,92,93,94,95,96,122,123,124,125,126,159,160,161,165,166,167,168,169,170,171,172,173,174,175,176,177,179,180,181,183,184,185,186,187,190,191,214,215,222,223,246,247,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,434,435,436,437,438,439,440,441,442,443,444,445,446,447,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,569,570,571,572,573,574,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,599,600,601,602,603,604,607,608,609,610,611,612,613,614,615,616,617,618,619,620,622,623,624,625,626,628,629,636,637,639,640,641,642,643,646,647,648,649,651,652,657,658,659,660,668,669,670,687,705,709,721,735,740,747,748,749,750,767,836,837,879,880,881,882,883,884,885,886,887,890,893,894,895,901,902,903,906,908,911,912,939,940,943,944,961,962,971,972,974,975,976,977,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1023,1039,1071,1103,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1159,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1366,1369,1375,1376,1414,1416,1417,1418,1422,1423,1469,1470,1471,1472,1474,1475,1477,1478,1479,1522,1524,1541,1544,1546,1547,1549,1551,1562,1563,1564,1567,1599,1600,1610,1631,1641,1645,1647,1648,1747,1748,1749,1756,1757,1758,1764,1766,1768,1769,1773,1775,1785,1788,1790,1791,1805,1807,1808,1809,1839,1866,1957,1968,1969,1993,2026,2035,2037,2038,2041,2042,2045,2047,2069,2073,2074,2083,2084,2087,2088,2093,2110,2136,2139,2142,2237,2273,2274,2306,2307,2361,2362,2363,2364,2365,2368,2376,2380,2381,2383,2384,2391,2401,2403,2405,2415,2416,2417,2432,2433,2435,2489,2492,2493,2496,2500,2508,2509,2510,2519,2529,2531,2543,2545,2547,2553,2554,2555,2556,2557,2562,2563,2617,2620,2624,2641,2654,2671,2673,2676,2677,2678,2690,2691,2745,2748,2749,2752,2760,2764,2765,2785,2787,2799,2800,2801,2809,2817,2819,2873,2876,2877,2878,2879,2880,2884,2892,2902,2903,2913,2915,2927,2928,2929,2935,2946,3001,3007,3008,3020,3021,3024,3031,3055,3058,3064,3065,3066,3072,3075,3076,3133,3136,3140,3158,3169,3171,3183,3191,3198,3199,3200,3201,3203,3204,3257,3260,3261,3262,3263,3268,3270,3275,3277,3286,3297,3299,3311,3314,3329,3331,3386,3388,3389,3392,3396,3404,3405,3406,3407,3414,3415,3422,3425,3427,3439,3448,3449,3455,3459,3526,3530,3537,3542,3551,3567,3571,3572,3632,3633,3635,3642,3647,3653,3654,3662,3663,3673,3675,3760,3761,3763,3772,3780,3782,3789,3801,3840,3843,3858,3859,3860,3863,3865,3871,3881,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3903,3948,3966,3967,3972,3973,3975,3980,4028,4037,4038,4047,4052,4056,4058,4138,4140,4144,4145,4151,4152,4154,4156,4158,4159,4169,4175,4181,4183,4185,4189,4192,4193,4196,4198,4205,4208,4212,4225,4226,4228,4230,4236,4237,4238,4239,4249,4252,4253,4255,4301,4346,4347,4348,4351,4954,4959,4968,4988,5007,5017,5103,5109,5117,5120,5740,5742,5759,5760,5786,5787,5788,5866,5869,5872,5905,5908,5937,5940,5942,5969,5971,6000,6003,6067,6069,6070,6077,6085,6086,6088,6099,6102,6103,6106,6107,6108,6109,6121,6137,6149,6150,6154,6157,6158,6169,6210,6211,6276,6278,6312,6313,6430,6434,6438,6440,6449,6450,6456,6459,6464,6469,6479,6601,6617,6618,6655,6678,6680,6682,6683,6687,6740,6741,6742,6743,6752,6753,6754,6756,6764,6770,6783,6809,6822,6823,6829,6845,6846,6915,6916,6963,6964,6965,6970,6971,6972,6977,6978,6980,6987,7001,7008,7018,7027,7036,7041,7042,7072,7073,7077,7079,7081,7082,7085,7087,7097,7141,7142,7143,7145,7148,7149,7150,7153,7155,7167,7203,7211,7219,7221,7223,7231,7241,7247,7257,7287,7293,7295,7296,7297,7298,7300,7301,7302,7303,7304,7359,7367,7378,7379,7392,7393,7400,7404,7405,7411,7412,7414,7415,7417,7418,7467,7530,7543,7544,7545,7548,7549,7565,7566,7578,7615,7679,7680,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7834,7835,7837,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7943,7951,7957,7965,7975,7983,7991,7999,8005,8013,8016,8017,8018,8019,8020,8021,8022,8023,8031,8039,8047,8049,8053,8055,8057,8059,8061,8071,8079,8087,8095,8103,8111,8113,8114,8115,8119,8121,8123,8124,8125,8126,8129,8130,8131,8135,8139,8140,8143,8145,8151,8153,8155,8159,8161,8164,8165,8167,8169,8171,8172,8175,8178,8179,8183,8185,8187,8188,8190,8202,8207,8213,8215,8216,8217,8218,8220,8221,8222,8223,8231,8232,8233,8238,8239,8248,8249,8250,8254,8256,8259,8260,8261,8262,8273,8274,8275,8276,8286,8287,8303,8304,8305,8313,8316,8317,8318,8319,8329,8332,8333,8334,8348,8383,8412,8416,8417,8420,8432,8449,8450,8454,8455,8457,8458,8461,8463,8466,8467,8468,8469,8471,8472,8477,8483,8484,8485,8486,8487,8488,8489,8490,8491,8493,8494,8495,8497,8498,8499,8500,8504,8505,8507,8509,8511,8516,8517,8521,8522,8523,8525,8526,8527,8543,8559,8575,8578,8579,8580,8584,8585,8587,8596,8601,8603,8607,8608,8610,8611,8613,8614,8621,8622,8653,8655,8657,8658,8659,8660,8691,8959,8967,8968,8969,8970,8971,8991,8993,9000,9001,9002,9083,9084,9114,9139,9179,9185,9290,9371,9397,9423,9449,9471,9654,9655,9664,9665,9719,9727,9838,9839,10087,10088,10089,10090,10091,10092,10093,10094,10095,10096,10097,10098,10099,10100,10101,10131,10175,10180,10181,10182,10213,10214,10215,10216,10217,10218,10219,10220,10221,10222,10223,10239,10495,10626,10627,10628,10629,10630,10631,10632,10633,10634,10635,10636,10637,10638,10639,10640,10641,10642,10643,10644,10645,10646,10647,10648,10711,10712,10713,10714,10715,10747,10748,10749,11007,11055,11076,11078,11084,11263,11310,11358,11360,11361,11362,11363,11364,11365,11366,11367,11368,11369,11370,11371,11372,11373,11374,11375,11376,11377,11378,11379,11380,11381,11382,11387,11389,11391,11392,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11492,11498,11499,11500,11501,11502,11505,11506,11507,11516,11517,11519,11565,11623,11631,11632,11647,11742,11775,11777,11778,11779,11780,11781,11784,11785,11786,11787,11788,11789,11798,11799,11801,11802,11803,11804,11805,11807,11808,11809,11810,11811,11812,11813,11814,11815,11816,11817,11822,11823,11833,11835,11839,11840,11841,11842,11855,12283,12288,12291,12292,12293,12294,12295,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,12307,12308,12309,12310,12311,12312,12313,12314,12315,12316,12317,12319,12320,12329,12333,12335,12336,12341,12343,12346,12347,12348,12349,12351,12438,12442,12444,12446,12447,12448,12538,12539,12542,12686,12689,12693,12703,12730,12771,12799,12830,12841,12871,12879,12880,12895,12927,12937,12976,12991,13311,19893,19967,40980,40981,42124,42182,42231,42237,42239,42507,42508,42511,42527,42537,42539,42560,42561,42562,42563,42564,42565,42566,42567,42568,42569,42570,42571,42572,42573,42574,42575,42576,42577,42578,42579,42580,42581,42582,42583,42584,42585,42586,42587,42588,42589,42590,42591,42592,42593,42594,42595,42596,42597,42598,42599,42600,42601,42602,42603,42604,42605,42606,42607,42610,42611,42621,42622,42623,42624,42625,42626,42627,42628,42629,42630,42631,42632,42633,42634,42635,42636,42637,42638,42639,42640,42641,42642,42643,42644,42645,42646,42647,42648,42649,42650,42651,42653,42655,42725,42735,42737,42743,42774,42783,42785,42786,42787,42788,42789,42790,42791,42792,42793,42794,42795,42796,42797,42798,42799,42801,42802,42803,42804,42805,42806,42807,42808,42809,42810,42811,42812,42813,42814,42815,42816,42817,42818,42819,42820,42821,42822,42823,42824,42825,42826,42827,42828,42829,42830,42831,42832,42833,42834,42835,42836,42837,42838,42839,42840,42841,42842,42843,42844,42845,42846,42847,42848,42849,42850,42851,42852,42853,42854,42855,42856,42857,42858,42859,42860,42861,42862,42863,42864,42872,42873,42874,42875,42876,42877,42878,42879,42880,42881,42882,42883,42884,42885,42886,42887,42888,42890,42891,42892,42893,42894,42895,42896,42897,42898,42899,42900,42901,42902,42903,42904,42905,42906,42907,42908,42909,42910,42911,42912,42913,42914,42915,42916,42917,42918,42919,42920,42921,42922,42923,42924,42925,42926,42927,42928,42929,42930,42931,42932,42933,42934,42935,42936,42937,42938,42939,42940,42941,42942,42943,42946,42947,42948,42949,42950,42999,43001,43002,43009,43010,43013,43014,43018,43019,43042,43044,43046,43047,43051,43061,43063,43064,43065,43123,43127,43137,43187,43203,43205,43215,43225,43249,43255,43258,43259,43260,43262,43263,43273,43301,43309,43311,43334,43345,43347,43359,43388,43394,43395,43442,43443,43445,43449,43451,43452,43456,43469,43471,43481,43487,43492,43493,43494,43503,43513,43560,43566,43568,43570,43572,43574,43586,43587,43595,43596,43597,43609,43615,43631,43632,43638,43641,43642,43643,43644,43645,43695,43696,43697,43700,43702,43704,43709,43711,43712,43713,43740,43741,43743,43754,43755,43757,43759,43761,43762,43764,43765,43766,43822,43858,43859,43866,43867,43871,43879,43967,44002,44004,44005,44007,44008,44010,44011,44012,44013,44025,64217,64279,64285,64286,64296,64297,64433,64449,64829,64830,64831,65019,65020,65021,65039,65046,65047,65048,65049,65071,65072,65074,65076,65077,65078,65079,65080,65081,65082,65083,65084,65085,65086,65087,65088,65089,65090,65091,65092,65094,65095,65096,65100,65103,65111,65112,65113,65114,65115,65116,65117,65118,65121,65122,65123,65126,65128,65129,65131,65276,65279,65283,65284,65287,65288,65289,65290,65291,65292,65293,65295,65305,65307,65310,65312,65338,65339,65340,65341,65342,65343,65344,65370,65371,65372,65373,65374,65375,65376,65377,65378,65379,65381,65391,65392,65437,65439,65500,65505,65506,65507,65508,65510,65512,65516,65518,65531,65533,65786,65794,65843,65855,65908,65912,65929,65931,66044,66045,66256,66272,66299,66335,66339,66368,66369,66377,66378,66421,66426,66461,66463,66511,66512,66517,66599,66639,66717,66729,66771,66811,66915,66927,67669,67671,67679,67702,67704,67711,67742,67759,67829,67839,67861,67867,67871,67897,67903,68023,68029,68031,68095,68096,68111,68149,68159,68168,68184,68220,68222,68223,68252,68255,68295,68296,68324,68326,68335,68342,68405,68415,68437,68447,68466,68479,68497,68508,68527,68680,68786,68850,68863,68899,68903,68921,69246,69404,69414,69445,69456,69460,69465,69622,69632,69633,69634,69687,69702,69709,69733,69743,69761,69762,69807,69810,69814,69816,69818,69820,69821,69825,69837,69864,69881,69890,69926,69931,69932,69940,69951,69955,69956,69958,70002,70003,70005,70006,70017,70018,70066,70069,70078,70080,70084,70088,70092,70093,70105,70106,70107,70108,70111,70132,70187,70190,70193,70195,70196,70197,70199,70205,70206,70312,70313,70366,70367,70370,70378,70393,70401,70403,70457,70460,70461,70463,70464,70477,70480,70487,70497,70499,70516,70708,70711,70719,70721,70724,70725,70726,70730,70735,70745,70749,70750,70831,70834,70840,70841,70842,70846,70848,70849,70851,70853,70854,70855,70873,71086,71089,71093,71099,71101,71102,71104,71127,71131,71133,71215,71218,71226,71228,71229,71230,71232,71235,71236,71257,71276,71338,71339,71340,71341,71343,71349,71350,71351,71352,71369,71450,71455,71457,71461,71462,71467,71481,71483,71486,71487,71723,71726,71735,71736,71738,71739,71871,71903,71913,71922,72144,72145,72146,72147,72155,72159,72160,72163,72164,72192,72202,72242,72248,72249,72250,72254,72262,72263,72272,72278,72280,72283,72329,72342,72343,72345,72348,72349,72354,72750,72751,72765,72766,72767,72768,72773,72793,72812,72817,72847,72871,72873,72880,72881,72883,72884,72886,73008,73029,73030,73031,73049,73097,73102,73105,73108,73109,73110,73111,73112,73129,73458,73460,73462,73464,73684,73692,73696,73713,73727,74649,74862,74868,78894,78904,92766,92777,92783,92909,92916,92917,92975,92982,92987,92991,92995,92996,92997,93017,93025,93071,93791,93823,93846,93850,94026,94031,94032,94087,94098,94177,94178,94179,113817,113820,113822,113823,113827,119140,119142,119145,119148,119154,119162,119170,119172,119179,119209,119213,119361,119364,119365,119539,119638,119672,119833,119859,119885,119911,119937,119963,119989,120015,120041,120067,120092,120119,120144,120171,120197,120223,120249,120275,120301,120327,120353,120379,120405,120431,120457,120485,120512,120513,120538,120539,120545,120570,120571,120596,120597,120603,120628,120629,120654,120655,120661,120686,120687,120712,120713,120719,120744,120745,120770,120771,120777,120778,120779,120831,121343,121398,121402,121452,121460,121461,121475,121476,121478,121483,122922,123180,123190,123197,123209,123627,123631,123641,123647,125124,125135,125142,125217,125251,125258,125273,125279,126123,126124,126127,126128,126253,126254,126269,126651,126705,127221,127244,127994,127999,129685,195101,917631,917999);\n// prettier-ignore\nconst _idx = Uint8Array.of(0,1,2,3,2,4,5,2,6,2,7,2,8,2,6,2,9,4,2,5,10,11,10,12,4,6,5,6,0,1,2,3,13,2,10,13,14,15,6,16,13,10,13,6,17,10,18,2,10,17,14,19,17,2,9,6,9,20,12,6,12,21,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,24,25,22,23,22,23,22,23,20,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,20,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,26,22,23,22,23,22,23,27,28,29,22,23,22,23,30,22,23,31,22,23,20,32,33,34,22,23,31,35,36,37,38,22,23,39,20,37,40,41,42,22,23,22,23,22,23,43,22,23,43,20,22,23,43,22,23,44,22,23,22,23,45,22,23,20,14,22,23,20,46,14,47,48,49,47,48,49,47,48,49,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,50,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,20,47,48,49,22,23,51,52,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,53,20,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,20,54,22,23,55,56,57,22,23,58,59,60,22,23,22,23,22,23,22,23,22,23,61,62,63,64,65,20,66,20,67,20,68,69,20,66,70,20,71,20,72,73,20,74,75,73,76,77,20,75,20,78,79,20,80,20,81,20,82,20,83,82,20,84,82,85,86,87,20,88,20,14,20,89,90,20,91,10,91,10,91,10,91,10,91,10,92,93,92,22,23,22,23,91,10,22,23,91,41,2,94,10,95,2,96,97,98,20,9,99,100,20,12,101,12,102,103,104,105,106,107,108,109,110,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,111,112,113,114,115,116,6,22,23,117,22,23,20,53,118,9,12,112,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,13,92,119,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,120,22,23,22,23,22,23,22,23,22,23,22,23,22,23,121,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,122,91,2,20,123,20,2,7,13,3,92,7,92,2,92,2,92,2,92,14,2,16,6,2,3,2,13,92,2,16,2,14,91,14,92,8,2,14,92,14,2,14,92,16,13,92,91,92,13,92,14,8,14,13,14,2,16,14,92,14,92,14,92,14,8,14,92,91,13,2,91,92,3,14,92,91,92,91,92,91,92,2,14,92,2,14,92,16,92,124,14,92,124,92,14,124,92,124,92,124,14,92,14,92,2,8,2,91,14,92,124,14,92,14,124,92,124,92,14,124,14,92,8,14,3,17,13,3,14,2,92,124,14,92,124,92,14,8,92,14,92,2,92,124,14,92,14,124,92,124,92,14,92,8,2,3,14,92,124,14,92,14,124,92,124,92,124,92,124,14,92,8,13,14,17,92,14,124,92,124,92,14,124,8,17,13,3,13,92,124,92,14,92,124,92,14,92,8,2,17,13,14,92,124,2,14,92,14,124,92,124,92,124,92,124,14,92,8,14,92,124,14,92,14,124,92,124,92,14,13,14,124,17,14,92,8,17,13,14,124,14,92,124,92,124,8,124,2,14,92,14,92,3,14,91,92,2,8,2,14,92,14,92,14,91,92,8,14,13,2,13,2,13,92,13,8,17,13,92,13,92,13,92,4,5,4,5,124,14,92,124,92,2,92,14,92,13,92,13,2,13,2,14,124,92,124,92,124,92,124,92,14,8,2,14,124,92,14,92,14,124,14,124,14,92,14,92,124,92,124,92,14,124,8,124,92,13,125,126,2,91,126,14,92,2,17,14,13,127,104,110,7,14,2,14,1,14,4,5,14,2,128,14,92,14,92,2,14,92,14,92,14,92,124,92,124,92,124,92,2,91,2,3,14,92,8,17,2,7,2,92,16,8,14,91,14,92,14,92,14,92,124,92,124,92,124,92,13,2,8,14,8,17,13,14,92,124,92,2,14,124,92,124,92,124,92,124,92,124,92,8,2,91,2,92,119,92,124,14,92,124,92,124,92,124,92,124,14,8,2,13,92,13,92,124,14,124,92,124,92,124,92,14,8,14,92,124,92,124,92,124,92,124,2,14,124,92,124,92,2,8,14,8,14,91,2,129,130,131,132,133,134,135,136,137,2,92,2,92,124,92,14,92,14,92,14,124,92,14,20,91,20,91,138,20,139,20,140,20,91,92,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,20,141,20,142,20,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,143,144,143,144,143,144,143,144,143,144,20,143,20,143,20,143,20,143,144,143,144,145,146,147,148,149,150,143,151,143,151,143,151,143,20,152,20,144,153,154,10,155,10,20,152,20,156,154,10,143,20,144,157,10,143,20,113,20,144,158,117,10,20,152,20,159,160,154,10,1,16,7,2,15,19,4,15,19,4,15,2,161,162,16,1,2,15,19,2,11,2,6,4,5,2,6,2,11,2,1,16,17,91,17,6,4,5,91,17,6,4,5,91,3,92,119,92,119,92,13,107,13,107,13,20,107,20,107,20,13,107,13,6,107,13,107,13,163,13,107,13,164,165,107,13,20,107,166,107,20,14,20,13,20,107,6,107,20,13,6,13,167,13,17,168,169,128,22,23,128,17,13,6,13,6,13,6,13,6,13,6,13,6,13,6,13,6,13,6,13,6,13,4,5,4,5,13,6,13,4,5,13,6,13,6,13,6,13,17,13,170,171,17,13,6,13,6,13,6,13,6,13,4,5,4,5,4,5,4,5,4,5,4,5,4,5,17,13,6,4,5,6,4,5,4,5,4,5,4,5,4,5,6,13,6,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,6,4,5,4,5,6,4,5,6,13,6,13,6,13,122,123,22,23,172,173,174,175,176,22,23,22,23,22,23,177,178,179,180,20,22,23,20,22,23,20,91,181,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,20,13,22,23,22,23,92,22,23,2,17,2,182,14,91,2,92,14,92,2,15,19,15,19,2,15,19,2,15,19,2,7,2,7,2,15,19,2,15,19,4,5,4,5,4,5,4,5,2,91,2,7,2,7,2,4,2,13,1,2,13,91,14,128,4,5,4,5,4,5,4,5,4,5,13,4,5,4,5,4,5,4,5,7,4,5,13,128,92,124,7,91,13,128,91,14,2,13,14,92,10,91,14,7,14,2,91,14,13,17,13,14,13,14,13,17,13,17,13,17,13,17,13,17,13,14,13,14,91,14,13,14,91,2,14,91,2,14,8,14,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,14,92,119,2,92,2,91,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,91,92,14,128,92,2,10,91,10,22,23,22,23,22,23,22,23,22,23,22,23,22,23,20,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,91,20,22,23,22,23,183,22,23,22,23,22,23,22,23,22,23,91,10,22,23,184,20,14,22,23,22,23,185,20,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,186,187,188,189,186,20,190,191,192,193,22,23,22,23,22,23,22,23,22,23,22,23,22,23,194,195,196,14,91,20,14,92,14,92,14,92,14,124,92,124,13,17,13,3,13,14,2,124,14,124,92,2,8,92,14,2,14,2,14,92,8,14,92,2,14,92,124,2,14,92,124,14,92,124,92,124,92,124,2,91,8,2,14,92,91,14,8,14,92,124,92,124,92,14,92,14,92,124,8,2,14,91,14,13,14,124,92,124,14,92,14,92,14,92,14,92,14,92,14,91,2,14,124,92,124,2,14,91,124,92,14,20,197,20,10,91,20,198,14,124,92,124,92,124,2,124,92,8,14,20,14,92,14,6,14,10,14,5,4,14,3,13,92,2,4,5,2,92,2,7,11,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,2,4,5,2,11,2,7,4,5,4,5,4,5,2,6,7,6,2,3,2,14,16,2,3,2,4,5,2,6,2,7,2,8,2,6,2,9,4,2,5,10,11,10,12,4,6,5,6,4,5,2,4,5,2,14,91,14,91,14,3,6,10,13,3,13,6,13,16,13,14,2,17,13,128,17,13,17,13,92,14,92,17,14,17,14,128,14,128,14,92,14,2,14,2,128,199,200,14,8,199,200,14,2,14,2,17,14,13,17,14,17,14,17,14,17,2,14,2,14,17,14,17,14,92,14,92,17,2,14,17,2,14,17,14,13,14,92,17,2,14,2,14,17,14,17,14,2,17,14,97,102,17,14,92,8,17,14,17,14,92,17,2,14,124,92,124,14,92,2,17,8,92,124,14,124,92,124,92,2,16,2,16,14,8,92,14,92,124,92,8,2,14,124,14,92,2,14,92,124,14,124,92,124,14,2,92,2,8,14,2,14,2,17,14,124,92,124,92,124,92,2,92,14,2,14,92,124,92,8,92,124,14,92,14,124,92,124,14,124,14,124,92,14,124,92,124,92,124,92,14,2,8,2,92,14,124,92,124,92,124,92,124,92,14,2,14,8,14,124,92,124,92,124,92,2,14,92,14,124,92,124,92,124,92,2,14,8,2,14,92,124,92,124,92,124,92,14,8,14,92,124,92,124,92,8,17,2,13,14,124,92,124,92,2,9,12,8,17,14,124,92,124,92,124,92,14,124,14,92,14,92,124,14,92,2,92,14,92,124,92,14,92,124,92,2,14,2,14,124,92,124,92,14,2,8,17,2,14,92,124,92,124,92,124,92,14,92,14,92,8,14,124,92,124,92,124,92,14,8,14,92,124,2,17,13,3,13,2,14,128,2,14,16,14,8,2,14,92,2,14,92,2,13,91,2,13,8,17,14,9,12,17,2,14,92,14,124,92,91,2,91,14,13,92,2,16,13,124,92,13,124,16,92,13,92,13,92,13,92,13,17,13,17,107,20,107,20,107,20,107,20,107,20,107,20,107,20,107,20,107,20,107,20,107,20,107,20,107,20,107,6,20,6,20,107,6,20,6,20,107,6,20,6,20,107,6,20,6,20,107,6,20,6,20,107,20,8,13,92,13,92,13,92,13,92,13,2,92,14,92,91,8,14,92,8,3,14,17,92,201,202,92,8,2,17,13,17,3,17,13,17,14,6,13,17,13,10,13,14,16,92);\n// prettier-ignore\nconst _gencat = Uint8Array.of(25,22,17,19,13,14,18,12,8,0,20,11,1,21,4,15,26,10,1,16,1,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,0,2,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,5,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,0,0,7,0,1,0,1,6,0,1,0,9,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,2,1,0,2,1,0,0,0,0,0,23,24,0,0,0,0,1,9,9,21,21,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1);\n// prettier-ignore\nconst _toupper = Int32Array.of(0,0,0,0,0,0,0,0,0,0,0,0,-32,0,0,0,0,0,743,0,0,121,0,-1,0,-232,0,-300,195,0,0,0,0,0,0,0,97,0,0,163,0,130,0,0,0,0,56,0,-1,-2,-79,0,0,0,0,0,0,10815,0,0,0,10783,10780,10782,-210,-206,-205,-202,-203,42319,42315,-207,42280,42308,-209,-211,10743,42305,10749,-213,-214,10727,-218,42307,42282,-69,-217,-71,-219,42261,42258,0,0,84,0,0,0,0,0,-38,-37,-31,-64,-63,0,-62,-57,0,-47,-54,-8,-86,-80,7,-116,0,-96,0,0,0,0,-15,0,-48,0,0,3008,0,0,-6254,-6253,-6244,-6242,-6243,-6236,-6181,35266,0,35332,3814,35384,-59,0,8,0,74,86,100,128,112,126,0,9,0,0,-7205,0,0,0,0,0,0,0,0,0,0,0,-28,0,-16,0,-26,0,0,0,-10795,-10792,0,0,0,0,0,-7264,0,0,48,0,0,0,0,0,0,0,0,0,0,0,-928,-38864,0,-40,0,-34);\n// prettier-ignore\nconst _tolower = Int32Array.of(0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-199,0,-121,0,0,210,206,205,79,202,203,207,0,211,209,0,213,0,214,218,217,219,0,2,1,0,0,-97,-56,-130,10795,-163,10792,0,-195,69,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,38,37,64,63,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,-60,0,-7,80,0,15,0,48,0,0,7264,0,38864,0,0,0,0,0,0,0,0,0,-3008,0,0,0,0,-7615,0,-8,0,0,0,0,0,0,-8,0,-74,-9,0,-86,-100,-112,-128,-126,0,0,-7517,-8383,-8262,28,0,16,0,26,0,-10743,-3814,-10727,0,0,-10780,-10749,-10783,-10782,-10815,0,-35332,-42280,0,-42308,-42319,-42315,-42305,-42258,-42282,-42261,928,-48,-42307,-35384,0,0,40,0,34,0);\n// prettier-ignore\nconst _totitle = Int32Array.of(0,0,0,0,0,0,0,0,0,0,0,0,-32,0,0,0,0,0,743,0,0,121,0,-1,0,-232,0,-300,195,0,0,0,0,0,0,0,97,0,0,163,0,130,0,0,0,0,56,1,0,-1,-79,0,0,0,0,0,0,10815,0,0,0,10783,10780,10782,-210,-206,-205,-202,-203,42319,42315,-207,42280,42308,-209,-211,10743,42305,10749,-213,-214,10727,-218,42307,42282,-69,-217,-71,-219,42261,42258,0,0,84,0,0,0,0,0,-38,-37,-31,-64,-63,0,-62,-57,0,-47,-54,-8,-86,-80,7,-116,0,-96,0,0,0,0,-15,0,-48,0,0,0,0,0,-6254,-6253,-6244,-6242,-6243,-6236,-6181,35266,0,35332,3814,35384,-59,0,8,0,74,86,100,128,112,126,0,9,0,0,-7205,0,0,0,0,0,0,0,0,0,0,0,-28,0,-16,0,-26,0,0,0,-10795,-10792,0,0,0,0,0,-7264,0,0,48,0,0,0,0,0,0,0,0,0,0,0,-928,-38864,0,-40,0,-34);\n\nfunction _bbsearch(key, start, end) {\n  const isBaseCase = start + 1 == end;\n  const pivot = ~~((start + end) / 2);\n  if (key < _first[pivot]) {\n    return isBaseCase ? -1 : _bbsearch(key, start, pivot);\n  } else if (key <= _last[pivot]) {\n    return pivot;\n  } else {\n    return isBaseCase ? -1 : _bbsearch(key, pivot, end);\n  }\n}\n\nfunction _property(table, c) {\n  const idx = _bbsearch(c, 0, c + 1);\n  return idx == -1 ? 0 : table[_idx[idx]];\n}\n\nexport class Unicode {\n  constructor(logger) {\n    Object.seal(this);\n  }\n\n  u_gencat(c) {\n    return _property(_gencat, c);\n  }\n\n  u_iswupper(c) {\n    return !!((1 << this.u_gencat(c)) & 5);\n  }\n\n  u_iswlower(c) {\n    return !!((1 << this.u_gencat(c)) & 2);\n  }\n\n  u_iswspace(c) {\n    return !!((1 << this.u_gencat(c)) & 4194304);\n  }\n\n  u_iswalpha(c) {\n    return !!((1 << this.u_gencat(c)) & 31);\n  }\n\n  u_iswdigit(c) {\n    return !!((1 << this.u_gencat(c)) & 256);\n  }\n\n  u_iswalnum(c) {\n    return !!((1 << this.u_gencat(c)) & 1823);\n  }\n\n  u_iswprint(c) {\n    return !!((1 << this.u_gencat(c)) & 8388607);\n  }\n\n  u_iswcntrl(c) {\n    return !!((1 << this.u_gencat(c)) & 33554432);\n  }\n\n  u_towlower(c) {\n    return c + _property(_tolower, c);\n  }\n\n  u_towupper(c) {\n    return c + _property(_toupper, c);\n  }\n\n  u_towtitle(c) {\n    return c + _property(_totitle, c);\n  }\n}\n","import * as rtsConstants from \"./rts.constants.mjs\";\n\nfunction decodeTys(arr, tag) {\n  const tys = [];\n  while (tag) {\n    const i = (tag & 0x1f) - 1;\n    if (!arr[i]) {\n      throw new WebAssembly.RuntimeError(`decodeTys: unsupported tag ${tag}`);\n    }\n    tys.push(arr[i]);\n    tag >>>= 5;\n  }\n  return tys;\n}\n\nfunction decodeRtsMk(e, ty) {\n  switch (ty) {\n    case \"JSVal\": {\n      return v => e.rts_mkJSVal(e.context.stablePtrManager.newJSVal(v));\n    }\n    default: {\n      const f = `rts_mk${ty}`;\n      return v => e[f](v);\n    }\n  }\n}\n\nfunction decodeRtsGet(e, ty) {\n  switch (ty) {\n    case \"JSVal\": {\n      return p => e.context.stablePtrManager.getJSVal(e.rts_getJSVal(p));\n    }\n    default: {\n      const f = `rts_get${ty}`;\n      return p => e[f](p);\n    }\n  }\n}\n\nexport class Exports {\n  constructor(\n    memory,\n    reentrancy_guard,\n    symbol_table,\n    scheduler,\n    stableptr_manager\n  ) {\n    this.context = Object.freeze({\n      memory: memory,\n      reentrancyGuard: reentrancy_guard,\n      symbolTable: symbol_table,\n      scheduler: scheduler,\n      stablePtrManager: stableptr_manager,\n      callbackStablePtrs: new Map(),\n      rtsMkFuncs: rtsConstants.hsTyCons.map(ty => decodeRtsMk(this, ty)),\n      rtsGetFuncs: rtsConstants.hsTyCons.map(ty => decodeRtsGet(this, ty))\n    });\n  }\n\n  rts_evalIO(p) {\n    return this.context.scheduler.submitCmdCreateThread(\n      \"createStrictIOThread\",\n      p\n    );\n  }\n\n  rts_evalLazyIO(p) {\n    return this.context.scheduler.submitCmdCreateThread(\"createIOThread\", p);\n  }\n\n  newHaskellCallback(sp, arg_tag, ret_tag, io, finalizer) {\n    const arg_mk_funcs = decodeTys(this.context.rtsMkFuncs, arg_tag),\n      ret_get_funcs = decodeTys(this.context.rtsGetFuncs, ret_tag),\n      run_func = this.context.symbolTable[\n        io\n          ? \"base_AsteriusziTopHandler_runIO_closure\"\n          : \"base_AsteriusziTopHandler_runNonIO_closure\"\n      ],\n      eval_func = ret_get_funcs.length\n        ? p => this.rts_evalIO(p)\n        : p => this.rts_evalLazyIO(p);\n    if (ret_get_funcs.length > 1) {\n      throw new WebAssembly.RuntimeError(`Multiple returns not supported`);\n    }\n    const cb = async (...args) => {\n      try {\n        if (args.length !== arg_mk_funcs.length) {\n          throw new WebAssembly.RuntimeError(\n            `Expected ${arg_mk_funcs.length} arguments, got ${args.length}`\n          );\n        }\n        let p = this.context.stablePtrManager.deRefStablePtr(sp);\n        for (let i = 0; i < args.length; ++i) {\n          p = this.rts_apply(p, arg_mk_funcs[i](args[i]));\n        }\n        p = this.rts_apply(run_func, p);\n        const tid = await eval_func(p);\n        if (ret_get_funcs.length) {\n          return ret_get_funcs[0](this.context.scheduler.getTSOret(tid));\n        }\n      } finally {\n        finalizer();\n      }\n    };\n    this.context.callbackStablePtrs.set(cb, sp);\n    return cb;\n  }\n\n  freeHaskellCallback(sn) {\n    const cb = this.context.stablePtrManager.getJSVal(sn);\n    this.context.stablePtrManager.freeStablePtr(\n      this.context.callbackStablePtrs.get(cb)\n    );\n    this.context.callbackStablePtrs.delete(cb);\n    this.context.stablePtrManager.freeJSVal(sn);\n  }\n}\n","/**\n * @file Implements browser-specific functionality.\n */\n\nclass Device {\n  constructor(f, console_history) {\n    this.flush = f;\n    this.consoleHistory = console_history;\n    this.history = \"\";\n    this.buffer = \"\";\n    this.decoder = new TextDecoder(\"utf-8\", { fatal: true });\n    Object.seal(this);\n  }\n\n  read() {\n    const r = this.history;\n    this.history = \"\";\n    return r;\n  }\n\n  write(buf) {\n    const str =\n      typeof buf === \"string\"\n        ? buf\n        : this.decoder.decode(buf, { stream: true });\n    if (this.consoleHistory) {\n      this.history += str;\n    }\n    this.buffer += str;\n    const segs = this.buffer.split(\"\\n\");\n    this.buffer = segs.pop();\n    for (const seg of segs) {\n      this.flush(seg);\n    }\n    return buf.length;\n  }\n}\n\nclass MemoryFileSystem {\n  constructor(console_history) {\n    this.files = [\n      undefined,\n      new Device(console.log, console_history),\n      new Device(console.error, console_history)\n    ];\n    Object.freeze(this);\n  }\n\n  readSync(fd) {\n    return this.files[fd].read();\n  }\n\n  writeSync(fd, buf) {\n    return this.files[fd].write(buf);\n  }\n}\n\nclass Posix {\n  constructor(memory, rtsConstants) {\n    this.memory = memory;\n    Object.seal(this);\n  }\n  getProgArgv(argc, argv_buf) {\n    this.memory.i64Store(argc, 1);\n  }\n  get_errno() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: get_errno\");\n  }\n  set_errno() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: set_errno\");\n  }\n  open() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: open\");\n  }\n  close() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: close\");\n  }\n  ftruncate() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: ftruncate\");\n  }\n  stat() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: stat\");\n  }\n  fstat() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: fstat\");\n  }\n  opendir() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: opendir\");\n  }\n  readdir() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: readdir\");\n  }\n  closedir() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: closedir\");\n  }\n  getenv() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: getenv\");\n  }\n  access() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: access\");\n  }\n  getcwd() {\n    throw WebAssembly.RuntimeError(\"Unsupported rts interface: getcwd\");\n  }\n}\n\nexport default {\n  /**\n   * A custom Time interface, used in {@link TimeCBits}.\n   */\n  Time: {\n    /**\n     * Returns the current timestamp, where 0 represents\n     * the time origin of the document.\n     * @returns A [seconds, nanoseconds] Array.\n     */\n    getCPUTime: () => {\n      const ms = performance.now(),\n            s = Math.floor(ms / 1000.0),\n            ns = Math.floor(ms - s * 1000) * 1000000;\n      return [s, ns];\n    },\n    /**\n     * Returns the current timestamp, where 0 represents UNIX Epoch.\n     * @returns A [seconds, nanoseconds] Array.\n     */\n    getUnixEpochTime: () => {\n      const ms = Date.now(),\n            s = Math.floor(ms / 1000.0),\n            ns = Math.floor(ms - s * 1000) * 1000000;\n      return [s, ns];\n    },\n    /**\n     * The resolution of the timestamps in nanoseconds.\n     * Note! Due to the Spectre attack, browsers do not\n     * provide high-resolution timestamps anymore.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\n     * and https://spectreattack.com.\n     * We fallback to a resolution of 1ms.\n     */\n    resolution: 1000000\n  },\n  fs: MemoryFileSystem,\n  posix: Posix\n};\n\n// The content below is MIT licensed, adapted from\n// https://github.com/YuzuJS/setImmediate\n\n// Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic\n// Denicola\n\n(function (global, undefined) {\n  \"use strict\";\n\n  if (global.setImmediate) {\n      return;\n  }\n\n  var nextHandle = 1; // Spec says greater than zero\n  var tasksByHandle = {};\n  var currentlyRunningATask = false;\n  var doc = global.document;\n  var registerImmediate;\n\n  function setImmediate(callback) {\n    // Callback can either be a function or a string\n    if (typeof callback !== \"function\") {\n      callback = new Function(\"\" + callback);\n    }\n    // Copy function arguments\n    var args = new Array(arguments.length - 1);\n    for (var i = 0; i < args.length; i++) {\n        args[i] = arguments[i + 1];\n    }\n    // Store and register the task\n    var task = { callback: callback, args: args };\n    tasksByHandle[nextHandle] = task;\n    registerImmediate(nextHandle);\n    return nextHandle++;\n  }\n\n  function clearImmediate(handle) {\n      delete tasksByHandle[handle];\n  }\n\n  function run(task) {\n      var callback = task.callback;\n      var args = task.args;\n      switch (args.length) {\n      case 0:\n          callback();\n          break;\n      case 1:\n          callback(args[0]);\n          break;\n      case 2:\n          callback(args[0], args[1]);\n          break;\n      case 3:\n          callback(args[0], args[1], args[2]);\n          break;\n      default:\n          callback.apply(undefined, args);\n          break;\n      }\n  }\n\n  function runIfPresent(handle) {\n      // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n      // So if we're currently running a task, we'll need to delay this invocation.\n      if (currentlyRunningATask) {\n          // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n          // \"too much recursion\" error.\n          setTimeout(runIfPresent, 0, handle);\n      } else {\n          var task = tasksByHandle[handle];\n          if (task) {\n              currentlyRunningATask = true;\n              try {\n                  run(task);\n              } finally {\n                  clearImmediate(handle);\n                  currentlyRunningATask = false;\n              }\n          }\n      }\n  }\n\n  function installNextTickImplementation() {\n      registerImmediate = function(handle) {\n          process.nextTick(function () { runIfPresent(handle); });\n      };\n  }\n\n  function canUsePostMessage() {\n      // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n      // where `global.postMessage` means something completely different and can't be used for this purpose.\n      if (global.postMessage && !global.importScripts) {\n          var postMessageIsAsynchronous = true;\n          var oldOnMessage = global.onmessage;\n          global.onmessage = function() {\n              postMessageIsAsynchronous = false;\n          };\n          global.postMessage(\"\", \"*\");\n          global.onmessage = oldOnMessage;\n          return postMessageIsAsynchronous;\n      }\n  }\n\n  function installPostMessageImplementation() {\n      // Installs an event handler on `global` for the `message` event: see\n      // * https://developer.mozilla.org/en/DOM/window.postMessage\n      // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n      var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n      var onGlobalMessage = function(event) {\n          if (event.source === global &&\n              typeof event.data === \"string\" &&\n              event.data.indexOf(messagePrefix) === 0) {\n              runIfPresent(+event.data.slice(messagePrefix.length));\n          }\n      };\n\n      if (global.addEventListener) {\n          global.addEventListener(\"message\", onGlobalMessage, false);\n      } else {\n          global.attachEvent(\"onmessage\", onGlobalMessage);\n      }\n\n      registerImmediate = function(handle) {\n          global.postMessage(messagePrefix + handle, \"*\");\n      };\n  }\n\n  function installMessageChannelImplementation() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = function(event) {\n          var handle = event.data;\n          runIfPresent(handle);\n      };\n\n      registerImmediate = function(handle) {\n          channel.port2.postMessage(handle);\n      };\n  }\n\n  function installReadyStateChangeImplementation() {\n      var html = doc.documentElement;\n      registerImmediate = function(handle) {\n          // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n          // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n          var script = doc.createElement(\"script\");\n          script.onreadystatechange = function () {\n              runIfPresent(handle);\n              script.onreadystatechange = null;\n              html.removeChild(script);\n              script = null;\n          };\n          html.appendChild(script);\n      };\n  }\n\n  function installSetTimeoutImplementation() {\n      registerImmediate = function(handle) {\n          setTimeout(runIfPresent, 0, handle);\n      };\n  }\n\n  // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n  attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n  // Don't get fooled by e.g. browserify environments.\n  if ({}.toString.call(global.process) === \"[object process]\") {\n      // For Node.js before 0.9\n      installNextTickImplementation();\n\n  } else if (canUsePostMessage()) {\n      // For non-IE10 modern browsers\n      installPostMessageImplementation();\n\n  } else if (global.MessageChannel) {\n      // For web workers, where supported\n      installMessageChannelImplementation();\n\n  } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n      // For IE 6–8\n      installReadyStateChangeImplementation();\n\n  } else {\n      // For older browsers\n      installSetTimeoutImplementation();\n  }\n\n  attachTo.setImmediate = setImmediate;\n  attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import targetSpecificModule from './browser/default.mjs';\n\nexport default {jsffiFactory: __asterius_jsffi=>({jsffi: {__asterius_jsffi_basezuAsteriusziTypesziJSException_achqe:($1)=>{$1 = __asterius_jsffi.getJSVal($1);return __asterius_jsffi.newJSVal($1.stack ? $1.stack : `${$1}`);},__asterius_jsffi_basezuAsteriusziTypesziJSString_ac9zu:($1)=>{$1 = __asterius_jsffi.getJSVal($1);return __asterius_jsffi.newJSVal($1[0]);},__asterius_jsffi_basezuAsteriusziTypesziJSString_ac9zO:($1,$2)=>{$1 = __asterius_jsffi.getJSVal($1);return ($1[0] += String.fromCodePoint($2));},__asterius_jsffi_basezuAsteriusziTypesziJSString_ac9zX:()=>{return __asterius_jsffi.newJSVal(['']);},__asterius_jsffi_basezuAsteriusziTypesziJSString_ac9A9:($1)=>{$1 = __asterius_jsffi.getJSVal($1);return ((() => { const r = $1.next(); return r.done ? 0 : (1 + r.value.codePointAt(0)); })());},__asterius_jsffi_basezuAsteriusziTypesziJSString_ac9Aq:($1)=>{$1 = __asterius_jsffi.getJSVal($1);return __asterius_jsffi.newJSVal($1[Symbol.iterator]());},__asterius_jsffi_basezuAsteriusziTypesziJSVal_ac6ak:($1)=>{return (__asterius_jsffi.freeJSVal($1));}}}), exportsStatic: [[\"hsRunDynamic\",0x001ffff700042e10,0x0000000000000426,0x0000000000000001,true]], symbolTable: Object.freeze({\"MainCapability\":0x1ffff700000400,\"ghczmprim_GHCziTypes_Izh_con_info\":0x1ffff700000960,\"ghczmprim_GHCziTypes_ZMZN_closure\":0x1ffff7000008a0,\"ghczmprim_GHCziTypes_ZC_con_info\":0x1ffff700000880,\"ghczmprim_GHCziTypes_True_closure\":0x1ffff700000bd0,\"ghczmprim_GHCziTypes_False_closure\":0x1ffff700000b80,\"base_AsteriusziTypesziJSException_mkJSException_closure\":0x1ffff7000312a0,\"ghczmprim_GHCziTypes_Czh_con_info\":0x1ffff70000a070,\"base_GHCziPtr_Ptr_con_info\":0x1ffff70000a110,\"stg_ARR_WORDS_info\":0x1ffff700032c70,\"barf\":0x1fffed000005af,\"stg_WEAK_info\":0x1ffff7000395d0,\"stg_NO_FINALIZER_closure\":0x1ffff7000395a0,\"ghczmprim_GHCziTypes_Dzh_con_info\":0x1ffff70000a150,\"ghczmprim_GHCziTypes_Wzh_con_info\":0x1ffff700000db0,\"stg_IND_info\":0x1ffff7000394a0,\"stg_marked_upd_frame_info\":0x1ffff700039640,\"stg_WHITEHOLE_info\":0x1ffff700039320,\"stg_BLACKHOLE_info\":0x1ffff700039660,\"stg_raise_ret_info\":0x1ffff7000393f0,\"base_AsteriusziTopHandler_runIO_closure\":0x1ffff70002bfd0,\"base_AsteriusziTopHandler_runNonIO_closure\":0x1ffff70002c010,\"stg_raise_info\":0x1ffff700039480,\"stg_DEAD_WEAK_info\":0x1ffff7000395b0,\"stg_STABLE_NAME_info\":0x1ffff70003a0a0}), sptEntries: new Map([]), tableSlots: 6367, staticMBlocks: 1, yolo: false, consoleHistory: false, gcThreshold: 0x40, targetSpecificModule: targetSpecificModule};\n","export default __webpack_public_path__ + \"e168991b78911bd9475d0f773ffbddb2.wasm\";","import * as rts from \"../gen/rts.mjs\";\nimport req from \"../gen/Browser.req.mjs\";\nimport wasmPath from '../gen/Browser.wasm';\n\nlet wasmModule = WebAssembly.compileStreaming(fetch(wasmPath));\n\nlet instance = wasmModule.then(m =>\n    rts.newAsteriusInstance(Object.assign(req, {module: m}))\n  ).catch(err => console.error(err));\n\nonmessage = function(e) {\n  let {data} = e;\n  let {input, program, len} = data;\n  instance.then(i =>\n    i.exports.hsRunDynamic(len, program, input)\n  ).then(out => {\n    postMessage({\n      good: true,\n      out\n    });\n  }).catch(err => {\n    postMessage({\n      good: false,\n      err: 'FRACTRAN engine error, likely it detected an infinite loop in your FRACTRAN code.'\n    });\n  }).then(close);\n}\n","import { modulify } from \"./rts.modulify.mjs\";\nimport { ReentrancyGuard } from \"./rts.reentrancy.mjs\";\nimport { EventLogManager } from \"./rts.eventlog.mjs\";\nimport { Tracer } from \"./rts.tracing.mjs\";\nimport { Memory } from \"./rts.memory.mjs\";\nimport { MemoryTrap } from \"./rts.memorytrap.mjs\";\nimport { HeapAlloc } from \"./rts.heapalloc.mjs\";\nimport { StablePtrManager } from \"./rts.stableptr.mjs\";\nimport { StableNameManager } from \"./rts.stablename.mjs\";\nimport { StaticPtrManager } from \"./rts.staticptr.mjs\";\nimport { Scheduler } from \"./rts.scheduler.mjs\";\nimport { IntegerManager } from \"./rts.integer.mjs\";\nimport { ByteStringCBits } from \"./rts.bytestring.mjs\";\nimport { TextCBits } from \"./rts.text.mjs\";\nimport { TimeCBits } from \"./rts.time.mjs\";\nimport { GC } from \"./rts.gc.mjs\";\nimport { ExceptionHelper } from \"./rts.exception.mjs\";\nimport { Messages } from \"./rts.messages.mjs\";\nimport { FloatCBits } from \"./rts.float.mjs\";\nimport { Unicode } from \"./rts.unicode.mjs\";\nimport { Exports } from \"./rts.exports.mjs\";\nimport { getNodeModules } from \"./rts.node.mjs\";\nimport * as rtsConstants from \"./rts.constants.mjs\";\n\nexport async function newAsteriusInstance(req) {\n  let __asterius_persistent_state = req.persistentState\n      ? req.persistentState\n      : {},\n    __asterius_reentrancy_guard = new ReentrancyGuard([\"Scheduler\", \"GC\"]),\n    __asterius_logger = new EventLogManager(req.symbolTable),\n    __asterius_tracer = new Tracer(__asterius_logger, req.symbolTable),\n    __asterius_wasm_instance = null,\n    __asterius_wasm_table = new WebAssembly.Table({\n      element: \"anyfunc\",\n      initial: req.tableSlots\n    }),\n    __asterius_wasm_memory = new WebAssembly.Memory({\n      initial: Math.max(req.staticMBlocks + 2, req.gcThreshold) * (rtsConstants.mblock_size / 65536)\n    }),\n    __asterius_memory = new Memory(),\n    __asterius_memory_trap = new MemoryTrap(\n      __asterius_logger,\n      req.symbolTable,\n      __asterius_memory\n    ),\n    __asterius_heapalloc = new HeapAlloc(\n      __asterius_memory\n    ),\n    __asterius_stableptr_manager = new StablePtrManager(),\n    __asterius_stablename_manager = new StableNameManager(\n      __asterius_memory,\n      __asterius_heapalloc,\n      req.symbolTable\n    ),\n    __asterius_staticptr_manager = new StaticPtrManager(__asterius_memory, __asterius_stableptr_manager, req.sptEntries),\n    __asterius_fs = new (req.targetSpecificModule.fs)(req.consoleHistory),\n    __asterius_scheduler = new Scheduler(\n      __asterius_memory,\n      req.symbolTable,\n      __asterius_stableptr_manager,\n      __asterius_fs\n    ),\n    __asterius_integer_manager = new IntegerManager(),\n    __asterius_bytestring_cbits = new ByteStringCBits(null),\n    __asterius_text_cbits = new TextCBits(__asterius_memory),\n    __asterius_time_cbits = new TimeCBits(__asterius_memory, req.targetSpecificModule),\n    __asterius_gc = new GC(\n      __asterius_memory,\n      __asterius_heapalloc,\n      __asterius_stableptr_manager,\n      __asterius_stablename_manager,\n      __asterius_scheduler,\n      req.infoTables,\n      req.symbolTable,\n      __asterius_reentrancy_guard,\n      req.yolo,\n      req.gcThreshold\n    ),\n    __asterius_float_cbits = new FloatCBits(__asterius_memory),\n    __asterius_messages = new Messages(__asterius_memory, __asterius_fs),\n    __asterius_unicode = new Unicode(),\n    __asterius_exports = new Exports(\n      __asterius_memory,\n      __asterius_reentrancy_guard,\n      req.symbolTable,\n      __asterius_scheduler,\n      __asterius_stableptr_manager\n    ),\n    __asterius_exception_helper = new ExceptionHelper(\n      __asterius_memory,\n      __asterius_heapalloc,\n      __asterius_exports,\n      req.infoTables,\n      req.symbolTable\n    );\n  __asterius_scheduler.exports = __asterius_exports;\n\n  const __asterius_node_modules = await getNodeModules();\n\n  function __asterius_show_I64(x) {\n    return `0x${x.toString(16).padStart(8, \"0\")}`;\n  }\n\n  const __asterius_jsffi_instance = {\n    exposeMemory: (p, len, t = Uint8Array) => __asterius_memory.expose(p, len, t),\n    newJSVal: v => __asterius_stableptr_manager.newJSVal(v),\n    getJSVal: i => __asterius_stableptr_manager.getJSVal(i),\n    freeJSVal: i => __asterius_stableptr_manager.freeJSVal(i),\n    fs: __asterius_fs,\n    stdio: {\n      stdout: () => __asterius_fs.readSync(1),\n      stderr: () => __asterius_fs.readSync(2)\n    },\n    returnFFIPromise: (promise) =>\n      __asterius_scheduler.returnFFIPromise(promise)\n  };\n\n\n  const importObject = Object.assign(\n    req.jsffiFactory(__asterius_jsffi_instance),\n    {\n      Math: Math,\n      WasmTable: {\n        table: __asterius_wasm_table\n      },\n      WasmMemory: {\n        memory: __asterius_wasm_memory\n      },\n      rts: {\n        printI64: x =>\n          __asterius_fs.writeSync(1, `${__asterius_show_I64(x)}\\n`),\n        assertEqI64: function(x, y) {\n          if (x != y) {\n            throw new WebAssembly.RuntimeError(`unequal I64: ${x}, ${y}`);\n          }\n        },\n        print: x => __asterius_fs.writeSync(1, `${x}\\n`)\n      },\n      fs: {\n        read: (fd, buf, count) => {\n          const p = Memory.unTag(buf);\n          return __asterius_node_modules.fs.readSync(\n            fd,\n            __asterius_memory.i8View,\n            p,\n            count,\n            null\n          );\n        },\n        write: (fd, buf, count) => {\n          const p = Memory.unTag(buf);\n          return (fd <= 2\n            ? __asterius_fs\n            : __asterius_node_modules.fs\n          ).writeSync(fd, __asterius_memory.i8View.subarray(p, p + count));\n        }\n      },\n      posix: modulify(new (req.targetSpecificModule.posix)(__asterius_memory, rtsConstants)),\n      bytestring: modulify(__asterius_bytestring_cbits),\n      text: modulify(__asterius_text_cbits),\n      time: modulify(__asterius_time_cbits),\n      // cannot name this float since float is a keyword.\n      floatCBits: modulify(__asterius_float_cbits),\n      GC: modulify(__asterius_gc),\n      ExceptionHelper: modulify(__asterius_exception_helper),\n      HeapAlloc: modulify(__asterius_heapalloc),\n      Integer: modulify(__asterius_integer_manager),\n      Memory: modulify(__asterius_memory),\n      MemoryTrap: modulify(__asterius_memory_trap),\n      Messages: modulify(__asterius_messages),\n      StablePtr: modulify(__asterius_stableptr_manager),\n      StableName: modulify(__asterius_stablename_manager),\n      StaticPtr: modulify(__asterius_staticptr_manager),\n      Unicode: modulify(__asterius_unicode),\n      Tracing: modulify(__asterius_tracer),\n      Exports: {\n        newHaskellCallback: (sp, arg_tag, ret_tag, io, oneshot) => {\n          let sn = [];\n          let cb = __asterius_exports.newHaskellCallback(\n            sp,\n            arg_tag,\n            ret_tag,\n            io,\n            oneshot\n              ? () => __asterius_exports.freeHaskellCallback(sn[0])\n              : () => {}\n          );\n          sn[0] = __asterius_stableptr_manager.newJSVal(cb);\n          return sn[0];\n        },\n        freeHaskellCallback: sn => __asterius_exports.freeHaskellCallback(sn)\n      },\n      Scheduler: modulify(__asterius_scheduler)\n    }\n  );\n\n  return WebAssembly.instantiate(req.module, importObject).then(i => {\n    __asterius_wasm_instance = i;\n    __asterius_memory.init(__asterius_wasm_memory, req.staticMBlocks);\n    __asterius_heapalloc.init();\n    __asterius_bytestring_cbits.memory = __asterius_memory;\n    __asterius_scheduler.setGC(__asterius_gc);\n\n    for (const [f, p, a, r, i] of req.exportsStatic) {\n      __asterius_exports[\n        f\n      ] = __asterius_exports.newHaskellCallback(\n        __asterius_stableptr_manager.newStablePtr(p),\n        a,\n        r,\n        i,\n        () => {}\n      );\n    }\n\n    Object.assign(__asterius_exports, __asterius_wasm_instance.exports);\n    __asterius_exports.hs_init();\n\n    return Object.assign(__asterius_jsffi_instance, {\n      exports: __asterius_exports,\n      symbolTable: req.symbolTable,\n      persistentState: __asterius_persistent_state\n    });\n  });\n}\n","export async function getNodeModules() {\n  return undefined;\n}\n"],"sourceRoot":""}